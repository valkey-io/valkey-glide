[project]
dynamic = ["version"]
name = "valkey-glide-sync"
license = { text = "Apache-2.0" }
dependencies = [
    # ⚠️  Note: If you add a dependency here, make sure to also add it to glide-sync/requirements.txt
    # Once issue https://github.com/aboutcode-org/python-inspector/issues/197 is resolved, the requirements.txt file can be removed.
    "cffi>=1.0.0",
    "typing-extensions>=4.8.0",
    "protobuf>=3.20",
]
classifiers = [
    "Topic :: Database",
    "Topic :: Utilities",
    "Intended Audience :: Developers",
    "Topic :: Software Development",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

[build-system]
requires = [
    "setuptools>=61.0", 
    "wheel", 
    "cffi>=1.0.0"
]

[tool.setuptools]
package-dir = {"" = "./"}
include-package-data = true
packages = ["glide_sync", "glide_sync.sync_commands"]

[tool.cibuildwheel.environment]
RELEASE_MODE = "1"

[tool.cibuildwheel]
build = "cp313-*"
skip = "*-musllinux* *i686* *i386*"
enable = ["pypy"]
before-build = """
#!/usr/bin/env bash
set -e

ARCH=$(uname -m)
OS=$(uname -s | tr '[:upper:]' '[:lower:]')

# Install rust
curl https://sh.rustup.rs -sSf | sh -s -- -y && export PATH=$HOME/.cargo/bin:$PATH
# Install protobuf compiler

# Install protobuf
PB_REL="https://github.com/protocolbuffers/protobuf/releases"
if [[ "$OS" == "darwin" ]]; then
    echo "Detected macOS ($ARCH)"

    if command -v brew &>/dev/null; then
        echo "Using Homebrew to install protobuf"
        brew install protobuf || true
        brew link protobuf --force || true
        exit 0
    fi

    # If brew fails or is unavailable
    PROTOC_ARCH="osx-${ARCH}"
    curl -LO "$PB_REL/download/v3.20.3/protoc-3.20.3-${PROTOC_ARCH}.zip"
    unzip -o "protoc-3.20.3-${PROTOC_ARCH}.zip" -d "$HOME/.local"
    exit 0

elif [[ "$OS" == "linux" ]]; then
    echo "Detected Linux ($ARCH)"
    if command -v apt &>/dev/null; then
        apt-get update
        apt-get install unzip curl -y
    fi

    case "$ARCH" in
      x86_64)
        PROTOC_ARCH="x86_64"
        ;;
      aarch64)
        PROTOC_ARCH="aarch_64"
        export CC_aarch64_unknown_linux_gnu=gcc
        export CFLAGS_aarch64_unknown_linux_gnu="-march=armv8-a"
        ;;
      *)
        echo "Unsupported architecture: $ARCH"
        exit 1
        ;;
    esac

    curl -LO "$PB_REL/download/v3.20.3/protoc-3.20.3-linux-${PROTOC_ARCH}.zip"
    unzip -o "protoc-3.20.3-linux-${PROTOC_ARCH}.zip" -d "$HOME/.local"
    exit 0
else
    echo "Running on unsupported OS: $OS"
    exit 1
fi
"""
