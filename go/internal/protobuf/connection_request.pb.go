// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.1
// source: connection_request.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReadFrom int32

const (
	ReadFrom_Primary                      ReadFrom = 0
	ReadFrom_PreferReplica                ReadFrom = 1
	ReadFrom_LowestLatency                ReadFrom = 2
	ReadFrom_AZAffinity                   ReadFrom = 3
	ReadFrom_AZAffinityReplicasAndPrimary ReadFrom = 4
)

// Enum value maps for ReadFrom.
var (
	ReadFrom_name = map[int32]string{
		0: "Primary",
		1: "PreferReplica",
		2: "LowestLatency",
		3: "AZAffinity",
		4: "AZAffinityReplicasAndPrimary",
	}
	ReadFrom_value = map[string]int32{
		"Primary":                      0,
		"PreferReplica":                1,
		"LowestLatency":                2,
		"AZAffinity":                   3,
		"AZAffinityReplicasAndPrimary": 4,
	}
)

func (x ReadFrom) Enum() *ReadFrom {
	p := new(ReadFrom)
	*p = x
	return p
}

func (x ReadFrom) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadFrom) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_request_proto_enumTypes[0].Descriptor()
}

func (ReadFrom) Type() protoreflect.EnumType {
	return &file_connection_request_proto_enumTypes[0]
}

func (x ReadFrom) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadFrom.Descriptor instead.
func (ReadFrom) EnumDescriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{0}
}

type TlsMode int32

const (
	TlsMode_NoTls       TlsMode = 0
	TlsMode_SecureTls   TlsMode = 1
	TlsMode_InsecureTls TlsMode = 2
)

// Enum value maps for TlsMode.
var (
	TlsMode_name = map[int32]string{
		0: "NoTls",
		1: "SecureTls",
		2: "InsecureTls",
	}
	TlsMode_value = map[string]int32{
		"NoTls":       0,
		"SecureTls":   1,
		"InsecureTls": 2,
	}
)

func (x TlsMode) Enum() *TlsMode {
	p := new(TlsMode)
	*p = x
	return p
}

func (x TlsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TlsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_request_proto_enumTypes[1].Descriptor()
}

func (TlsMode) Type() protoreflect.EnumType {
	return &file_connection_request_proto_enumTypes[1]
}

func (x TlsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TlsMode.Descriptor instead.
func (TlsMode) EnumDescriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{1}
}

type ProtocolVersion int32

const (
	ProtocolVersion_RESP3 ProtocolVersion = 0
	ProtocolVersion_RESP2 ProtocolVersion = 1
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		0: "RESP3",
		1: "RESP2",
	}
	ProtocolVersion_value = map[string]int32{
		"RESP3": 0,
		"RESP2": 1,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_request_proto_enumTypes[2].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_connection_request_proto_enumTypes[2]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{2}
}

type PubSubChannelType int32

const (
	PubSubChannelType_Exact   PubSubChannelType = 0
	PubSubChannelType_Pattern PubSubChannelType = 1
	PubSubChannelType_Sharded PubSubChannelType = 2
)

// Enum value maps for PubSubChannelType.
var (
	PubSubChannelType_name = map[int32]string{
		0: "Exact",
		1: "Pattern",
		2: "Sharded",
	}
	PubSubChannelType_value = map[string]int32{
		"Exact":   0,
		"Pattern": 1,
		"Sharded": 2,
	}
)

func (x PubSubChannelType) Enum() *PubSubChannelType {
	p := new(PubSubChannelType)
	*p = x
	return p
}

func (x PubSubChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PubSubChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_request_proto_enumTypes[3].Descriptor()
}

func (PubSubChannelType) Type() protoreflect.EnumType {
	return &file_connection_request_proto_enumTypes[3]
}

func (x PubSubChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PubSubChannelType.Descriptor instead.
func (PubSubChannelType) EnumDescriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{3}
}

type NodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *NodeAddress) Reset() {
	*x = NodeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddress) ProtoMessage() {}

func (x *NodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddress.ProtoReflect.Descriptor instead.
func (*NodeAddress) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{0}
}

func (x *NodeAddress) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NodeAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type AuthenticationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *AuthenticationInfo) Reset() {
	*x = AuthenticationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationInfo) ProtoMessage() {}

func (x *AuthenticationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationInfo.ProtoReflect.Descriptor instead.
func (*AuthenticationInfo) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticationInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthenticationInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type PeriodicChecksManualInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationInSec uint32 `protobuf:"varint,1,opt,name=duration_in_sec,json=durationInSec,proto3" json:"duration_in_sec,omitempty"`
}

func (x *PeriodicChecksManualInterval) Reset() {
	*x = PeriodicChecksManualInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicChecksManualInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicChecksManualInterval) ProtoMessage() {}

func (x *PeriodicChecksManualInterval) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicChecksManualInterval.ProtoReflect.Descriptor instead.
func (*PeriodicChecksManualInterval) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{2}
}

func (x *PeriodicChecksManualInterval) GetDurationInSec() uint32 {
	if x != nil {
		return x.DurationInSec
	}
	return 0
}

type PeriodicChecksDisabled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeriodicChecksDisabled) Reset() {
	*x = PeriodicChecksDisabled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeriodicChecksDisabled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicChecksDisabled) ProtoMessage() {}

func (x *PeriodicChecksDisabled) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicChecksDisabled.ProtoReflect.Descriptor instead.
func (*PeriodicChecksDisabled) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{3}
}

type PubSubChannelsOrPatterns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelsOrPatterns [][]byte `protobuf:"bytes,1,rep,name=channels_or_patterns,json=channelsOrPatterns,proto3" json:"channels_or_patterns,omitempty"`
}

func (x *PubSubChannelsOrPatterns) Reset() {
	*x = PubSubChannelsOrPatterns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubChannelsOrPatterns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubChannelsOrPatterns) ProtoMessage() {}

func (x *PubSubChannelsOrPatterns) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubChannelsOrPatterns.ProtoReflect.Descriptor instead.
func (*PubSubChannelsOrPatterns) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{4}
}

func (x *PubSubChannelsOrPatterns) GetChannelsOrPatterns() [][]byte {
	if x != nil {
		return x.ChannelsOrPatterns
	}
	return nil
}

type PubSubSubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelsOrPatternsByType map[uint32]*PubSubChannelsOrPatterns `protobuf:"bytes,1,rep,name=channels_or_patterns_by_type,json=channelsOrPatternsByType,proto3" json:"channels_or_patterns_by_type,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PubSubSubscriptions) Reset() {
	*x = PubSubSubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubSubscriptions) ProtoMessage() {}

func (x *PubSubSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubSubscriptions.ProtoReflect.Descriptor instead.
func (*PubSubSubscriptions) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{5}
}

func (x *PubSubSubscriptions) GetChannelsOrPatternsByType() map[uint32]*PubSubChannelsOrPatterns {
	if x != nil {
		return x.ChannelsOrPatternsByType
	}
	return nil
}

// IMPORTANT - if you add fields here, you probably need to add them also in client/mod.rs:`sanitized_request_string`.
type ConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses               []*NodeAddress           `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	TlsMode                 TlsMode                  `protobuf:"varint,2,opt,name=tls_mode,json=tlsMode,proto3,enum=connection_request.TlsMode" json:"tls_mode,omitempty"`
	ClusterModeEnabled      bool                     `protobuf:"varint,3,opt,name=cluster_mode_enabled,json=clusterModeEnabled,proto3" json:"cluster_mode_enabled,omitempty"`
	RequestTimeout          uint32                   `protobuf:"varint,4,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	ReadFrom                ReadFrom                 `protobuf:"varint,5,opt,name=read_from,json=readFrom,proto3,enum=connection_request.ReadFrom" json:"read_from,omitempty"`
	ConnectionRetryStrategy *ConnectionRetryStrategy `protobuf:"bytes,6,opt,name=connection_retry_strategy,json=connectionRetryStrategy,proto3" json:"connection_retry_strategy,omitempty"`
	AuthenticationInfo      *AuthenticationInfo      `protobuf:"bytes,7,opt,name=authentication_info,json=authenticationInfo,proto3" json:"authentication_info,omitempty"`
	DatabaseId              uint32                   `protobuf:"varint,8,opt,name=database_id,json=databaseId,proto3" json:"database_id,omitempty"`
	Protocol                ProtocolVersion          `protobuf:"varint,9,opt,name=protocol,proto3,enum=connection_request.ProtocolVersion" json:"protocol,omitempty"`
	ClientName              string                   `protobuf:"bytes,10,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Types that are assignable to PeriodicChecks:
	//
	//	*ConnectionRequest_PeriodicChecksManualInterval
	//	*ConnectionRequest_PeriodicChecksDisabled
	PeriodicChecks        isConnectionRequest_PeriodicChecks `protobuf_oneof:"periodic_checks"`
	PubsubSubscriptions   *PubSubSubscriptions               `protobuf:"bytes,13,opt,name=pubsub_subscriptions,json=pubsubSubscriptions,proto3" json:"pubsub_subscriptions,omitempty"`
	InflightRequestsLimit uint32                             `protobuf:"varint,14,opt,name=inflight_requests_limit,json=inflightRequestsLimit,proto3" json:"inflight_requests_limit,omitempty"`
	ClientAz              string                             `protobuf:"bytes,15,opt,name=client_az,json=clientAz,proto3" json:"client_az,omitempty"`
	ConnectionTimeout     uint32                             `protobuf:"varint,16,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	LazyConnect           bool                               `protobuf:"varint,17,opt,name=lazy_connect,json=lazyConnect,proto3" json:"lazy_connect,omitempty"`
}

func (x *ConnectionRequest) Reset() {
	*x = ConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRequest) ProtoMessage() {}

func (x *ConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRequest.ProtoReflect.Descriptor instead.
func (*ConnectionRequest) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionRequest) GetAddresses() []*NodeAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ConnectionRequest) GetTlsMode() TlsMode {
	if x != nil {
		return x.TlsMode
	}
	return TlsMode_NoTls
}

func (x *ConnectionRequest) GetClusterModeEnabled() bool {
	if x != nil {
		return x.ClusterModeEnabled
	}
	return false
}

func (x *ConnectionRequest) GetRequestTimeout() uint32 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

func (x *ConnectionRequest) GetReadFrom() ReadFrom {
	if x != nil {
		return x.ReadFrom
	}
	return ReadFrom_Primary
}

func (x *ConnectionRequest) GetConnectionRetryStrategy() *ConnectionRetryStrategy {
	if x != nil {
		return x.ConnectionRetryStrategy
	}
	return nil
}

func (x *ConnectionRequest) GetAuthenticationInfo() *AuthenticationInfo {
	if x != nil {
		return x.AuthenticationInfo
	}
	return nil
}

func (x *ConnectionRequest) GetDatabaseId() uint32 {
	if x != nil {
		return x.DatabaseId
	}
	return 0
}

func (x *ConnectionRequest) GetProtocol() ProtocolVersion {
	if x != nil {
		return x.Protocol
	}
	return ProtocolVersion_RESP3
}

func (x *ConnectionRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (m *ConnectionRequest) GetPeriodicChecks() isConnectionRequest_PeriodicChecks {
	if m != nil {
		return m.PeriodicChecks
	}
	return nil
}

func (x *ConnectionRequest) GetPeriodicChecksManualInterval() *PeriodicChecksManualInterval {
	if x, ok := x.GetPeriodicChecks().(*ConnectionRequest_PeriodicChecksManualInterval); ok {
		return x.PeriodicChecksManualInterval
	}
	return nil
}

func (x *ConnectionRequest) GetPeriodicChecksDisabled() *PeriodicChecksDisabled {
	if x, ok := x.GetPeriodicChecks().(*ConnectionRequest_PeriodicChecksDisabled); ok {
		return x.PeriodicChecksDisabled
	}
	return nil
}

func (x *ConnectionRequest) GetPubsubSubscriptions() *PubSubSubscriptions {
	if x != nil {
		return x.PubsubSubscriptions
	}
	return nil
}

func (x *ConnectionRequest) GetInflightRequestsLimit() uint32 {
	if x != nil {
		return x.InflightRequestsLimit
	}
	return 0
}

func (x *ConnectionRequest) GetClientAz() string {
	if x != nil {
		return x.ClientAz
	}
	return ""
}

func (x *ConnectionRequest) GetConnectionTimeout() uint32 {
	if x != nil {
		return x.ConnectionTimeout
	}
	return 0
}

func (x *ConnectionRequest) GetLazyConnect() bool {
	if x != nil {
		return x.LazyConnect
	}
	return false
}

type isConnectionRequest_PeriodicChecks interface {
	isConnectionRequest_PeriodicChecks()
}

type ConnectionRequest_PeriodicChecksManualInterval struct {
	PeriodicChecksManualInterval *PeriodicChecksManualInterval `protobuf:"bytes,11,opt,name=periodic_checks_manual_interval,json=periodicChecksManualInterval,proto3,oneof"`
}

type ConnectionRequest_PeriodicChecksDisabled struct {
	PeriodicChecksDisabled *PeriodicChecksDisabled `protobuf:"bytes,12,opt,name=periodic_checks_disabled,json=periodicChecksDisabled,proto3,oneof"`
}

func (*ConnectionRequest_PeriodicChecksManualInterval) isConnectionRequest_PeriodicChecks() {}

func (*ConnectionRequest_PeriodicChecksDisabled) isConnectionRequest_PeriodicChecks() {}

type ConnectionRetryStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfRetries uint32  `protobuf:"varint,1,opt,name=number_of_retries,json=numberOfRetries,proto3" json:"number_of_retries,omitempty"`
	Factor          uint32  `protobuf:"varint,2,opt,name=factor,proto3" json:"factor,omitempty"`
	ExponentBase    uint32  `protobuf:"varint,3,opt,name=exponent_base,json=exponentBase,proto3" json:"exponent_base,omitempty"`
	JitterPercent   *uint32 `protobuf:"varint,4,opt,name=jitter_percent,json=jitterPercent,proto3,oneof" json:"jitter_percent,omitempty"`
}

func (x *ConnectionRetryStrategy) Reset() {
	*x = ConnectionRetryStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionRetryStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionRetryStrategy) ProtoMessage() {}

func (x *ConnectionRetryStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_connection_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionRetryStrategy.ProtoReflect.Descriptor instead.
func (*ConnectionRetryStrategy) Descriptor() ([]byte, []int) {
	return file_connection_request_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectionRetryStrategy) GetNumberOfRetries() uint32 {
	if x != nil {
		return x.NumberOfRetries
	}
	return 0
}

func (x *ConnectionRetryStrategy) GetFactor() uint32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *ConnectionRetryStrategy) GetExponentBase() uint32 {
	if x != nil {
		return x.ExponentBase
	}
	return 0
}

func (x *ConnectionRetryStrategy) GetJitterPercent() uint32 {
	if x != nil && x.JitterPercent != nil {
		return *x.JitterPercent
	}
	return 0
}

var File_connection_request_proto protoreflect.FileDescriptor

var file_connection_request_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35,
	0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4c, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x1c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x22, 0x18, 0x0a, 0x16, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x4c, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6f, 0x72,
	0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x1c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x79, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f,
	0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde,
	0x08, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6c, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x67, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x57, 0x0a, 0x13, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a, 0x1f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x1c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x66, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x16, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x14, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x13, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x7a, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x7a, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x7a,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6c, 0x61, 0x7a, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22,
	0xc1, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x2a, 0x6f, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x5a, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x5a, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x10, 0x04, 0x2a, 0x34, 0x0a, 0x07, 0x54, 0x6c, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x54, 0x6c, 0x73, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x10, 0x02, 0x2a, 0x27, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x45, 0x53, 0x50, 0x33, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x50,
	0x32, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78, 0x61, 0x63,
	0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x72, 0x64, 0x65, 0x64, 0x10, 0x02, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connection_request_proto_rawDescOnce sync.Once
	file_connection_request_proto_rawDescData = file_connection_request_proto_rawDesc
)

func file_connection_request_proto_rawDescGZIP() []byte {
	file_connection_request_proto_rawDescOnce.Do(func() {
		file_connection_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_connection_request_proto_rawDescData)
	})
	return file_connection_request_proto_rawDescData
}

var file_connection_request_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_connection_request_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_connection_request_proto_goTypes = []interface{}{
	(ReadFrom)(0),                        // 0: connection_request.ReadFrom
	(TlsMode)(0),                         // 1: connection_request.TlsMode
	(ProtocolVersion)(0),                 // 2: connection_request.ProtocolVersion
	(PubSubChannelType)(0),               // 3: connection_request.PubSubChannelType
	(*NodeAddress)(nil),                  // 4: connection_request.NodeAddress
	(*AuthenticationInfo)(nil),           // 5: connection_request.AuthenticationInfo
	(*PeriodicChecksManualInterval)(nil), // 6: connection_request.PeriodicChecksManualInterval
	(*PeriodicChecksDisabled)(nil),       // 7: connection_request.PeriodicChecksDisabled
	(*PubSubChannelsOrPatterns)(nil),     // 8: connection_request.PubSubChannelsOrPatterns
	(*PubSubSubscriptions)(nil),          // 9: connection_request.PubSubSubscriptions
	(*ConnectionRequest)(nil),            // 10: connection_request.ConnectionRequest
	(*ConnectionRetryStrategy)(nil),      // 11: connection_request.ConnectionRetryStrategy
	nil,                                  // 12: connection_request.PubSubSubscriptions.ChannelsOrPatternsByTypeEntry
}
var file_connection_request_proto_depIdxs = []int32{
	12, // 0: connection_request.PubSubSubscriptions.channels_or_patterns_by_type:type_name -> connection_request.PubSubSubscriptions.ChannelsOrPatternsByTypeEntry
	4,  // 1: connection_request.ConnectionRequest.addresses:type_name -> connection_request.NodeAddress
	1,  // 2: connection_request.ConnectionRequest.tls_mode:type_name -> connection_request.TlsMode
	0,  // 3: connection_request.ConnectionRequest.read_from:type_name -> connection_request.ReadFrom
	11, // 4: connection_request.ConnectionRequest.connection_retry_strategy:type_name -> connection_request.ConnectionRetryStrategy
	5,  // 5: connection_request.ConnectionRequest.authentication_info:type_name -> connection_request.AuthenticationInfo
	2,  // 6: connection_request.ConnectionRequest.protocol:type_name -> connection_request.ProtocolVersion
	6,  // 7: connection_request.ConnectionRequest.periodic_checks_manual_interval:type_name -> connection_request.PeriodicChecksManualInterval
	7,  // 8: connection_request.ConnectionRequest.periodic_checks_disabled:type_name -> connection_request.PeriodicChecksDisabled
	9,  // 9: connection_request.ConnectionRequest.pubsub_subscriptions:type_name -> connection_request.PubSubSubscriptions
	8,  // 10: connection_request.PubSubSubscriptions.ChannelsOrPatternsByTypeEntry.value:type_name -> connection_request.PubSubChannelsOrPatterns
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_connection_request_proto_init() }
func file_connection_request_proto_init() {
	if File_connection_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connection_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicChecksManualInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeriodicChecksDisabled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubChannelsOrPatterns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubSubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionRetryStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connection_request_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ConnectionRequest_PeriodicChecksManualInterval)(nil),
		(*ConnectionRequest_PeriodicChecksDisabled)(nil),
	}
	file_connection_request_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connection_request_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connection_request_proto_goTypes,
		DependencyIndexes: file_connection_request_proto_depIdxs,
		EnumInfos:         file_connection_request_proto_enumTypes,
		MessageInfos:      file_connection_request_proto_msgTypes,
	}.Build()
	File_connection_request_proto = out.File
	file_connection_request_proto_rawDesc = nil
	file_connection_request_proto_goTypes = nil
	file_connection_request_proto_depIdxs = nil
}
