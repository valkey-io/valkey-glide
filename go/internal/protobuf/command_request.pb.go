// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.1
// source: command_request.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleRoutes int32

const (
	SimpleRoutes_AllNodes     SimpleRoutes = 0
	SimpleRoutes_AllPrimaries SimpleRoutes = 1
	SimpleRoutes_Random       SimpleRoutes = 2
)

// Enum value maps for SimpleRoutes.
var (
	SimpleRoutes_name = map[int32]string{
		0: "AllNodes",
		1: "AllPrimaries",
		2: "Random",
	}
	SimpleRoutes_value = map[string]int32{
		"AllNodes":     0,
		"AllPrimaries": 1,
		"Random":       2,
	}
)

func (x SimpleRoutes) Enum() *SimpleRoutes {
	p := new(SimpleRoutes)
	*p = x
	return p
}

func (x SimpleRoutes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimpleRoutes) Descriptor() protoreflect.EnumDescriptor {
	return file_command_request_proto_enumTypes[0].Descriptor()
}

func (SimpleRoutes) Type() protoreflect.EnumType {
	return &file_command_request_proto_enumTypes[0]
}

func (x SimpleRoutes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimpleRoutes.Descriptor instead.
func (SimpleRoutes) EnumDescriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{0}
}

type SlotTypes int32

const (
	SlotTypes_Primary SlotTypes = 0
	SlotTypes_Replica SlotTypes = 1
)

// Enum value maps for SlotTypes.
var (
	SlotTypes_name = map[int32]string{
		0: "Primary",
		1: "Replica",
	}
	SlotTypes_value = map[string]int32{
		"Primary": 0,
		"Replica": 1,
	}
)

func (x SlotTypes) Enum() *SlotTypes {
	p := new(SlotTypes)
	*p = x
	return p
}

func (x SlotTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_command_request_proto_enumTypes[1].Descriptor()
}

func (SlotTypes) Type() protoreflect.EnumType {
	return &file_command_request_proto_enumTypes[1]
}

func (x SlotTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotTypes.Descriptor instead.
func (SlotTypes) EnumDescriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{1}
}

type RequestType int32

const (
	// / Invalid request type
	RequestType_InvalidRequest RequestType = 0
	// / An unknown command, where all arguments are defined by the user.
	RequestType_CustomCommand              RequestType = 1
	RequestType_BitCount                   RequestType = 101
	RequestType_BitField                   RequestType = 102
	RequestType_BitFieldReadOnly           RequestType = 103
	RequestType_BitOp                      RequestType = 104
	RequestType_BitPos                     RequestType = 105
	RequestType_GetBit                     RequestType = 106
	RequestType_SetBit                     RequestType = 107
	RequestType_Asking                     RequestType = 201
	RequestType_ClusterAddSlots            RequestType = 202
	RequestType_ClusterAddSlotsRange       RequestType = 203
	RequestType_ClusterBumpEpoch           RequestType = 204
	RequestType_ClusterCountFailureReports RequestType = 205
	RequestType_ClusterCountKeysInSlot     RequestType = 206
	RequestType_ClusterDelSlots            RequestType = 207
	RequestType_ClusterDelSlotsRange       RequestType = 208
	RequestType_ClusterFailover            RequestType = 209
	RequestType_ClusterFlushSlots          RequestType = 210
	RequestType_ClusterForget              RequestType = 211
	RequestType_ClusterGetKeysInSlot       RequestType = 212
	RequestType_ClusterInfo                RequestType = 213
	RequestType_ClusterKeySlot             RequestType = 214
	RequestType_ClusterLinks               RequestType = 215
	RequestType_ClusterMeet                RequestType = 216
	RequestType_ClusterMyId                RequestType = 217
	RequestType_ClusterMyShardId           RequestType = 218
	RequestType_ClusterNodes               RequestType = 219
	RequestType_ClusterReplicas            RequestType = 220
	RequestType_ClusterReplicate           RequestType = 221
	RequestType_ClusterReset               RequestType = 222
	RequestType_ClusterSaveConfig          RequestType = 223
	RequestType_ClusterSetConfigEpoch      RequestType = 224
	RequestType_ClusterSetslot             RequestType = 225
	RequestType_ClusterShards              RequestType = 226
	RequestType_ClusterSlaves              RequestType = 227
	RequestType_ClusterSlots               RequestType = 228
	RequestType_ReadOnly                   RequestType = 229
	RequestType_ReadWrite                  RequestType = 230
	RequestType_Auth                       RequestType = 301
	RequestType_ClientCaching              RequestType = 302
	RequestType_ClientGetName              RequestType = 303
	RequestType_ClientGetRedir             RequestType = 304
	RequestType_ClientId                   RequestType = 305
	RequestType_ClientInfo                 RequestType = 306
	RequestType_ClientKillSimple           RequestType = 307
	RequestType_ClientKill                 RequestType = 308
	RequestType_ClientList                 RequestType = 309
	RequestType_ClientNoEvict              RequestType = 310
	RequestType_ClientNoTouch              RequestType = 311
	RequestType_ClientPause                RequestType = 312
	RequestType_ClientReply                RequestType = 313
	RequestType_ClientSetInfo              RequestType = 314
	RequestType_ClientSetName              RequestType = 315
	RequestType_ClientTracking             RequestType = 316
	RequestType_ClientTrackingInfo         RequestType = 317
	RequestType_ClientUnblock              RequestType = 318
	RequestType_ClientUnpause              RequestType = 319
	RequestType_Echo                       RequestType = 320
	RequestType_Hello                      RequestType = 321
	RequestType_Ping                       RequestType = 322
	RequestType_Quit                       RequestType = 323 // deprecated in 7.2.0
	RequestType_Reset                      RequestType = 324
	RequestType_Select                     RequestType = 325
	RequestType_Copy                       RequestType = 401
	RequestType_Del                        RequestType = 402
	RequestType_Dump                       RequestType = 403
	RequestType_Exists                     RequestType = 404
	RequestType_Expire                     RequestType = 405
	RequestType_ExpireAt                   RequestType = 406
	RequestType_ExpireTime                 RequestType = 407
	RequestType_Keys                       RequestType = 408
	RequestType_Migrate                    RequestType = 409
	RequestType_Move                       RequestType = 410
	RequestType_ObjectEncoding             RequestType = 411
	RequestType_ObjectFreq                 RequestType = 412
	RequestType_ObjectIdleTime             RequestType = 413
	RequestType_ObjectRefCount             RequestType = 414
	RequestType_Persist                    RequestType = 415
	RequestType_PExpire                    RequestType = 416
	RequestType_PExpireAt                  RequestType = 417
	RequestType_PExpireTime                RequestType = 418
	RequestType_PTTL                       RequestType = 419
	RequestType_RandomKey                  RequestType = 420
	RequestType_Rename                     RequestType = 421
	RequestType_RenameNX                   RequestType = 422
	RequestType_Restore                    RequestType = 423
	RequestType_Scan                       RequestType = 424
	RequestType_Sort                       RequestType = 425
	RequestType_SortReadOnly               RequestType = 426
	RequestType_Touch                      RequestType = 427
	RequestType_TTL                        RequestType = 428
	RequestType_Type                       RequestType = 429
	RequestType_Unlink                     RequestType = 430
	RequestType_Wait                       RequestType = 431
	RequestType_WaitAof                    RequestType = 432
	RequestType_GeoAdd                     RequestType = 501
	RequestType_GeoDist                    RequestType = 502
	RequestType_GeoHash                    RequestType = 503
	RequestType_GeoPos                     RequestType = 504
	RequestType_GeoRadius                  RequestType = 505
	RequestType_GeoRadiusReadOnly          RequestType = 506 // deprecated in 6.2.0
	RequestType_GeoRadiusByMember          RequestType = 507
	RequestType_GeoRadiusByMemberReadOnly  RequestType = 508 // deprecated in 6.2.0
	RequestType_GeoSearch                  RequestType = 509
	RequestType_GeoSearchStore             RequestType = 510
	RequestType_HDel                       RequestType = 601
	RequestType_HExists                    RequestType = 602
	RequestType_HGet                       RequestType = 603
	RequestType_HGetAll                    RequestType = 604
	RequestType_HIncrBy                    RequestType = 605
	RequestType_HIncrByFloat               RequestType = 606
	RequestType_HKeys                      RequestType = 607
	RequestType_HLen                       RequestType = 608
	RequestType_HMGet                      RequestType = 609
	RequestType_HMSet                      RequestType = 610
	RequestType_HRandField                 RequestType = 611
	RequestType_HScan                      RequestType = 612
	RequestType_HSet                       RequestType = 613
	RequestType_HSetNX                     RequestType = 614
	RequestType_HStrlen                    RequestType = 615
	RequestType_HVals                      RequestType = 616
	RequestType_HSetEx                     RequestType = 617
	RequestType_HGetEx                     RequestType = 618
	RequestType_HExpire                    RequestType = 619
	RequestType_HExpireAt                  RequestType = 620
	RequestType_HPExpire                   RequestType = 621
	RequestType_HPExpireAt                 RequestType = 622
	RequestType_HPersist                   RequestType = 623
	RequestType_HTtl                       RequestType = 624
	RequestType_HPTtl                      RequestType = 625
	RequestType_HExpireTime                RequestType = 626
	RequestType_HPExpireTime               RequestType = 627
	RequestType_PfAdd                      RequestType = 701
	RequestType_PfCount                    RequestType = 702
	RequestType_PfMerge                    RequestType = 703
	RequestType_BLMove                     RequestType = 801
	RequestType_BLMPop                     RequestType = 802
	RequestType_BLPop                      RequestType = 803
	RequestType_BRPop                      RequestType = 804
	RequestType_BRPopLPush                 RequestType = 805 // deprecated in 6.2.0
	RequestType_LIndex                     RequestType = 806
	RequestType_LInsert                    RequestType = 807
	RequestType_LLen                       RequestType = 808
	RequestType_LMove                      RequestType = 809
	RequestType_LMPop                      RequestType = 810
	RequestType_LPop                       RequestType = 811
	RequestType_LPos                       RequestType = 812
	RequestType_LPush                      RequestType = 813
	RequestType_LPushX                     RequestType = 814
	RequestType_LRange                     RequestType = 815
	RequestType_LRem                       RequestType = 816
	RequestType_LSet                       RequestType = 817
	RequestType_LTrim                      RequestType = 818
	RequestType_RPop                       RequestType = 819
	RequestType_RPopLPush                  RequestType = 820 // deprecated in 6.2.0
	RequestType_RPush                      RequestType = 821
	RequestType_RPushX                     RequestType = 822
	RequestType_PSubscribe                 RequestType = 901
	RequestType_Publish                    RequestType = 902
	RequestType_PubSubChannels             RequestType = 903
	RequestType_PubSubNumPat               RequestType = 904
	RequestType_PubSubNumSub               RequestType = 905
	RequestType_PubSubShardChannels        RequestType = 906
	RequestType_PubSubShardNumSub          RequestType = 907
	RequestType_PUnsubscribe               RequestType = 908
	RequestType_SPublish                   RequestType = 909
	RequestType_SSubscribe                 RequestType = 910
	RequestType_Subscribe                  RequestType = 911
	RequestType_SUnsubscribe               RequestType = 912
	RequestType_Unsubscribe                RequestType = 913
	RequestType_Eval                       RequestType = 1001
	RequestType_EvalReadOnly               RequestType = 1002
	RequestType_EvalSha                    RequestType = 1003
	RequestType_EvalShaReadOnly            RequestType = 1004
	RequestType_FCall                      RequestType = 1005
	RequestType_FCallReadOnly              RequestType = 1006
	RequestType_FunctionDelete             RequestType = 1007
	RequestType_FunctionDump               RequestType = 1008
	RequestType_FunctionFlush              RequestType = 1009
	RequestType_FunctionKill               RequestType = 1010
	RequestType_FunctionList               RequestType = 1011
	RequestType_FunctionLoad               RequestType = 1012
	RequestType_FunctionRestore            RequestType = 1013
	RequestType_FunctionStats              RequestType = 1014
	RequestType_ScriptDebug                RequestType = 1015
	RequestType_ScriptExists               RequestType = 1016
	RequestType_ScriptFlush                RequestType = 1017
	RequestType_ScriptKill                 RequestType = 1018
	RequestType_ScriptLoad                 RequestType = 1019
	RequestType_ScriptShow                 RequestType = 1020
	RequestType_AclCat                     RequestType = 1101
	RequestType_AclDelUser                 RequestType = 1102
	RequestType_AclDryRun                  RequestType = 1103
	RequestType_AclGenPass                 RequestType = 1104
	RequestType_AclGetUser                 RequestType = 1105
	RequestType_AclList                    RequestType = 1106
	RequestType_AclLoad                    RequestType = 1107
	RequestType_AclLog                     RequestType = 1108
	RequestType_AclSave                    RequestType = 1109
	RequestType_AclSetSser                 RequestType = 1110
	RequestType_AclUsers                   RequestType = 1111
	RequestType_AclWhoami                  RequestType = 1112
	RequestType_BgRewriteAof               RequestType = 1113
	RequestType_BgSave                     RequestType = 1114
	RequestType_Command_                   RequestType = 1115 // Command - renamed to avoid collisions
	RequestType_CommandCount               RequestType = 1116
	RequestType_CommandDocs                RequestType = 1117
	RequestType_CommandGetKeys             RequestType = 1118
	RequestType_CommandGetKeysAndFlags     RequestType = 1119
	RequestType_CommandInfo                RequestType = 1120
	RequestType_CommandList                RequestType = 1121
	RequestType_ConfigGet                  RequestType = 1122
	RequestType_ConfigResetStat            RequestType = 1123
	RequestType_ConfigRewrite              RequestType = 1124
	RequestType_ConfigSet                  RequestType = 1125
	RequestType_DBSize                     RequestType = 1126
	RequestType_FailOver                   RequestType = 1127
	RequestType_FlushAll                   RequestType = 1128
	RequestType_FlushDB                    RequestType = 1129
	RequestType_Info                       RequestType = 1130
	RequestType_LastSave                   RequestType = 1131
	RequestType_LatencyDoctor              RequestType = 1132
	RequestType_LatencyGraph               RequestType = 1133
	RequestType_LatencyHistogram           RequestType = 1134
	RequestType_LatencyHistory             RequestType = 1135
	RequestType_LatencyLatest              RequestType = 1136
	RequestType_LatencyReset               RequestType = 1137
	RequestType_Lolwut                     RequestType = 1138
	RequestType_MemoryDoctor               RequestType = 1139
	RequestType_MemoryMallocStats          RequestType = 1140
	RequestType_MemoryPurge                RequestType = 1141
	RequestType_MemoryStats                RequestType = 1142
	RequestType_MemoryUsage                RequestType = 1143
	RequestType_ModuleList                 RequestType = 1144
	RequestType_ModuleLoad                 RequestType = 1145
	RequestType_ModuleLoadEx               RequestType = 1146
	RequestType_ModuleUnload               RequestType = 1147
	RequestType_Monitor                    RequestType = 1148
	RequestType_PSync                      RequestType = 1149
	RequestType_ReplConf                   RequestType = 1150
	RequestType_ReplicaOf                  RequestType = 1151
	RequestType_RestoreAsking              RequestType = 1152
	RequestType_Role                       RequestType = 1153
	RequestType_Save                       RequestType = 1154
	RequestType_ShutDown                   RequestType = 1155
	RequestType_SlaveOf                    RequestType = 1156
	RequestType_SlowLogGet                 RequestType = 1157
	RequestType_SlowLogLen                 RequestType = 1158
	RequestType_SlowLogReset               RequestType = 1159
	RequestType_SwapDb                     RequestType = 1160
	RequestType_Sync                       RequestType = 1161
	RequestType_Time                       RequestType = 1162
	RequestType_SAdd                       RequestType = 1201
	RequestType_SCard                      RequestType = 1202
	RequestType_SDiff                      RequestType = 1203
	RequestType_SDiffStore                 RequestType = 1204
	RequestType_SInter                     RequestType = 1205
	RequestType_SInterCard                 RequestType = 1206
	RequestType_SInterStore                RequestType = 1207
	RequestType_SIsMember                  RequestType = 1208
	RequestType_SMembers                   RequestType = 1209
	RequestType_SMIsMember                 RequestType = 1210
	RequestType_SMove                      RequestType = 1211
	RequestType_SPop                       RequestType = 1212
	RequestType_SRandMember                RequestType = 1213
	RequestType_SRem                       RequestType = 1214
	RequestType_SScan                      RequestType = 1215
	RequestType_SUnion                     RequestType = 1216
	RequestType_SUnionStore                RequestType = 1217
	RequestType_BZMPop                     RequestType = 1301
	RequestType_BZPopMax                   RequestType = 1302
	RequestType_BZPopMin                   RequestType = 1303
	RequestType_ZAdd                       RequestType = 1304
	RequestType_ZCard                      RequestType = 1305
	RequestType_ZCount                     RequestType = 1306
	RequestType_ZDiff                      RequestType = 1307
	RequestType_ZDiffStore                 RequestType = 1308
	RequestType_ZIncrBy                    RequestType = 1309
	RequestType_ZInter                     RequestType = 1310
	RequestType_ZInterCard                 RequestType = 1311
	RequestType_ZInterStore                RequestType = 1312
	RequestType_ZLexCount                  RequestType = 1313
	RequestType_ZMPop                      RequestType = 1314
	RequestType_ZMScore                    RequestType = 1315
	RequestType_ZPopMax                    RequestType = 1316
	RequestType_ZPopMin                    RequestType = 1317
	RequestType_ZRandMember                RequestType = 1318
	RequestType_ZRange                     RequestType = 1319
	RequestType_ZRangeByLex                RequestType = 1320
	RequestType_ZRangeByScore              RequestType = 1321
	RequestType_ZRangeStore                RequestType = 1322
	RequestType_ZRank                      RequestType = 1323
	RequestType_ZRem                       RequestType = 1324
	RequestType_ZRemRangeByLex             RequestType = 1325
	RequestType_ZRemRangeByRank            RequestType = 1326
	RequestType_ZRemRangeByScore           RequestType = 1327
	RequestType_ZRevRange                  RequestType = 1328
	RequestType_ZRevRangeByLex             RequestType = 1329
	RequestType_ZRevRangeByScore           RequestType = 1330
	RequestType_ZRevRank                   RequestType = 1331
	RequestType_ZScan                      RequestType = 1332
	RequestType_ZScore                     RequestType = 1333
	RequestType_ZUnion                     RequestType = 1334
	RequestType_ZUnionStore                RequestType = 1335
	RequestType_XAck                       RequestType = 1401
	RequestType_XAdd                       RequestType = 1402
	RequestType_XAutoClaim                 RequestType = 1403
	RequestType_XClaim                     RequestType = 1404
	RequestType_XDel                       RequestType = 1405
	RequestType_XGroupCreate               RequestType = 1406
	RequestType_XGroupCreateConsumer       RequestType = 1407
	RequestType_XGroupDelConsumer          RequestType = 1408
	RequestType_XGroupDestroy              RequestType = 1409
	RequestType_XGroupSetId                RequestType = 1410
	RequestType_XInfoConsumers             RequestType = 1411
	RequestType_XInfoGroups                RequestType = 1412
	RequestType_XInfoStream                RequestType = 1413
	RequestType_XLen                       RequestType = 1414
	RequestType_XPending                   RequestType = 1415
	RequestType_XRange                     RequestType = 1416
	RequestType_XRead                      RequestType = 1417
	RequestType_XReadGroup                 RequestType = 1418
	RequestType_XRevRange                  RequestType = 1419
	RequestType_XSetId                     RequestType = 1420
	RequestType_XTrim                      RequestType = 1421
	RequestType_Append                     RequestType = 1501
	RequestType_Decr                       RequestType = 1502
	RequestType_DecrBy                     RequestType = 1503
	RequestType_Get                        RequestType = 1504
	RequestType_GetDel                     RequestType = 1505
	RequestType_GetEx                      RequestType = 1506
	RequestType_GetRange                   RequestType = 1507
	RequestType_GetSet                     RequestType = 1508 // deprecated in 6.2.0
	RequestType_Incr                       RequestType = 1509
	RequestType_IncrBy                     RequestType = 1510
	RequestType_IncrByFloat                RequestType = 1511
	RequestType_LCS                        RequestType = 1512
	RequestType_MGet                       RequestType = 1513
	RequestType_MSet                       RequestType = 1514
	RequestType_MSetNX                     RequestType = 1515
	RequestType_PSetEx                     RequestType = 1516 // deprecated in 2.6.12
	RequestType_Set                        RequestType = 1517
	RequestType_SetEx                      RequestType = 1518 // deprecated in 2.6.12
	RequestType_SetNX                      RequestType = 1519 // deprecated in 2.6.12
	RequestType_SetRange                   RequestType = 1520
	RequestType_Strlen                     RequestType = 1521
	RequestType_Substr                     RequestType = 1522
	RequestType_Discard                    RequestType = 1601
	RequestType_Exec                       RequestType = 1602
	RequestType_Multi                      RequestType = 1603
	RequestType_UnWatch                    RequestType = 1604
	RequestType_Watch                      RequestType = 1605
	RequestType_JsonArrAppend              RequestType = 2001
	RequestType_JsonArrIndex               RequestType = 2002
	RequestType_JsonArrInsert              RequestType = 2003
	RequestType_JsonArrLen                 RequestType = 2004
	RequestType_JsonArrPop                 RequestType = 2005
	RequestType_JsonArrTrim                RequestType = 2006
	RequestType_JsonClear                  RequestType = 2007
	RequestType_JsonDebug                  RequestType = 2008
	RequestType_JsonDel                    RequestType = 2009
	RequestType_JsonForget                 RequestType = 2010
	RequestType_JsonGet                    RequestType = 2011
	RequestType_JsonMGet                   RequestType = 2012
	RequestType_JsonNumIncrBy              RequestType = 2013
	RequestType_JsonNumMultBy              RequestType = 2014
	RequestType_JsonObjKeys                RequestType = 2015
	RequestType_JsonObjLen                 RequestType = 2016
	RequestType_JsonResp                   RequestType = 2017
	RequestType_JsonSet                    RequestType = 2018
	RequestType_JsonStrAppend              RequestType = 2019
	RequestType_JsonStrLen                 RequestType = 2020
	RequestType_JsonToggle                 RequestType = 2021
	RequestType_JsonType                   RequestType = 2022
	RequestType_FtList                     RequestType = 2101
	RequestType_FtAggregate                RequestType = 2102
	RequestType_FtAliasAdd                 RequestType = 2103
	RequestType_FtAliasDel                 RequestType = 2104
	RequestType_FtAliasList                RequestType = 2105
	RequestType_FtAliasUpdate              RequestType = 2106
	RequestType_FtCreate                   RequestType = 2107
	RequestType_FtDropIndex                RequestType = 2108
	RequestType_FtExplain                  RequestType = 2109
	RequestType_FtExplainCli               RequestType = 2110
	RequestType_FtInfo                     RequestType = 2111
	RequestType_FtProfile                  RequestType = 2112
	RequestType_FtSearch                   RequestType = 2113
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0:    "InvalidRequest",
		1:    "CustomCommand",
		101:  "BitCount",
		102:  "BitField",
		103:  "BitFieldReadOnly",
		104:  "BitOp",
		105:  "BitPos",
		106:  "GetBit",
		107:  "SetBit",
		201:  "Asking",
		202:  "ClusterAddSlots",
		203:  "ClusterAddSlotsRange",
		204:  "ClusterBumpEpoch",
		205:  "ClusterCountFailureReports",
		206:  "ClusterCountKeysInSlot",
		207:  "ClusterDelSlots",
		208:  "ClusterDelSlotsRange",
		209:  "ClusterFailover",
		210:  "ClusterFlushSlots",
		211:  "ClusterForget",
		212:  "ClusterGetKeysInSlot",
		213:  "ClusterInfo",
		214:  "ClusterKeySlot",
		215:  "ClusterLinks",
		216:  "ClusterMeet",
		217:  "ClusterMyId",
		218:  "ClusterMyShardId",
		219:  "ClusterNodes",
		220:  "ClusterReplicas",
		221:  "ClusterReplicate",
		222:  "ClusterReset",
		223:  "ClusterSaveConfig",
		224:  "ClusterSetConfigEpoch",
		225:  "ClusterSetslot",
		226:  "ClusterShards",
		227:  "ClusterSlaves",
		228:  "ClusterSlots",
		229:  "ReadOnly",
		230:  "ReadWrite",
		301:  "Auth",
		302:  "ClientCaching",
		303:  "ClientGetName",
		304:  "ClientGetRedir",
		305:  "ClientId",
		306:  "ClientInfo",
		307:  "ClientKillSimple",
		308:  "ClientKill",
		309:  "ClientList",
		310:  "ClientNoEvict",
		311:  "ClientNoTouch",
		312:  "ClientPause",
		313:  "ClientReply",
		314:  "ClientSetInfo",
		315:  "ClientSetName",
		316:  "ClientTracking",
		317:  "ClientTrackingInfo",
		318:  "ClientUnblock",
		319:  "ClientUnpause",
		320:  "Echo",
		321:  "Hello",
		322:  "Ping",
		323:  "Quit",
		324:  "Reset",
		325:  "Select",
		401:  "Copy",
		402:  "Del",
		403:  "Dump",
		404:  "Exists",
		405:  "Expire",
		406:  "ExpireAt",
		407:  "ExpireTime",
		408:  "Keys",
		409:  "Migrate",
		410:  "Move",
		411:  "ObjectEncoding",
		412:  "ObjectFreq",
		413:  "ObjectIdleTime",
		414:  "ObjectRefCount",
		415:  "Persist",
		416:  "PExpire",
		417:  "PExpireAt",
		418:  "PExpireTime",
		419:  "PTTL",
		420:  "RandomKey",
		421:  "Rename",
		422:  "RenameNX",
		423:  "Restore",
		424:  "Scan",
		425:  "Sort",
		426:  "SortReadOnly",
		427:  "Touch",
		428:  "TTL",
		429:  "Type",
		430:  "Unlink",
		431:  "Wait",
		432:  "WaitAof",
		501:  "GeoAdd",
		502:  "GeoDist",
		503:  "GeoHash",
		504:  "GeoPos",
		505:  "GeoRadius",
		506:  "GeoRadiusReadOnly",
		507:  "GeoRadiusByMember",
		508:  "GeoRadiusByMemberReadOnly",
		509:  "GeoSearch",
		510:  "GeoSearchStore",
		601:  "HDel",
		602:  "HExists",
		603:  "HGet",
		604:  "HGetAll",
		605:  "HIncrBy",
		606:  "HIncrByFloat",
		607:  "HKeys",
		608:  "HLen",
		609:  "HMGet",
		610:  "HMSet",
		611:  "HRandField",
		612:  "HScan",
		613:  "HSet",
		614:  "HSetNX",
		615:  "HStrlen",
		616:  "HVals",
		617:  "HSetEx",
		618:  "HGetEx",
		619:  "HExpire",
		620:  "HExpireAt",
		621:  "HPExpire",
		622:  "HPExpireAt",
		623:  "HPersist",
		624:  "HTtl",
		625:  "HPTtl",
		626:  "HExpireTime",
		627:  "HPExpireTime",
		701:  "PfAdd",
		702:  "PfCount",
		703:  "PfMerge",
		801:  "BLMove",
		802:  "BLMPop",
		803:  "BLPop",
		804:  "BRPop",
		805:  "BRPopLPush",
		806:  "LIndex",
		807:  "LInsert",
		808:  "LLen",
		809:  "LMove",
		810:  "LMPop",
		811:  "LPop",
		812:  "LPos",
		813:  "LPush",
		814:  "LPushX",
		815:  "LRange",
		816:  "LRem",
		817:  "LSet",
		818:  "LTrim",
		819:  "RPop",
		820:  "RPopLPush",
		821:  "RPush",
		822:  "RPushX",
		901:  "PSubscribe",
		902:  "Publish",
		903:  "PubSubChannels",
		904:  "PubSubNumPat",
		905:  "PubSubNumSub",
		906:  "PubSubShardChannels",
		907:  "PubSubShardNumSub",
		908:  "PUnsubscribe",
		909:  "SPublish",
		910:  "SSubscribe",
		911:  "Subscribe",
		912:  "SUnsubscribe",
		913:  "Unsubscribe",
		1001: "Eval",
		1002: "EvalReadOnly",
		1003: "EvalSha",
		1004: "EvalShaReadOnly",
		1005: "FCall",
		1006: "FCallReadOnly",
		1007: "FunctionDelete",
		1008: "FunctionDump",
		1009: "FunctionFlush",
		1010: "FunctionKill",
		1011: "FunctionList",
		1012: "FunctionLoad",
		1013: "FunctionRestore",
		1014: "FunctionStats",
		1015: "ScriptDebug",
		1016: "ScriptExists",
		1017: "ScriptFlush",
		1018: "ScriptKill",
		1019: "ScriptLoad",
		1020: "ScriptShow",
		1101: "AclCat",
		1102: "AclDelUser",
		1103: "AclDryRun",
		1104: "AclGenPass",
		1105: "AclGetUser",
		1106: "AclList",
		1107: "AclLoad",
		1108: "AclLog",
		1109: "AclSave",
		1110: "AclSetSser",
		1111: "AclUsers",
		1112: "AclWhoami",
		1113: "BgRewriteAof",
		1114: "BgSave",
		1115: "Command_",
		1116: "CommandCount",
		1117: "CommandDocs",
		1118: "CommandGetKeys",
		1119: "CommandGetKeysAndFlags",
		1120: "CommandInfo",
		1121: "CommandList",
		1122: "ConfigGet",
		1123: "ConfigResetStat",
		1124: "ConfigRewrite",
		1125: "ConfigSet",
		1126: "DBSize",
		1127: "FailOver",
		1128: "FlushAll",
		1129: "FlushDB",
		1130: "Info",
		1131: "LastSave",
		1132: "LatencyDoctor",
		1133: "LatencyGraph",
		1134: "LatencyHistogram",
		1135: "LatencyHistory",
		1136: "LatencyLatest",
		1137: "LatencyReset",
		1138: "Lolwut",
		1139: "MemoryDoctor",
		1140: "MemoryMallocStats",
		1141: "MemoryPurge",
		1142: "MemoryStats",
		1143: "MemoryUsage",
		1144: "ModuleList",
		1145: "ModuleLoad",
		1146: "ModuleLoadEx",
		1147: "ModuleUnload",
		1148: "Monitor",
		1149: "PSync",
		1150: "ReplConf",
		1151: "ReplicaOf",
		1152: "RestoreAsking",
		1153: "Role",
		1154: "Save",
		1155: "ShutDown",
		1156: "SlaveOf",
		1157: "SlowLogGet",
		1158: "SlowLogLen",
		1159: "SlowLogReset",
		1160: "SwapDb",
		1161: "Sync",
		1162: "Time",
		1201: "SAdd",
		1202: "SCard",
		1203: "SDiff",
		1204: "SDiffStore",
		1205: "SInter",
		1206: "SInterCard",
		1207: "SInterStore",
		1208: "SIsMember",
		1209: "SMembers",
		1210: "SMIsMember",
		1211: "SMove",
		1212: "SPop",
		1213: "SRandMember",
		1214: "SRem",
		1215: "SScan",
		1216: "SUnion",
		1217: "SUnionStore",
		1301: "BZMPop",
		1302: "BZPopMax",
		1303: "BZPopMin",
		1304: "ZAdd",
		1305: "ZCard",
		1306: "ZCount",
		1307: "ZDiff",
		1308: "ZDiffStore",
		1309: "ZIncrBy",
		1310: "ZInter",
		1311: "ZInterCard",
		1312: "ZInterStore",
		1313: "ZLexCount",
		1314: "ZMPop",
		1315: "ZMScore",
		1316: "ZPopMax",
		1317: "ZPopMin",
		1318: "ZRandMember",
		1319: "ZRange",
		1320: "ZRangeByLex",
		1321: "ZRangeByScore",
		1322: "ZRangeStore",
		1323: "ZRank",
		1324: "ZRem",
		1325: "ZRemRangeByLex",
		1326: "ZRemRangeByRank",
		1327: "ZRemRangeByScore",
		1328: "ZRevRange",
		1329: "ZRevRangeByLex",
		1330: "ZRevRangeByScore",
		1331: "ZRevRank",
		1332: "ZScan",
		1333: "ZScore",
		1334: "ZUnion",
		1335: "ZUnionStore",
		1401: "XAck",
		1402: "XAdd",
		1403: "XAutoClaim",
		1404: "XClaim",
		1405: "XDel",
		1406: "XGroupCreate",
		1407: "XGroupCreateConsumer",
		1408: "XGroupDelConsumer",
		1409: "XGroupDestroy",
		1410: "XGroupSetId",
		1411: "XInfoConsumers",
		1412: "XInfoGroups",
		1413: "XInfoStream",
		1414: "XLen",
		1415: "XPending",
		1416: "XRange",
		1417: "XRead",
		1418: "XReadGroup",
		1419: "XRevRange",
		1420: "XSetId",
		1421: "XTrim",
		1501: "Append",
		1502: "Decr",
		1503: "DecrBy",
		1504: "Get",
		1505: "GetDel",
		1506: "GetEx",
		1507: "GetRange",
		1508: "GetSet",
		1509: "Incr",
		1510: "IncrBy",
		1511: "IncrByFloat",
		1512: "LCS",
		1513: "MGet",
		1514: "MSet",
		1515: "MSetNX",
		1516: "PSetEx",
		1517: "Set",
		1518: "SetEx",
		1519: "SetNX",
		1520: "SetRange",
		1521: "Strlen",
		1522: "Substr",
		1601: "Discard",
		1602: "Exec",
		1603: "Multi",
		1604: "UnWatch",
		1605: "Watch",
		2001: "JsonArrAppend",
		2002: "JsonArrIndex",
		2003: "JsonArrInsert",
		2004: "JsonArrLen",
		2005: "JsonArrPop",
		2006: "JsonArrTrim",
		2007: "JsonClear",
		2008: "JsonDebug",
		2009: "JsonDel",
		2010: "JsonForget",
		2011: "JsonGet",
		2012: "JsonMGet",
		2013: "JsonNumIncrBy",
		2014: "JsonNumMultBy",
		2015: "JsonObjKeys",
		2016: "JsonObjLen",
		2017: "JsonResp",
		2018: "JsonSet",
		2019: "JsonStrAppend",
		2020: "JsonStrLen",
		2021: "JsonToggle",
		2022: "JsonType",
		2101: "FtList",
		2102: "FtAggregate",
		2103: "FtAliasAdd",
		2104: "FtAliasDel",
		2105: "FtAliasList",
		2106: "FtAliasUpdate",
		2107: "FtCreate",
		2108: "FtDropIndex",
		2109: "FtExplain",
		2110: "FtExplainCli",
		2111: "FtInfo",
		2112: "FtProfile",
		2113: "FtSearch",
	}
	RequestType_value = map[string]int32{
		"InvalidRequest":             0,
		"CustomCommand":              1,
		"BitCount":                   101,
		"BitField":                   102,
		"BitFieldReadOnly":           103,
		"BitOp":                      104,
		"BitPos":                     105,
		"GetBit":                     106,
		"SetBit":                     107,
		"Asking":                     201,
		"ClusterAddSlots":            202,
		"ClusterAddSlotsRange":       203,
		"ClusterBumpEpoch":           204,
		"ClusterCountFailureReports": 205,
		"ClusterCountKeysInSlot":     206,
		"ClusterDelSlots":            207,
		"ClusterDelSlotsRange":       208,
		"ClusterFailover":            209,
		"ClusterFlushSlots":          210,
		"ClusterForget":              211,
		"ClusterGetKeysInSlot":       212,
		"ClusterInfo":                213,
		"ClusterKeySlot":             214,
		"ClusterLinks":               215,
		"ClusterMeet":                216,
		"ClusterMyId":                217,
		"ClusterMyShardId":           218,
		"ClusterNodes":               219,
		"ClusterReplicas":            220,
		"ClusterReplicate":           221,
		"ClusterReset":               222,
		"ClusterSaveConfig":          223,
		"ClusterSetConfigEpoch":      224,
		"ClusterSetslot":             225,
		"ClusterShards":              226,
		"ClusterSlaves":              227,
		"ClusterSlots":               228,
		"ReadOnly":                   229,
		"ReadWrite":                  230,
		"Auth":                       301,
		"ClientCaching":              302,
		"ClientGetName":              303,
		"ClientGetRedir":             304,
		"ClientId":                   305,
		"ClientInfo":                 306,
		"ClientKillSimple":           307,
		"ClientKill":                 308,
		"ClientList":                 309,
		"ClientNoEvict":              310,
		"ClientNoTouch":              311,
		"ClientPause":                312,
		"ClientReply":                313,
		"ClientSetInfo":              314,
		"ClientSetName":              315,
		"ClientTracking":             316,
		"ClientTrackingInfo":         317,
		"ClientUnblock":              318,
		"ClientUnpause":              319,
		"Echo":                       320,
		"Hello":                      321,
		"Ping":                       322,
		"Quit":                       323,
		"Reset":                      324,
		"Select":                     325,
		"Copy":                       401,
		"Del":                        402,
		"Dump":                       403,
		"Exists":                     404,
		"Expire":                     405,
		"ExpireAt":                   406,
		"ExpireTime":                 407,
		"Keys":                       408,
		"Migrate":                    409,
		"Move":                       410,
		"ObjectEncoding":             411,
		"ObjectFreq":                 412,
		"ObjectIdleTime":             413,
		"ObjectRefCount":             414,
		"Persist":                    415,
		"PExpire":                    416,
		"PExpireAt":                  417,
		"PExpireTime":                418,
		"PTTL":                       419,
		"RandomKey":                  420,
		"Rename":                     421,
		"RenameNX":                   422,
		"Restore":                    423,
		"Scan":                       424,
		"Sort":                       425,
		"SortReadOnly":               426,
		"Touch":                      427,
		"TTL":                        428,
		"Type":                       429,
		"Unlink":                     430,
		"Wait":                       431,
		"WaitAof":                    432,
		"GeoAdd":                     501,
		"GeoDist":                    502,
		"GeoHash":                    503,
		"GeoPos":                     504,
		"GeoRadius":                  505,
		"GeoRadiusReadOnly":          506,
		"GeoRadiusByMember":          507,
		"GeoRadiusByMemberReadOnly":  508,
		"GeoSearch":                  509,
		"GeoSearchStore":             510,
		"HDel":                       601,
		"HExists":                    602,
		"HGet":                       603,
		"HGetAll":                    604,
		"HIncrBy":                    605,
		"HIncrByFloat":               606,
		"HKeys":                      607,
		"HLen":                       608,
		"HMGet":                      609,
		"HMSet":                      610,
		"HRandField":                 611,
		"HScan":                      612,
		"HSet":                       613,
		"HSetNX":                     614,
		"HStrlen":                    615,
		"HVals":                      616,
		"HSetEx":                     617,
		"HGetEx":                     618,
		"HExpire":                    619,
		"HExpireAt":                  620,
		"HPExpire":                   621,
		"HPExpireAt":                 622,
		"HPersist":                   623,
		"HTtl":                       624,
		"HPTtl":                      625,
		"HExpireTime":                626,
		"HPExpireTime":               627,
		"PfAdd":                      701,
		"PfCount":                    702,
		"PfMerge":                    703,
		"BLMove":                     801,
		"BLMPop":                     802,
		"BLPop":                      803,
		"BRPop":                      804,
		"BRPopLPush":                 805,
		"LIndex":                     806,
		"LInsert":                    807,
		"LLen":                       808,
		"LMove":                      809,
		"LMPop":                      810,
		"LPop":                       811,
		"LPos":                       812,
		"LPush":                      813,
		"LPushX":                     814,
		"LRange":                     815,
		"LRem":                       816,
		"LSet":                       817,
		"LTrim":                      818,
		"RPop":                       819,
		"RPopLPush":                  820,
		"RPush":                      821,
		"RPushX":                     822,
		"PSubscribe":                 901,
		"Publish":                    902,
		"PubSubChannels":             903,
		"PubSubNumPat":               904,
		"PubSubNumSub":               905,
		"PubSubShardChannels":        906,
		"PubSubShardNumSub":          907,
		"PUnsubscribe":               908,
		"SPublish":                   909,
		"SSubscribe":                 910,
		"Subscribe":                  911,
		"SUnsubscribe":               912,
		"Unsubscribe":                913,
		"Eval":                       1001,
		"EvalReadOnly":               1002,
		"EvalSha":                    1003,
		"EvalShaReadOnly":            1004,
		"FCall":                      1005,
		"FCallReadOnly":              1006,
		"FunctionDelete":             1007,
		"FunctionDump":               1008,
		"FunctionFlush":              1009,
		"FunctionKill":               1010,
		"FunctionList":               1011,
		"FunctionLoad":               1012,
		"FunctionRestore":            1013,
		"FunctionStats":              1014,
		"ScriptDebug":                1015,
		"ScriptExists":               1016,
		"ScriptFlush":                1017,
		"ScriptKill":                 1018,
		"ScriptLoad":                 1019,
		"ScriptShow":                 1020,
		"AclCat":                     1101,
		"AclDelUser":                 1102,
		"AclDryRun":                  1103,
		"AclGenPass":                 1104,
		"AclGetUser":                 1105,
		"AclList":                    1106,
		"AclLoad":                    1107,
		"AclLog":                     1108,
		"AclSave":                    1109,
		"AclSetSser":                 1110,
		"AclUsers":                   1111,
		"AclWhoami":                  1112,
		"BgRewriteAof":               1113,
		"BgSave":                     1114,
		"Command_":                   1115,
		"CommandCount":               1116,
		"CommandDocs":                1117,
		"CommandGetKeys":             1118,
		"CommandGetKeysAndFlags":     1119,
		"CommandInfo":                1120,
		"CommandList":                1121,
		"ConfigGet":                  1122,
		"ConfigResetStat":            1123,
		"ConfigRewrite":              1124,
		"ConfigSet":                  1125,
		"DBSize":                     1126,
		"FailOver":                   1127,
		"FlushAll":                   1128,
		"FlushDB":                    1129,
		"Info":                       1130,
		"LastSave":                   1131,
		"LatencyDoctor":              1132,
		"LatencyGraph":               1133,
		"LatencyHistogram":           1134,
		"LatencyHistory":             1135,
		"LatencyLatest":              1136,
		"LatencyReset":               1137,
		"Lolwut":                     1138,
		"MemoryDoctor":               1139,
		"MemoryMallocStats":          1140,
		"MemoryPurge":                1141,
		"MemoryStats":                1142,
		"MemoryUsage":                1143,
		"ModuleList":                 1144,
		"ModuleLoad":                 1145,
		"ModuleLoadEx":               1146,
		"ModuleUnload":               1147,
		"Monitor":                    1148,
		"PSync":                      1149,
		"ReplConf":                   1150,
		"ReplicaOf":                  1151,
		"RestoreAsking":              1152,
		"Role":                       1153,
		"Save":                       1154,
		"ShutDown":                   1155,
		"SlaveOf":                    1156,
		"SlowLogGet":                 1157,
		"SlowLogLen":                 1158,
		"SlowLogReset":               1159,
		"SwapDb":                     1160,
		"Sync":                       1161,
		"Time":                       1162,
		"SAdd":                       1201,
		"SCard":                      1202,
		"SDiff":                      1203,
		"SDiffStore":                 1204,
		"SInter":                     1205,
		"SInterCard":                 1206,
		"SInterStore":                1207,
		"SIsMember":                  1208,
		"SMembers":                   1209,
		"SMIsMember":                 1210,
		"SMove":                      1211,
		"SPop":                       1212,
		"SRandMember":                1213,
		"SRem":                       1214,
		"SScan":                      1215,
		"SUnion":                     1216,
		"SUnionStore":                1217,
		"BZMPop":                     1301,
		"BZPopMax":                   1302,
		"BZPopMin":                   1303,
		"ZAdd":                       1304,
		"ZCard":                      1305,
		"ZCount":                     1306,
		"ZDiff":                      1307,
		"ZDiffStore":                 1308,
		"ZIncrBy":                    1309,
		"ZInter":                     1310,
		"ZInterCard":                 1311,
		"ZInterStore":                1312,
		"ZLexCount":                  1313,
		"ZMPop":                      1314,
		"ZMScore":                    1315,
		"ZPopMax":                    1316,
		"ZPopMin":                    1317,
		"ZRandMember":                1318,
		"ZRange":                     1319,
		"ZRangeByLex":                1320,
		"ZRangeByScore":              1321,
		"ZRangeStore":                1322,
		"ZRank":                      1323,
		"ZRem":                       1324,
		"ZRemRangeByLex":             1325,
		"ZRemRangeByRank":            1326,
		"ZRemRangeByScore":           1327,
		"ZRevRange":                  1328,
		"ZRevRangeByLex":             1329,
		"ZRevRangeByScore":           1330,
		"ZRevRank":                   1331,
		"ZScan":                      1332,
		"ZScore":                     1333,
		"ZUnion":                     1334,
		"ZUnionStore":                1335,
		"XAck":                       1401,
		"XAdd":                       1402,
		"XAutoClaim":                 1403,
		"XClaim":                     1404,
		"XDel":                       1405,
		"XGroupCreate":               1406,
		"XGroupCreateConsumer":       1407,
		"XGroupDelConsumer":          1408,
		"XGroupDestroy":              1409,
		"XGroupSetId":                1410,
		"XInfoConsumers":             1411,
		"XInfoGroups":                1412,
		"XInfoStream":                1413,
		"XLen":                       1414,
		"XPending":                   1415,
		"XRange":                     1416,
		"XRead":                      1417,
		"XReadGroup":                 1418,
		"XRevRange":                  1419,
		"XSetId":                     1420,
		"XTrim":                      1421,
		"Append":                     1501,
		"Decr":                       1502,
		"DecrBy":                     1503,
		"Get":                        1504,
		"GetDel":                     1505,
		"GetEx":                      1506,
		"GetRange":                   1507,
		"GetSet":                     1508,
		"Incr":                       1509,
		"IncrBy":                     1510,
		"IncrByFloat":                1511,
		"LCS":                        1512,
		"MGet":                       1513,
		"MSet":                       1514,
		"MSetNX":                     1515,
		"PSetEx":                     1516,
		"Set":                        1517,
		"SetEx":                      1518,
		"SetNX":                      1519,
		"SetRange":                   1520,
		"Strlen":                     1521,
		"Substr":                     1522,
		"Discard":                    1601,
		"Exec":                       1602,
		"Multi":                      1603,
		"UnWatch":                    1604,
		"Watch":                      1605,
		"JsonArrAppend":              2001,
		"JsonArrIndex":               2002,
		"JsonArrInsert":              2003,
		"JsonArrLen":                 2004,
		"JsonArrPop":                 2005,
		"JsonArrTrim":                2006,
		"JsonClear":                  2007,
		"JsonDebug":                  2008,
		"JsonDel":                    2009,
		"JsonForget":                 2010,
		"JsonGet":                    2011,
		"JsonMGet":                   2012,
		"JsonNumIncrBy":              2013,
		"JsonNumMultBy":              2014,
		"JsonObjKeys":                2015,
		"JsonObjLen":                 2016,
		"JsonResp":                   2017,
		"JsonSet":                    2018,
		"JsonStrAppend":              2019,
		"JsonStrLen":                 2020,
		"JsonToggle":                 2021,
		"JsonType":                   2022,
		"FtList":                     2101,
		"FtAggregate":                2102,
		"FtAliasAdd":                 2103,
		"FtAliasDel":                 2104,
		"FtAliasList":                2105,
		"FtAliasUpdate":              2106,
		"FtCreate":                   2107,
		"FtDropIndex":                2108,
		"FtExplain":                  2109,
		"FtExplainCli":               2110,
		"FtInfo":                     2111,
		"FtProfile":                  2112,
		"FtSearch":                   2113,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_command_request_proto_enumTypes[2].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_command_request_proto_enumTypes[2]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{2}
}

type SlotIdRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotType SlotTypes `protobuf:"varint,1,opt,name=slot_type,json=slotType,proto3,enum=command_request.SlotTypes" json:"slot_type,omitempty"`
	SlotId   int32     `protobuf:"varint,2,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"`
}

func (x *SlotIdRoute) Reset() {
	*x = SlotIdRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotIdRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotIdRoute) ProtoMessage() {}

func (x *SlotIdRoute) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotIdRoute.ProtoReflect.Descriptor instead.
func (*SlotIdRoute) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{0}
}

func (x *SlotIdRoute) GetSlotType() SlotTypes {
	if x != nil {
		return x.SlotType
	}
	return SlotTypes_Primary
}

func (x *SlotIdRoute) GetSlotId() int32 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

type SlotKeyRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotType SlotTypes `protobuf:"varint,1,opt,name=slot_type,json=slotType,proto3,enum=command_request.SlotTypes" json:"slot_type,omitempty"`
	SlotKey  string    `protobuf:"bytes,2,opt,name=slot_key,json=slotKey,proto3" json:"slot_key,omitempty"`
}

func (x *SlotKeyRoute) Reset() {
	*x = SlotKeyRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotKeyRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotKeyRoute) ProtoMessage() {}

func (x *SlotKeyRoute) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotKeyRoute.ProtoReflect.Descriptor instead.
func (*SlotKeyRoute) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{1}
}

func (x *SlotKeyRoute) GetSlotType() SlotTypes {
	if x != nil {
		return x.SlotType
	}
	return SlotTypes_Primary
}

func (x *SlotKeyRoute) GetSlotKey() string {
	if x != nil {
		return x.SlotKey
	}
	return ""
}

type ByAddressRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ByAddressRoute) Reset() {
	*x = ByAddressRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByAddressRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByAddressRoute) ProtoMessage() {}

func (x *ByAddressRoute) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByAddressRoute.ProtoReflect.Descriptor instead.
func (*ByAddressRoute) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{2}
}

func (x *ByAddressRoute) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ByAddressRoute) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Routes_SimpleRoutes
	//	*Routes_SlotKeyRoute
	//	*Routes_SlotIdRoute
	//	*Routes_ByAddressRoute
	Value isRoutes_Value `protobuf_oneof:"value"`
}

func (x *Routes) Reset() {
	*x = Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routes) ProtoMessage() {}

func (x *Routes) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routes.ProtoReflect.Descriptor instead.
func (*Routes) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{3}
}

func (m *Routes) GetValue() isRoutes_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Routes) GetSimpleRoutes() SimpleRoutes {
	if x, ok := x.GetValue().(*Routes_SimpleRoutes); ok {
		return x.SimpleRoutes
	}
	return SimpleRoutes_AllNodes
}

func (x *Routes) GetSlotKeyRoute() *SlotKeyRoute {
	if x, ok := x.GetValue().(*Routes_SlotKeyRoute); ok {
		return x.SlotKeyRoute
	}
	return nil
}

func (x *Routes) GetSlotIdRoute() *SlotIdRoute {
	if x, ok := x.GetValue().(*Routes_SlotIdRoute); ok {
		return x.SlotIdRoute
	}
	return nil
}

func (x *Routes) GetByAddressRoute() *ByAddressRoute {
	if x, ok := x.GetValue().(*Routes_ByAddressRoute); ok {
		return x.ByAddressRoute
	}
	return nil
}

type isRoutes_Value interface {
	isRoutes_Value()
}

type Routes_SimpleRoutes struct {
	SimpleRoutes SimpleRoutes `protobuf:"varint,1,opt,name=simple_routes,json=simpleRoutes,proto3,enum=command_request.SimpleRoutes,oneof"`
}

type Routes_SlotKeyRoute struct {
	SlotKeyRoute *SlotKeyRoute `protobuf:"bytes,2,opt,name=slot_key_route,json=slotKeyRoute,proto3,oneof"`
}

type Routes_SlotIdRoute struct {
	SlotIdRoute *SlotIdRoute `protobuf:"bytes,3,opt,name=slot_id_route,json=slotIdRoute,proto3,oneof"`
}

type Routes_ByAddressRoute struct {
	ByAddressRoute *ByAddressRoute `protobuf:"bytes,4,opt,name=by_address_route,json=byAddressRoute,proto3,oneof"`
}

func (*Routes_SimpleRoutes) isRoutes_Value() {}

func (*Routes_SlotKeyRoute) isRoutes_Value() {}

func (*Routes_SlotIdRoute) isRoutes_Value() {}

func (*Routes_ByAddressRoute) isRoutes_Value() {}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=command_request.RequestType" json:"request_type,omitempty"`
	// Types that are assignable to Args:
	//
	//	*Command_ArgsArray_
	//	*Command_ArgsVecPointer
	Args isCommand_Args `protobuf_oneof:"args"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{4}
}

func (x *Command) GetRequestType() RequestType {
	if x != nil {
		return x.RequestType
	}
	return RequestType_InvalidRequest
}

func (m *Command) GetArgs() isCommand_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *Command) GetArgsArray() *Command_ArgsArray {
	if x, ok := x.GetArgs().(*Command_ArgsArray_); ok {
		return x.ArgsArray
	}
	return nil
}

func (x *Command) GetArgsVecPointer() uint64 {
	if x, ok := x.GetArgs().(*Command_ArgsVecPointer); ok {
		return x.ArgsVecPointer
	}
	return 0
}

type isCommand_Args interface {
	isCommand_Args()
}

type Command_ArgsArray_ struct {
	ArgsArray *Command_ArgsArray `protobuf:"bytes,2,opt,name=args_array,json=argsArray,proto3,oneof"`
}

type Command_ArgsVecPointer struct {
	ArgsVecPointer uint64 `protobuf:"varint,3,opt,name=args_vec_pointer,json=argsVecPointer,proto3,oneof"`
}

func (*Command_ArgsArray_) isCommand_Args() {}

func (*Command_ArgsVecPointer) isCommand_Args() {}

// Used for script requests with large keys or args vectors
type ScriptInvocationPointers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        string  `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	KeysPointer *uint64 `protobuf:"varint,2,opt,name=keys_pointer,json=keysPointer,proto3,oneof" json:"keys_pointer,omitempty"`
	ArgsPointer *uint64 `protobuf:"varint,3,opt,name=args_pointer,json=argsPointer,proto3,oneof" json:"args_pointer,omitempty"`
}

func (x *ScriptInvocationPointers) Reset() {
	*x = ScriptInvocationPointers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptInvocationPointers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptInvocationPointers) ProtoMessage() {}

func (x *ScriptInvocationPointers) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptInvocationPointers.ProtoReflect.Descriptor instead.
func (*ScriptInvocationPointers) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{5}
}

func (x *ScriptInvocationPointers) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ScriptInvocationPointers) GetKeysPointer() uint64 {
	if x != nil && x.KeysPointer != nil {
		return *x.KeysPointer
	}
	return 0
}

func (x *ScriptInvocationPointers) GetArgsPointer() uint64 {
	if x != nil && x.ArgsPointer != nil {
		return *x.ArgsPointer
	}
	return 0
}

type ScriptInvocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Keys [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Args [][]byte `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ScriptInvocation) Reset() {
	*x = ScriptInvocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptInvocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptInvocation) ProtoMessage() {}

func (x *ScriptInvocation) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptInvocation.ProtoReflect.Descriptor instead.
func (*ScriptInvocation) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{6}
}

func (x *ScriptInvocation) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ScriptInvocation) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ScriptInvocation) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAtomic             bool       `protobuf:"varint,1,opt,name=is_atomic,json=isAtomic,proto3" json:"is_atomic,omitempty"`
	Commands             []*Command `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	RaiseOnError         *bool      `protobuf:"varint,3,opt,name=raise_on_error,json=raiseOnError,proto3,oneof" json:"raise_on_error,omitempty"`
	Timeout              *uint32    `protobuf:"varint,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	RetryServerError     *bool      `protobuf:"varint,5,opt,name=retry_server_error,json=retryServerError,proto3,oneof" json:"retry_server_error,omitempty"`
	RetryConnectionError *bool      `protobuf:"varint,6,opt,name=retry_connection_error,json=retryConnectionError,proto3,oneof" json:"retry_connection_error,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{7}
}

func (x *Batch) GetIsAtomic() bool {
	if x != nil {
		return x.IsAtomic
	}
	return false
}

func (x *Batch) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Batch) GetRaiseOnError() bool {
	if x != nil && x.RaiseOnError != nil {
		return *x.RaiseOnError
	}
	return false
}

func (x *Batch) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *Batch) GetRetryServerError() bool {
	if x != nil && x.RetryServerError != nil {
		return *x.RetryServerError
	}
	return false
}

func (x *Batch) GetRetryConnectionError() bool {
	if x != nil && x.RetryConnectionError != nil {
		return *x.RetryConnectionError
	}
	return false
}

type ClusterScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor               string  `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	MatchPattern         []byte  `protobuf:"bytes,2,opt,name=match_pattern,json=matchPattern,proto3,oneof" json:"match_pattern,omitempty"`
	Count                *int64  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	ObjectType           *string `protobuf:"bytes,4,opt,name=object_type,json=objectType,proto3,oneof" json:"object_type,omitempty"`
	AllowNonCoveredSlots bool    `protobuf:"varint,5,opt,name=allow_non_covered_slots,json=allowNonCoveredSlots,proto3" json:"allow_non_covered_slots,omitempty"`
}

func (x *ClusterScan) Reset() {
	*x = ClusterScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterScan) ProtoMessage() {}

func (x *ClusterScan) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterScan.ProtoReflect.Descriptor instead.
func (*ClusterScan) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterScan) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ClusterScan) GetMatchPattern() []byte {
	if x != nil {
		return x.MatchPattern
	}
	return nil
}

func (x *ClusterScan) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ClusterScan) GetObjectType() string {
	if x != nil && x.ObjectType != nil {
		return *x.ObjectType
	}
	return ""
}

func (x *ClusterScan) GetAllowNonCoveredSlots() bool {
	if x != nil {
		return x.AllowNonCoveredSlots
	}
	return false
}

type UpdateConnectionPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password      *string `protobuf:"bytes,1,opt,name=password,proto3,oneof" json:"password,omitempty"`
	ImmediateAuth bool    `protobuf:"varint,2,opt,name=immediate_auth,json=immediateAuth,proto3" json:"immediate_auth,omitempty"`
}

func (x *UpdateConnectionPassword) Reset() {
	*x = UpdateConnectionPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionPassword) ProtoMessage() {}

func (x *UpdateConnectionPassword) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionPassword.ProtoReflect.Descriptor instead.
func (*UpdateConnectionPassword) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateConnectionPassword) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UpdateConnectionPassword) GetImmediateAuth() bool {
	if x != nil {
		return x.ImmediateAuth
	}
	return false
}

type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallbackIdx uint32 `protobuf:"varint,1,opt,name=callback_idx,json=callbackIdx,proto3" json:"callback_idx,omitempty"`
	// Types that are assignable to Command:
	//
	//	*CommandRequest_SingleCommand
	//	*CommandRequest_Batch
	//	*CommandRequest_ScriptInvocation
	//	*CommandRequest_ScriptInvocationPointers
	//	*CommandRequest_ClusterScan
	//	*CommandRequest_UpdateConnectionPassword
	Command     isCommandRequest_Command `protobuf_oneof:"command"`
	Route       *Routes                  `protobuf:"bytes,8,opt,name=route,proto3" json:"route,omitempty"`
	RootSpanPtr *uint64                  `protobuf:"varint,9,opt,name=root_span_ptr,json=rootSpanPtr,proto3,oneof" json:"root_span_ptr,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{10}
}

func (x *CommandRequest) GetCallbackIdx() uint32 {
	if x != nil {
		return x.CallbackIdx
	}
	return 0
}

func (m *CommandRequest) GetCommand() isCommandRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *CommandRequest) GetSingleCommand() *Command {
	if x, ok := x.GetCommand().(*CommandRequest_SingleCommand); ok {
		return x.SingleCommand
	}
	return nil
}

func (x *CommandRequest) GetBatch() *Batch {
	if x, ok := x.GetCommand().(*CommandRequest_Batch); ok {
		return x.Batch
	}
	return nil
}

func (x *CommandRequest) GetScriptInvocation() *ScriptInvocation {
	if x, ok := x.GetCommand().(*CommandRequest_ScriptInvocation); ok {
		return x.ScriptInvocation
	}
	return nil
}

func (x *CommandRequest) GetScriptInvocationPointers() *ScriptInvocationPointers {
	if x, ok := x.GetCommand().(*CommandRequest_ScriptInvocationPointers); ok {
		return x.ScriptInvocationPointers
	}
	return nil
}

func (x *CommandRequest) GetClusterScan() *ClusterScan {
	if x, ok := x.GetCommand().(*CommandRequest_ClusterScan); ok {
		return x.ClusterScan
	}
	return nil
}

func (x *CommandRequest) GetUpdateConnectionPassword() *UpdateConnectionPassword {
	if x, ok := x.GetCommand().(*CommandRequest_UpdateConnectionPassword); ok {
		return x.UpdateConnectionPassword
	}
	return nil
}

func (x *CommandRequest) GetRoute() *Routes {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *CommandRequest) GetRootSpanPtr() uint64 {
	if x != nil && x.RootSpanPtr != nil {
		return *x.RootSpanPtr
	}
	return 0
}

type isCommandRequest_Command interface {
	isCommandRequest_Command()
}

type CommandRequest_SingleCommand struct {
	SingleCommand *Command `protobuf:"bytes,2,opt,name=single_command,json=singleCommand,proto3,oneof"`
}

type CommandRequest_Batch struct {
	Batch *Batch `protobuf:"bytes,3,opt,name=batch,proto3,oneof"`
}

type CommandRequest_ScriptInvocation struct {
	ScriptInvocation *ScriptInvocation `protobuf:"bytes,4,opt,name=script_invocation,json=scriptInvocation,proto3,oneof"`
}

type CommandRequest_ScriptInvocationPointers struct {
	ScriptInvocationPointers *ScriptInvocationPointers `protobuf:"bytes,5,opt,name=script_invocation_pointers,json=scriptInvocationPointers,proto3,oneof"`
}

type CommandRequest_ClusterScan struct {
	ClusterScan *ClusterScan `protobuf:"bytes,6,opt,name=cluster_scan,json=clusterScan,proto3,oneof"`
}

type CommandRequest_UpdateConnectionPassword struct {
	UpdateConnectionPassword *UpdateConnectionPassword `protobuf:"bytes,7,opt,name=update_connection_password,json=updateConnectionPassword,proto3,oneof"`
}

func (*CommandRequest_SingleCommand) isCommandRequest_Command() {}

func (*CommandRequest_Batch) isCommandRequest_Command() {}

func (*CommandRequest_ScriptInvocation) isCommandRequest_Command() {}

func (*CommandRequest_ScriptInvocationPointers) isCommandRequest_Command() {}

func (*CommandRequest_ClusterScan) isCommandRequest_Command() {}

func (*CommandRequest_UpdateConnectionPassword) isCommandRequest_Command() {}

type Command_ArgsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args [][]byte `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Command_ArgsArray) Reset() {
	*x = Command_ArgsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_command_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command_ArgsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command_ArgsArray) ProtoMessage() {}

func (x *Command_ArgsArray) ProtoReflect() protoreflect.Message {
	mi := &file_command_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command_ArgsArray.ProtoReflect.Descriptor instead.
func (*Command_ArgsArray) Descriptor() ([]byte, []int) {
	return file_command_request_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Command_ArgsArray) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_command_request_proto protoreflect.FileDescriptor

var file_command_request_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x0b, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x0c, 0x53, 0x6c, 0x6f,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x38, 0x0a,
	0x0e, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x62, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x76, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x72, 0x67, 0x73, 0x56, 0x65, 0x63,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x1f, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0xa0, 0x01, 0x0a, 0x18, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x01, 0x52, 0x0b, 0x61, 0x72, 0x67, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x0e, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x69, 0x73,
	0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x10, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x16, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x14, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf3, 0x01, 0x0a, 0x0b, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x17,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x6f, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x86, 0x05, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x78, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1a, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x18, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x69, 0x0a, 0x1a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x18, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x70, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x72, 0x6f,
	0x6f, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x50, 0x74, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x70, 0x74, 0x72, 0x2a, 0x3a, 0x0a, 0x0c, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x6c, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x10, 0x02, 0x2a, 0x25, 0x0a, 0x09, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x10, 0x01, 0x2a, 0xea, 0x30, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x66, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x10, 0x67, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x10, 0x68,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x10, 0x69, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x42, 0x69, 0x74, 0x10, 0x6a, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x42,
	0x69, 0x74, 0x10, 0x6b, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xc9,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x10, 0xca, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0xcb, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75, 0x6d,
	0x70, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x10, 0xcc, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x10, 0xcd, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x10, 0xce, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x10, 0xcf, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xd0, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x10, 0xd1, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x10, 0xd2, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x10, 0xd3, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x49, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x10, 0xd4, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x10, 0xd5, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x10, 0xd6, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x10, 0xd7, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x65, 0x74, 0x10, 0xd8,
	0x01, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x79, 0x49, 0x64,
	0x10, 0xd9, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x10, 0xda, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x10, 0xdb, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x10, 0xdc, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0xdd, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0xde, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x10, 0xdf, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x10, 0xe0,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x6c, 0x6f, 0x74, 0x10, 0xe1, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x10, 0xe2, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x10, 0xe3, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x10, 0xe4,
	0x01, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0xe5, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0xe6, 0x01,
	0x12, 0x09, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x10, 0xad, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0xae, 0x02, 0x12,
	0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x10, 0xaf, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x10, 0xb0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x10, 0xb1, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xb2, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0xb3, 0x02, 0x12,
	0x0f, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x10, 0xb4, 0x02,
	0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xb5,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x10, 0xb6, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x10, 0xb7, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x10, 0xb8, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0xb9, 0x02, 0x12, 0x12, 0x0a,
	0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xba,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x10, 0xbb, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0xbc, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x10, 0xbd, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x10, 0xbe, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x10, 0xbf, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x45,
	0x63, 0x68, 0x6f, 0x10, 0xc0, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x10,
	0xc1, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x10, 0xc2, 0x02, 0x12, 0x09, 0x0a,
	0x04, 0x51, 0x75, 0x69, 0x74, 0x10, 0xc3, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x10, 0xc4, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0xc5,
	0x02, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x10, 0x91, 0x03, 0x12, 0x08, 0x0a, 0x03,
	0x44, 0x65, 0x6c, 0x10, 0x92, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x75, 0x6d, 0x70, 0x10, 0x93,
	0x03, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x94, 0x03, 0x12, 0x0b,
	0x0a, 0x06, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x10, 0x95, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x10, 0x96, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x97, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x4b,
	0x65, 0x79, 0x73, 0x10, 0x98, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x10, 0x99, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x10, 0x9a, 0x03, 0x12,
	0x13, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x9b, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x72,
	0x65, 0x71, 0x10, 0x9c, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x9d, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x9e, 0x03, 0x12,
	0x0c, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x10, 0x9f, 0x03, 0x12, 0x0c, 0x0a,
	0x07, 0x50, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x10, 0xa0, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x50,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x10, 0xa1, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x50,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0xa2, 0x03, 0x12, 0x09, 0x0a,
	0x04, 0x50, 0x54, 0x54, 0x4c, 0x10, 0xa3, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x10, 0xa4, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x10, 0xa5, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4e,
	0x58, 0x10, 0xa6, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10,
	0xa7, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x10, 0xa8, 0x03, 0x12, 0x09, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x10, 0xa9, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0xaa, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x54,
	0x6f, 0x75, 0x63, 0x68, 0x10, 0xab, 0x03, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x54, 0x4c, 0x10, 0xac,
	0x03, 0x12, 0x09, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x10, 0xad, 0x03, 0x12, 0x0b, 0x0a, 0x06,
	0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0xae, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x57, 0x61, 0x69,
	0x74, 0x10, 0xaf, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x57, 0x61, 0x69, 0x74, 0x41, 0x6f, 0x66, 0x10,
	0xb0, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x65, 0x6f, 0x41, 0x64, 0x64, 0x10, 0xf5, 0x03, 0x12,
	0x0c, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x44, 0x69, 0x73, 0x74, 0x10, 0xf6, 0x03, 0x12, 0x0c, 0x0a,
	0x07, 0x47, 0x65, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x10, 0xf7, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x47,
	0x65, 0x6f, 0x50, 0x6f, 0x73, 0x10, 0xf8, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x10, 0xf9, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x65, 0x6f, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0xfa, 0x03,
	0x12, 0x16, 0x0a, 0x11, 0x47, 0x65, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0xfb, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x65, 0x6f, 0x52,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0xfc, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0xfd, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xfe, 0x03, 0x12, 0x09, 0x0a,
	0x04, 0x48, 0x44, 0x65, 0x6c, 0x10, 0xd9, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x48, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x10, 0xda, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x48, 0x47, 0x65, 0x74, 0x10, 0xdb,
	0x04, 0x12, 0x0c, 0x0a, 0x07, 0x48, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x10, 0xdc, 0x04, 0x12,
	0x0c, 0x0a, 0x07, 0x48, 0x49, 0x6e, 0x63, 0x72, 0x42, 0x79, 0x10, 0xdd, 0x04, 0x12, 0x11, 0x0a,
	0x0c, 0x48, 0x49, 0x6e, 0x63, 0x72, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0xde, 0x04,
	0x12, 0x0a, 0x0a, 0x05, 0x48, 0x4b, 0x65, 0x79, 0x73, 0x10, 0xdf, 0x04, 0x12, 0x09, 0x0a, 0x04,
	0x48, 0x4c, 0x65, 0x6e, 0x10, 0xe0, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x48, 0x4d, 0x47, 0x65, 0x74,
	0x10, 0xe1, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x48, 0x4d, 0x53, 0x65, 0x74, 0x10, 0xe2, 0x04, 0x12,
	0x0f, 0x0a, 0x0a, 0x48, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0xe3, 0x04,
	0x12, 0x0a, 0x0a, 0x05, 0x48, 0x53, 0x63, 0x61, 0x6e, 0x10, 0xe4, 0x04, 0x12, 0x09, 0x0a, 0x04,
	0x48, 0x53, 0x65, 0x74, 0x10, 0xe5, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x53, 0x65, 0x74, 0x4e,
	0x58, 0x10, 0xe6, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x48, 0x53, 0x74, 0x72, 0x6c, 0x65, 0x6e, 0x10,
	0xe7, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x48, 0x56, 0x61, 0x6c, 0x73, 0x10, 0xe8, 0x04, 0x12, 0x0b,
	0x0a, 0x06, 0x48, 0x53, 0x65, 0x74, 0x45, 0x78, 0x10, 0xe9, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x48,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x10, 0xea, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x48, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x10, 0xeb, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x48, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x41, 0x74, 0x10, 0xec, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x48, 0x50, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x10, 0xed, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x48, 0x50, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x41, 0x74, 0x10, 0xee, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x48, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x10, 0xef, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x48, 0x54, 0x74, 0x6c, 0x10, 0xf0, 0x04,
	0x12, 0x0a, 0x0a, 0x05, 0x48, 0x50, 0x54, 0x74, 0x6c, 0x10, 0xf1, 0x04, 0x12, 0x10, 0x0a, 0x0b,
	0x48, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0xf2, 0x04, 0x12, 0x11,
	0x0a, 0x0c, 0x48, 0x50, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0xf3,
	0x04, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x66, 0x41, 0x64, 0x64, 0x10, 0xbd, 0x05, 0x12, 0x0c, 0x0a,
	0x07, 0x50, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xbe, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x50,
	0x66, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0xbf, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x4c, 0x4d,
	0x6f, 0x76, 0x65, 0x10, 0xa1, 0x06, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x4c, 0x4d, 0x50, 0x6f, 0x70,
	0x10, 0xa2, 0x06, 0x12, 0x0a, 0x0a, 0x05, 0x42, 0x4c, 0x50, 0x6f, 0x70, 0x10, 0xa3, 0x06, 0x12,
	0x0a, 0x0a, 0x05, 0x42, 0x52, 0x50, 0x6f, 0x70, 0x10, 0xa4, 0x06, 0x12, 0x0f, 0x0a, 0x0a, 0x42,
	0x52, 0x50, 0x6f, 0x70, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x10, 0xa5, 0x06, 0x12, 0x0b, 0x0a, 0x06,
	0x4c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xa6, 0x06, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x10, 0xa7, 0x06, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x4c, 0x65, 0x6e, 0x10,
	0xa8, 0x06, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x4d, 0x6f, 0x76, 0x65, 0x10, 0xa9, 0x06, 0x12, 0x0a,
	0x0a, 0x05, 0x4c, 0x4d, 0x50, 0x6f, 0x70, 0x10, 0xaa, 0x06, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x50,
	0x6f, 0x70, 0x10, 0xab, 0x06, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x50, 0x6f, 0x73, 0x10, 0xac, 0x06,
	0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x50, 0x75, 0x73, 0x68, 0x10, 0xad, 0x06, 0x12, 0x0b, 0x0a, 0x06,
	0x4c, 0x50, 0x75, 0x73, 0x68, 0x58, 0x10, 0xae, 0x06, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x10, 0xaf, 0x06, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x52, 0x65, 0x6d, 0x10, 0xb0,
	0x06, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x53, 0x65, 0x74, 0x10, 0xb1, 0x06, 0x12, 0x0a, 0x0a, 0x05,
	0x4c, 0x54, 0x72, 0x69, 0x6d, 0x10, 0xb2, 0x06, 0x12, 0x09, 0x0a, 0x04, 0x52, 0x50, 0x6f, 0x70,
	0x10, 0xb3, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x50, 0x6f, 0x70, 0x4c, 0x50, 0x75, 0x73, 0x68,
	0x10, 0xb4, 0x06, 0x12, 0x0a, 0x0a, 0x05, 0x52, 0x50, 0x75, 0x73, 0x68, 0x10, 0xb5, 0x06, 0x12,
	0x0b, 0x0a, 0x06, 0x52, 0x50, 0x75, 0x73, 0x68, 0x58, 0x10, 0xb6, 0x06, 0x12, 0x0f, 0x0a, 0x0a,
	0x50, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x85, 0x07, 0x12, 0x0c, 0x0a,
	0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x86, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0x87, 0x07,
	0x12, 0x11, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4e, 0x75, 0x6d, 0x50, 0x61, 0x74,
	0x10, 0x88, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4e, 0x75, 0x6d,
	0x53, 0x75, 0x62, 0x10, 0x89, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x10, 0x8a, 0x07,
	0x12, 0x16, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e,
	0x75, 0x6d, 0x53, 0x75, 0x62, 0x10, 0x8b, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x8c, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x53,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x10, 0x8d, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x8e, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x8f, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x53,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x90, 0x07, 0x12, 0x10,
	0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x91, 0x07,
	0x12, 0x09, 0x0a, 0x04, 0x45, 0x76, 0x61, 0x6c, 0x10, 0xe9, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0xea, 0x07, 0x12, 0x0c,
	0x0a, 0x07, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x10, 0xeb, 0x07, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x76, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0xec, 0x07, 0x12, 0x0a, 0x0a, 0x05, 0x46, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0xed, 0x07, 0x12, 0x12,
	0x0a, 0x0d, 0x46, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0xee, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0xef, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x10, 0xf0, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0xf1, 0x07, 0x12, 0x11,
	0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x10, 0xf2,
	0x07, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x10, 0xf3, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x61, 0x64, 0x10, 0xf4, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xf5, 0x07, 0x12, 0x12, 0x0a,
	0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xf6,
	0x07, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x10, 0xf7, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x10, 0xf8, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0xf9, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x10, 0xfa, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0xfb, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x10, 0xfc, 0x07, 0x12, 0x0b, 0x0a, 0x06, 0x41,
	0x63, 0x6c, 0x43, 0x61, 0x74, 0x10, 0xcd, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x44,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x10, 0xce, 0x08, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x63, 0x6c,
	0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x10, 0xcf, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x63, 0x6c,
	0x47, 0x65, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x10, 0xd0, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x63,
	0x6c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0xd1, 0x08, 0x12, 0x0c, 0x0a, 0x07, 0x41,
	0x63, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xd2, 0x08, 0x12, 0x0c, 0x0a, 0x07, 0x41, 0x63, 0x6c,
	0x4c, 0x6f, 0x61, 0x64, 0x10, 0xd3, 0x08, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4c, 0x6f,
	0x67, 0x10, 0xd4, 0x08, 0x12, 0x0c, 0x0a, 0x07, 0x41, 0x63, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x10,
	0xd5, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x73, 0x65, 0x72,
	0x10, 0xd6, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x41, 0x63, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10,
	0xd7, 0x08, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x63, 0x6c, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x10,
	0xd8, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x42, 0x67, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x6f, 0x66, 0x10, 0xd9, 0x08, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x67, 0x53, 0x61, 0x76, 0x65, 0x10,
	0xda, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x10, 0xdb,
	0x08, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0xdc, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44,
	0x6f, 0x63, 0x73, 0x10, 0xdd, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x10, 0xde, 0x08, 0x12, 0x1b, 0x0a, 0x16, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x6e, 0x64,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x10, 0xdf, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xe0, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xe1, 0x08, 0x12, 0x0e, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x10, 0xe2, 0x08, 0x12, 0x14, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x10,
	0xe3, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x10, 0xe4, 0x08, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x10, 0xe5, 0x08, 0x12, 0x0b, 0x0a, 0x06, 0x44, 0x42, 0x53, 0x69, 0x7a, 0x65,
	0x10, 0xe6, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x10,
	0xe7, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x10, 0xe8,
	0x08, 0x12, 0x0c, 0x0a, 0x07, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x42, 0x10, 0xe9, 0x08, 0x12,
	0x09, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xea, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x10, 0xeb, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x10, 0xec, 0x08, 0x12, 0x11, 0x0a,
	0x0c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x10, 0xed, 0x08,
	0x12, 0x15, 0x0a, 0x10, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x10, 0xee, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0xef, 0x08, 0x12, 0x12, 0x0a, 0x0d,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x10, 0xf0, 0x08,
	0x12, 0x11, 0x0a, 0x0c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x10, 0xf1, 0x08, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x6f, 0x6c, 0x77, 0x75, 0x74, 0x10, 0xf2, 0x08,
	0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x10, 0xf3, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xf4, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x75, 0x72, 0x67, 0x65, 0x10, 0xf5, 0x08, 0x12, 0x10, 0x0a,
	0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x10, 0xf6, 0x08, 0x12,
	0x10, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x10, 0xf7,
	0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0xf8, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x10, 0xf9, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x45, 0x78, 0x10, 0xfa, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0xfb, 0x08, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x10, 0xfc, 0x08, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x53, 0x79, 0x6e, 0x63,
	0x10, 0xfd, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x10,
	0xfe, 0x08, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4f, 0x66, 0x10,
	0xff, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x6b,
	0x69, 0x6e, 0x67, 0x10, 0x80, 0x09, 0x12, 0x09, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x81,
	0x09, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x61, 0x76, 0x65, 0x10, 0x82, 0x09, 0x12, 0x0d, 0x0a, 0x08,
	0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x83, 0x09, 0x12, 0x0c, 0x0a, 0x07, 0x53,
	0x6c, 0x61, 0x76, 0x65, 0x4f, 0x66, 0x10, 0x84, 0x09, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x67, 0x47, 0x65, 0x74, 0x10, 0x85, 0x09, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x6c,
	0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x6e, 0x10, 0x86, 0x09, 0x12, 0x11, 0x0a, 0x0c, 0x53,
	0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x65, 0x74, 0x10, 0x87, 0x09, 0x12, 0x0b,
	0x0a, 0x06, 0x53, 0x77, 0x61, 0x70, 0x44, 0x62, 0x10, 0x88, 0x09, 0x12, 0x09, 0x0a, 0x04, 0x53,
	0x79, 0x6e, 0x63, 0x10, 0x89, 0x09, 0x12, 0x09, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x8a,
	0x09, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x41, 0x64, 0x64, 0x10, 0xb1, 0x09, 0x12, 0x0a, 0x0a, 0x05,
	0x53, 0x43, 0x61, 0x72, 0x64, 0x10, 0xb2, 0x09, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x44, 0x69, 0x66,
	0x66, 0x10, 0xb3, 0x09, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0xb4, 0x09, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0xb5, 0x09, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x10, 0xb6, 0x09, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x10, 0xb7, 0x09, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0xb8, 0x09, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x10, 0xb9, 0x09, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x4d, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0xba, 0x09, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x4d, 0x6f, 0x76, 0x65, 0x10, 0xbb,
	0x09, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x50, 0x6f, 0x70, 0x10, 0xbc, 0x09, 0x12, 0x10, 0x0a, 0x0b,
	0x53, 0x52, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0xbd, 0x09, 0x12, 0x09,
	0x0a, 0x04, 0x53, 0x52, 0x65, 0x6d, 0x10, 0xbe, 0x09, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x53, 0x63,
	0x61, 0x6e, 0x10, 0xbf, 0x09, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x10,
	0xc0, 0x09, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x10, 0xc1, 0x09, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x5a, 0x4d, 0x50, 0x6f, 0x70, 0x10, 0x95,
	0x0a, 0x12, 0x0d, 0x0a, 0x08, 0x42, 0x5a, 0x50, 0x6f, 0x70, 0x4d, 0x61, 0x78, 0x10, 0x96, 0x0a,
	0x12, 0x0d, 0x0a, 0x08, 0x42, 0x5a, 0x50, 0x6f, 0x70, 0x4d, 0x69, 0x6e, 0x10, 0x97, 0x0a, 0x12,
	0x09, 0x0a, 0x04, 0x5a, 0x41, 0x64, 0x64, 0x10, 0x98, 0x0a, 0x12, 0x0a, 0x0a, 0x05, 0x5a, 0x43,
	0x61, 0x72, 0x64, 0x10, 0x99, 0x0a, 0x12, 0x0b, 0x0a, 0x06, 0x5a, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x9a, 0x0a, 0x12, 0x0a, 0x0a, 0x05, 0x5a, 0x44, 0x69, 0x66, 0x66, 0x10, 0x9b, 0x0a, 0x12,
	0x0f, 0x0a, 0x0a, 0x5a, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x9c, 0x0a,
	0x12, 0x0c, 0x0a, 0x07, 0x5a, 0x49, 0x6e, 0x63, 0x72, 0x42, 0x79, 0x10, 0x9d, 0x0a, 0x12, 0x0b,
	0x0a, 0x06, 0x5a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x9e, 0x0a, 0x12, 0x0f, 0x0a, 0x0a, 0x5a,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x10, 0x9f, 0x0a, 0x12, 0x10, 0x0a, 0x0b,
	0x5a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xa0, 0x0a, 0x12, 0x0e,
	0x0a, 0x09, 0x5a, 0x4c, 0x65, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xa1, 0x0a, 0x12, 0x0a,
	0x0a, 0x05, 0x5a, 0x4d, 0x50, 0x6f, 0x70, 0x10, 0xa2, 0x0a, 0x12, 0x0c, 0x0a, 0x07, 0x5a, 0x4d,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0xa3, 0x0a, 0x12, 0x0c, 0x0a, 0x07, 0x5a, 0x50, 0x6f, 0x70,
	0x4d, 0x61, 0x78, 0x10, 0xa4, 0x0a, 0x12, 0x0c, 0x0a, 0x07, 0x5a, 0x50, 0x6f, 0x70, 0x4d, 0x69,
	0x6e, 0x10, 0xa5, 0x0a, 0x12, 0x10, 0x0a, 0x0b, 0x5a, 0x52, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x10, 0xa6, 0x0a, 0x12, 0x0b, 0x0a, 0x06, 0x5a, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x10, 0xa7, 0x0a, 0x12, 0x10, 0x0a, 0x0b, 0x5a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x4c,
	0x65, 0x78, 0x10, 0xa8, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x5a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0xa9, 0x0a, 0x12, 0x10, 0x0a, 0x0b, 0x5a, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0xaa, 0x0a, 0x12, 0x0a, 0x0a, 0x05, 0x5a,
	0x52, 0x61, 0x6e, 0x6b, 0x10, 0xab, 0x0a, 0x12, 0x09, 0x0a, 0x04, 0x5a, 0x52, 0x65, 0x6d, 0x10,
	0xac, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x5a, 0x52, 0x65, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x79, 0x4c, 0x65, 0x78, 0x10, 0xad, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x5a, 0x52, 0x65, 0x6d, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0xae, 0x0a, 0x12, 0x15, 0x0a,
	0x10, 0x5a, 0x52, 0x65, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x10, 0xaf, 0x0a, 0x12, 0x0e, 0x0a, 0x09, 0x5a, 0x52, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x10, 0xb0, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x5a, 0x52, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x79, 0x4c, 0x65, 0x78, 0x10, 0xb1, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x5a, 0x52, 0x65,
	0x76, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0xb2, 0x0a,
	0x12, 0x0d, 0x0a, 0x08, 0x5a, 0x52, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x6b, 0x10, 0xb3, 0x0a, 0x12,
	0x0a, 0x0a, 0x05, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x10, 0xb4, 0x0a, 0x12, 0x0b, 0x0a, 0x06, 0x5a,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0xb5, 0x0a, 0x12, 0x0b, 0x0a, 0x06, 0x5a, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x10, 0xb6, 0x0a, 0x12, 0x10, 0x0a, 0x0b, 0x5a, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x10, 0xb7, 0x0a, 0x12, 0x09, 0x0a, 0x04, 0x58, 0x41, 0x63, 0x6b, 0x10,
	0xf9, 0x0a, 0x12, 0x09, 0x0a, 0x04, 0x58, 0x41, 0x64, 0x64, 0x10, 0xfa, 0x0a, 0x12, 0x0f, 0x0a,
	0x0a, 0x58, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x10, 0xfb, 0x0a, 0x12, 0x0b,
	0x0a, 0x06, 0x58, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x10, 0xfc, 0x0a, 0x12, 0x09, 0x0a, 0x04, 0x58,
	0x44, 0x65, 0x6c, 0x10, 0xfd, 0x0a, 0x12, 0x11, 0x0a, 0x0c, 0x58, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0xfe, 0x0a, 0x12, 0x19, 0x0a, 0x14, 0x58, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x10, 0xff, 0x0a, 0x12, 0x16, 0x0a, 0x11, 0x58, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x10, 0x80, 0x0b, 0x12, 0x12, 0x0a, 0x0d,
	0x58, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x10, 0x81, 0x0b,
	0x12, 0x10, 0x0a, 0x0b, 0x58, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x49, 0x64, 0x10,
	0x82, 0x0b, 0x12, 0x13, 0x0a, 0x0e, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x73, 0x10, 0x83, 0x0b, 0x12, 0x10, 0x0a, 0x0b, 0x58, 0x49, 0x6e, 0x66, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x10, 0x84, 0x0b, 0x12, 0x10, 0x0a, 0x0b, 0x58, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x85, 0x0b, 0x12, 0x09, 0x0a, 0x04, 0x58,
	0x4c, 0x65, 0x6e, 0x10, 0x86, 0x0b, 0x12, 0x0d, 0x0a, 0x08, 0x58, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x87, 0x0b, 0x12, 0x0b, 0x0a, 0x06, 0x58, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x88, 0x0b, 0x12, 0x0a, 0x0a, 0x05, 0x58, 0x52, 0x65, 0x61, 0x64, 0x10, 0x89, 0x0b, 0x12, 0x0f,
	0x0a, 0x0a, 0x58, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x8a, 0x0b, 0x12,
	0x0e, 0x0a, 0x09, 0x58, 0x52, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x8b, 0x0b, 0x12,
	0x0b, 0x0a, 0x06, 0x58, 0x53, 0x65, 0x74, 0x49, 0x64, 0x10, 0x8c, 0x0b, 0x12, 0x0a, 0x0a, 0x05,
	0x58, 0x54, 0x72, 0x69, 0x6d, 0x10, 0x8d, 0x0b, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x10, 0xdd, 0x0b, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x65, 0x63, 0x72, 0x10, 0xde, 0x0b,
	0x12, 0x0b, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x72, 0x42, 0x79, 0x10, 0xdf, 0x0b, 0x12, 0x08, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x10, 0xe0, 0x0b, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x10, 0xe1, 0x0b, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x45, 0x78, 0x10, 0xe2, 0x0b,
	0x12, 0x0d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xe3, 0x0b, 0x12,
	0x0b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x10, 0xe4, 0x0b, 0x12, 0x09, 0x0a, 0x04,
	0x49, 0x6e, 0x63, 0x72, 0x10, 0xe5, 0x0b, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x6e, 0x63, 0x72, 0x42,
	0x79, 0x10, 0xe6, 0x0b, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x72, 0x42, 0x79, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x10, 0xe7, 0x0b, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x43, 0x53, 0x10, 0xe8, 0x0b,
	0x12, 0x09, 0x0a, 0x04, 0x4d, 0x47, 0x65, 0x74, 0x10, 0xe9, 0x0b, 0x12, 0x09, 0x0a, 0x04, 0x4d,
	0x53, 0x65, 0x74, 0x10, 0xea, 0x0b, 0x12, 0x0b, 0x0a, 0x06, 0x4d, 0x53, 0x65, 0x74, 0x4e, 0x58,
	0x10, 0xeb, 0x0b, 0x12, 0x0b, 0x0a, 0x06, 0x50, 0x53, 0x65, 0x74, 0x45, 0x78, 0x10, 0xec, 0x0b,
	0x12, 0x08, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x10, 0xed, 0x0b, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x65,
	0x74, 0x45, 0x78, 0x10, 0xee, 0x0b, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x65, 0x74, 0x4e, 0x58, 0x10,
	0xef, 0x0b, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xf0,
	0x0b, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x6c, 0x65, 0x6e, 0x10, 0xf1, 0x0b, 0x12, 0x0b,
	0x0a, 0x06, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x10, 0xf2, 0x0b, 0x12, 0x0c, 0x0a, 0x07, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x10, 0xc1, 0x0c, 0x12, 0x09, 0x0a, 0x04, 0x45, 0x78, 0x65,
	0x63, 0x10, 0xc2, 0x0c, 0x12, 0x0a, 0x0a, 0x05, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x10, 0xc3, 0x0c,
	0x12, 0x0c, 0x0a, 0x07, 0x55, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x10, 0xc4, 0x0c, 0x12, 0x0a,
	0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x10, 0xc5, 0x0c, 0x12, 0x12, 0x0a, 0x0d, 0x4a, 0x73,
	0x6f, 0x6e, 0x41, 0x72, 0x72, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0xd1, 0x0f, 0x12, 0x11,
	0x0a, 0x0c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xd2,
	0x0f, 0x12, 0x12, 0x0a, 0x0d, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x10, 0xd3, 0x0f, 0x12, 0x0f, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72,
	0x4c, 0x65, 0x6e, 0x10, 0xd4, 0x0f, 0x12, 0x0f, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72,
	0x72, 0x50, 0x6f, 0x70, 0x10, 0xd5, 0x0f, 0x12, 0x10, 0x0a, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x41,
	0x72, 0x72, 0x54, 0x72, 0x69, 0x6d, 0x10, 0xd6, 0x0f, 0x12, 0x0e, 0x0a, 0x09, 0x4a, 0x73, 0x6f,
	0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x10, 0xd7, 0x0f, 0x12, 0x0e, 0x0a, 0x09, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x10, 0xd8, 0x0f, 0x12, 0x0c, 0x0a, 0x07, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x10, 0xd9, 0x0f, 0x12, 0x0f, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x74, 0x10, 0xda, 0x0f, 0x12, 0x0c, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x10, 0xdb, 0x0f, 0x12, 0x0d, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x47,
	0x65, 0x74, 0x10, 0xdc, 0x0f, 0x12, 0x12, 0x0a, 0x0d, 0x4a, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x49, 0x6e, 0x63, 0x72, 0x42, 0x79, 0x10, 0xdd, 0x0f, 0x12, 0x12, 0x0a, 0x0d, 0x4a, 0x73, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x10, 0xde, 0x0f, 0x12, 0x10, 0x0a,
	0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x4b, 0x65, 0x79, 0x73, 0x10, 0xdf, 0x0f, 0x12,
	0x0f, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x4c, 0x65, 0x6e, 0x10, 0xe0, 0x0f,
	0x12, 0x0d, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x10, 0xe1, 0x0f, 0x12,
	0x0c, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x10, 0xe2, 0x0f, 0x12, 0x12, 0x0a,
	0x0d, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x10, 0xe3,
	0x0f, 0x12, 0x0f, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x10,
	0xe4, 0x0f, 0x12, 0x0f, 0x0a, 0x0a, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x10, 0xe5, 0x0f, 0x12, 0x0d, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xe6, 0x0f, 0x12, 0x0b, 0x0a, 0x06, 0x46, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xb5, 0x10, 0x12,
	0x10, 0x0a, 0x0b, 0x46, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x10, 0xb6,
	0x10, 0x12, 0x0f, 0x0a, 0x0a, 0x46, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x41, 0x64, 0x64, 0x10,
	0xb7, 0x10, 0x12, 0x0f, 0x0a, 0x0a, 0x46, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x44, 0x65, 0x6c,
	0x10, 0xb8, 0x10, 0x12, 0x10, 0x0a, 0x0b, 0x46, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0xb9, 0x10, 0x12, 0x12, 0x0a, 0x0d, 0x46, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0xba, 0x10, 0x12, 0x0d, 0x0a, 0x08, 0x46, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0xbb, 0x10, 0x12, 0x10, 0x0a, 0x0b, 0x46, 0x74, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xbc, 0x10, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x74,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x10, 0xbd, 0x10, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x74,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x10, 0xbe, 0x10, 0x12, 0x0b, 0x0a,
	0x06, 0x46, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xbf, 0x10, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0xc0, 0x10, 0x12, 0x0d, 0x0a, 0x08, 0x46, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0xc1, 0x10, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_command_request_proto_rawDescOnce sync.Once
	file_command_request_proto_rawDescData = file_command_request_proto_rawDesc
)

func file_command_request_proto_rawDescGZIP() []byte {
	file_command_request_proto_rawDescOnce.Do(func() {
		file_command_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_command_request_proto_rawDescData)
	})
	return file_command_request_proto_rawDescData
}

var file_command_request_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_command_request_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_command_request_proto_goTypes = []interface{}{
	(SimpleRoutes)(0),                // 0: command_request.SimpleRoutes
	(SlotTypes)(0),                   // 1: command_request.SlotTypes
	(RequestType)(0),                 // 2: command_request.RequestType
	(*SlotIdRoute)(nil),              // 3: command_request.SlotIdRoute
	(*SlotKeyRoute)(nil),             // 4: command_request.SlotKeyRoute
	(*ByAddressRoute)(nil),           // 5: command_request.ByAddressRoute
	(*Routes)(nil),                   // 6: command_request.Routes
	(*Command)(nil),                  // 7: command_request.Command
	(*ScriptInvocationPointers)(nil), // 8: command_request.ScriptInvocationPointers
	(*ScriptInvocation)(nil),         // 9: command_request.ScriptInvocation
	(*Batch)(nil),                    // 10: command_request.Batch
	(*ClusterScan)(nil),              // 11: command_request.ClusterScan
	(*UpdateConnectionPassword)(nil), // 12: command_request.UpdateConnectionPassword
	(*CommandRequest)(nil),           // 13: command_request.CommandRequest
	(*Command_ArgsArray)(nil),        // 14: command_request.Command.ArgsArray
}
var file_command_request_proto_depIdxs = []int32{
	1,  // 0: command_request.SlotIdRoute.slot_type:type_name -> command_request.SlotTypes
	1,  // 1: command_request.SlotKeyRoute.slot_type:type_name -> command_request.SlotTypes
	0,  // 2: command_request.Routes.simple_routes:type_name -> command_request.SimpleRoutes
	4,  // 3: command_request.Routes.slot_key_route:type_name -> command_request.SlotKeyRoute
	3,  // 4: command_request.Routes.slot_id_route:type_name -> command_request.SlotIdRoute
	5,  // 5: command_request.Routes.by_address_route:type_name -> command_request.ByAddressRoute
	2,  // 6: command_request.Command.request_type:type_name -> command_request.RequestType
	14, // 7: command_request.Command.args_array:type_name -> command_request.Command.ArgsArray
	7,  // 8: command_request.Batch.commands:type_name -> command_request.Command
	7,  // 9: command_request.CommandRequest.single_command:type_name -> command_request.Command
	10, // 10: command_request.CommandRequest.batch:type_name -> command_request.Batch
	9,  // 11: command_request.CommandRequest.script_invocation:type_name -> command_request.ScriptInvocation
	8,  // 12: command_request.CommandRequest.script_invocation_pointers:type_name -> command_request.ScriptInvocationPointers
	11, // 13: command_request.CommandRequest.cluster_scan:type_name -> command_request.ClusterScan
	12, // 14: command_request.CommandRequest.update_connection_password:type_name -> command_request.UpdateConnectionPassword
	6,  // 15: command_request.CommandRequest.route:type_name -> command_request.Routes
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_command_request_proto_init() }
func file_command_request_proto_init() {
	if File_command_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_command_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotIdRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotKeyRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByAddressRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptInvocationPointers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptInvocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_command_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command_ArgsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_command_request_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Routes_SimpleRoutes)(nil),
		(*Routes_SlotKeyRoute)(nil),
		(*Routes_SlotIdRoute)(nil),
		(*Routes_ByAddressRoute)(nil),
	}
	file_command_request_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Command_ArgsArray_)(nil),
		(*Command_ArgsVecPointer)(nil),
	}
	file_command_request_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_command_request_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_command_request_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_command_request_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_command_request_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CommandRequest_SingleCommand)(nil),
		(*CommandRequest_Batch)(nil),
		(*CommandRequest_ScriptInvocation)(nil),
		(*CommandRequest_ScriptInvocationPointers)(nil),
		(*CommandRequest_ClusterScan)(nil),
		(*CommandRequest_UpdateConnectionPassword)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_command_request_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_command_request_proto_goTypes,
		DependencyIndexes: file_command_request_proto_depIdxs,
		EnumInfos:         file_command_request_proto_enumTypes,
		MessageInfos:      file_command_request_proto_msgTypes,
	}.Build()
	File_command_request_proto = out.File
	file_command_request_proto_rawDesc = nil
	file_command_request_proto_goTypes = nil
	file_command_request_proto_depIdxs = nil
}
