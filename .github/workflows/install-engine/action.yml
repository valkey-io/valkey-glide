name: Install Engine

inputs:
    engine-version:
        description: "Engine version to install"
        required: true
        type: string
    target:
        description: "Specified target toolchain, ex. x86_64-unknown-linux-gnu"
        type: string
        required: true
        options:
            - x86_64-unknown-linux-gnu
            - aarch64-unknown-linux-gnu
            - x86_64-apple-darwin
            - aarch64-apple-darwin
            - aarch64-unknown-linux-musl
            - x86_64-unknown-linux-musl

env:
    CARGO_TERM_COLOR: always

runs:
    using: "composite"

    steps:
        - name: "Setup Environment Variables"
          shell: bash
          env:
              ENGINE_VERSION: ${{ inputs.engine-version }}
          run: |
              echo "ENGINE_VERSION=$ENGINE_VERSION" >> $GITHUB_ENV

        - name: Prepare Valkey sources
          shell: bash
          run: |
              echo "Cloning and checking out Valkey $ENGINE_VERSION"
              if [[ -d valkey ]]; then
                  echo "Removing existing valkey directory..."
                  rm -fR valkey
              fi
              git clone https://github.com/valkey-io/valkey.git
              cd valkey/src
              git checkout $ENGINE_VERSION
              SOURCES_VERSION=`grep ' VALKEY_VERSION ' version.h | grep -o -E '[0-9]+\.[0-9]\.[0-9]'` || :
              if [[ -z $SOURCES_VERSION ]]; then
                  SOURCES_VERSION=`grep ' REDIS_VERSION ' version.h | grep -o -E '[0-9]+\.[0-9]\.[0-9]'`
              fi
              echo "SOURCES_VERSION=$SOURCES_VERSION" >> $GITHUB_ENV

        - uses: actions/cache@v4
          id: cache-valkey
          with:
              path: |
                  valkey/src/valkey-server
                  valkey/src/valkey-cli
              key: valkey-${{ env.SOURCES_VERSION }}-${{ inputs.target }}

        # Manual install, because makefile target rebuilds everything, we want to avoid that
        - name: Install cached engine
          if: ${{ steps.cache-valkey.outputs.cache-hit == 'true' }}
          shell: bash
          run: |
              cd valkey/src
              if command -v sudo &> /dev/null
              then
                  echo "sudo command exists"
                  SUDO=sudo
              fi
              $SUDO cp valkey-server valkey-cli redis-server redis-cli /usr/local/bin/ 2>/dev/null || :
              if [[ ! -e /usr/local/bin/redis-server ]]; then
                  $SUDO cp valkey-server /usr/local/bin/redis-server
              fi
              echo 'export PATH=/usr/local/bin:$PATH' >>~/.bash_profile

        - name: Build and install engine
          if: ${{ steps.cache-valkey.outputs.cache-hit != 'true' }}
          shell: bash
          run: |
              cd valkey
              make BUILD_TLS=yes
              if command -v sudo &> /dev/null
              then
                  echo "sudo command exists"
                  sudo make install
              else
                  echo "sudo command does not exist"
                  make install
              fi
              echo 'export PATH=/usr/local/bin:$PATH' >>~/.bash_profile

        # TODO: This seems redundant to me. Is it necessary? Do we check that the Python we install is the correct version?
        # Why here and not elsewhere? All Git git repos were created equal
        - name: Verify Valkey installation and symlinks
          if: ${{ !contains(inputs.engine-version, '-rc') }}
          shell: bash
          run: |
              # In Valkey releases, the engine is built with symlinks from valkey-server and valkey-cli
              # to redis-server and redis-cli. This step ensures that the engine is properly installed
              # with the expected version and that Valkey symlinks are correctly created.
              INSTALLED_VER=$(redis-server -v) || INSTALLED_VER=$(valkey-server -v)
              if [[ $INSTALLED_VER != *"${ENGINE_VERSION}"* ]]; then
                  echo "Wrong version has been installed. Expected: $ENGINE_VERSION, Installed: $INSTALLED_VER"
                  exit 1
              else
                  echo "Successfully installed the server: $INSTALLED_VER"
              fi
