name: Install Rust tool chain and protoc

inputs:
    target:
        description: "Specified target for rust toolchain, ex. x86_64-apple-darwin"
        type: string
        required: false
        default: "x86_64-unknown-linux-gnu"
        options:
            - x86_64-unknown-linux-gnu
            - aarch64-unknown-linux-gnu
            - x86_64-apple-darwin
            - aarch64-apple-darwin
            - x86_64-pc-windows-msvc
    github-token:
        description: "GitHub token"
        type: string
        required: true

runs:
    using: "composite"
    steps:
        - name: Install Rust toolchain (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          env:
              RUST_TARGET: ${{ inputs.target }}
          run: |
              Write-Host "Installing Rust on Windows..."

              # Download and install rustup
              Invoke-WebRequest -Uri "https://win.rustup.rs/x86_64" -OutFile "$env:TEMP\rustup-init.exe"
              & "$env:TEMP\rustup-init.exe" -y --default-toolchain stable --target "$env:RUST_TARGET"

              # Add to PATH for current session and persist for future steps
              $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
              echo "$env:USERPROFILE\.cargo\bin" >> $env:GITHUB_PATH

              # Install components
              rustup component add rustfmt clippy

              # Verify installation
              rustc --version
              cargo --version

        - name: Setup MSVC environment (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              Write-Host "Setting up MSVC environment for Rust..."

              # Find Visual Studio installation
              $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              if (Test-Path $vsWhere) {
                  $vsPath = & $vsWhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                  if ($vsPath) {
                      Write-Host "Found Visual Studio at: $vsPath"
                      
                      # Setup MSVC environment
                      $vcvarsPath = "$vsPath\VC\Auxiliary\Build\vcvars64.bat"
                      if (Test-Path $vcvarsPath) {
                          Write-Host "Setting up MSVC environment..."
                          
                          # Run vcvars64.bat and capture environment variables
                          $tempBat = "$env:TEMP\setup_msvc.bat"
                          @"
              @echo off
              call "$vcvarsPath"
              echo VCINSTALLDIR=%VCINSTALLDIR%
              echo WindowsSdkDir=%WindowsSdkDir%
              echo PATH=%PATH%
              echo LIB=%LIB%
              echo LIBPATH=%LIBPATH%
              echo INCLUDE=%INCLUDE%
              "@ | Out-File -FilePath $tempBat -Encoding ASCII
                          
                          $output = & cmd /c $tempBat
                          foreach ($line in $output) {
                              if ($line -match "^(\w+)=(.*)$") {
                                  $name = $matches[1]
                                  $value = $matches[2]
                                  [Environment]::SetEnvironmentVariable($name, $value, "Process")
                                  echo "$name=$value" >> $env:GITHUB_ENV
                              }
                          }
                          
                          Remove-Item $tempBat -Force
                          Write-Host "MSVC environment configured"
                      } else {
                          Write-Host "Warning: vcvars64.bat not found at $vcvarsPath"
                      }
                  } else {
                      Write-Host "Warning: Visual Studio with C++ tools not found"
                  }
              } else {
                  Write-Host "Warning: vswhere.exe not found"
              }

              # Verify link.exe is available
              if (Get-Command link.exe -ErrorAction SilentlyContinue) {
                  Write-Host "link.exe is available"
              } else {
                  Write-Host "Warning: link.exe not found in PATH"
              }

        - name: Install Rust toolchain (Linux/macOS)
          if: runner.os != 'Windows'
          uses: dtolnay/rust-toolchain@stable
          with:
              targets: ${{ inputs.target }}
              components: rustfmt, clippy

        - name: Install protoc (Linux/macOS)
          if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
          uses: arduino/setup-protoc@v3
          with:
              repo-token: ${{ inputs.github-token }}

        - name: Install protoc (Windows)
          if: ${{ runner.os == 'Windows' }}
          shell: powershell
          env:
              GITHUB_TOKEN: ${{ inputs.github-token }}
          run: |
              # Check if protoc is already available
              if (Get-Command protoc -ErrorAction SilentlyContinue) {
                  Write-Host "protoc already installed: $(protoc --version)"
                  exit 0
              }

              Write-Host "Installing protoc on Windows..."

              # Download protoc with authentication
              $url = "https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-win64.zip"
              $zipPath = "$env:TEMP\protoc.zip"
              $extractPath = "$env:TEMP\protoc"

              # Clean up extraction directory if it exists
              if (Test-Path $extractPath) {
                  Remove-Item -Recurse -Force $extractPath
              }

              # Add authentication header if token is available
              $headers = @{}
              if ($env:GITHUB_TOKEN) {
                  $headers["Authorization"] = "Bearer $env:GITHUB_TOKEN"
              }

              Invoke-WebRequest -Uri $url -OutFile $zipPath -Headers $headers

              # Extract using .NET instead of Expand-Archive
              Add-Type -AssemblyName System.IO.Compression.FileSystem
              [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractPath)

              # Add to PATH
              $protocPath = "$extractPath\bin"
              echo "$protocPath" >> $env:GITHUB_PATH

              # Verify installation
              & "$protocPath\protoc.exe" --version
