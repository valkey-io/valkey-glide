name: Install Rust and protoc
description: Install Rust toolchain and protobuf compiler

runs:
    using: "composite"
    steps:
        - name: Install Rust toolchain (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              Write-Host "Installing Rust with MSVC toolchain via Chocolatey..."
              
              if (Get-Command choco -ErrorAction SilentlyContinue) {
                  # Install rust-ms which provides MSVC toolchain
                  choco install rust-ms -y
                  
                  # Refresh PATH
                  $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
                  
                  # Add cargo bin directory to PATH (where rustfmt/clippy are installed)
                  $cargoBin = "$env:USERPROFILE\.cargo\bin"
                  if (Test-Path $cargoBin) {
                      $env:PATH = "$cargoBin;$env:PATH"
                      echo $cargoBin >> $env:GITHUB_PATH
                      Write-Host "Added cargo bin to PATH: $cargoBin"
                  }
                  
                  # Verify installation
                  if (Get-Command rustc -ErrorAction SilentlyContinue) {
                      $version = rustc --version
                      Write-Host "Rust installed successfully: $version"
                      
                      # Install rustfmt and clippy components
                      Write-Host "Installing rustfmt and clippy..."
                      rustup component add rustfmt clippy
                      
                      # Add MSVC tools to PATH so Rust can find link.exe
                      Write-Host "Adding VS 2022 MSVC tools to PATH..."
                      
                      # We installed VS 2022 Build Tools, so check the standard location
                      $vs2022Paths = @(
                          "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC",
                          "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC"
                      )
                      
                      $msvcFound = $false
                      foreach ($msvcDir in $vs2022Paths) {
                          if (Test-Path $msvcDir) {
                              Write-Host "Found VS 2022 MSVC directory: $msvcDir"
                              $msvcVersions = Get-ChildItem $msvcDir -Directory | Sort-Object Name -Descending
                              if ($msvcVersions) {
                                  $latestMsvc = $msvcVersions[0]
                                  $msvcBin = "$($latestMsvc.FullName)\bin\Hostx64\x64"
                                  
                                  if (Test-Path "$msvcBin\link.exe") {
                                      $env:PATH = "$msvcBin;$env:PATH"
                                      echo $msvcBin >> $env:GITHUB_PATH
                                      Write-Host "✓ Added MSVC bin to PATH: $msvcBin"
                                      $msvcFound = $true
                                      break
                                  }
                              }
                          }
                      }
                      
                      if (-not $msvcFound) {
                          Write-Host "✗ Could not find VS 2022 MSVC tools"
                          exit 1
                      }
                      
                      Write-Host "Rust MSVC toolchain installed successfully"
                  } else {
                      Write-Host "Rust installation failed"
                      exit 1
                  }
              } else {
                  Write-Host "Chocolatey not available - cannot install Rust"
                  exit 1
              }

        - name: Install Rust toolchain (Unix)
          if: runner.os != 'Windows'
          uses: dtolnay/rust-toolchain@stable
          with:
              components: rustfmt, clippy

        - name: Install protoc (protobuf)
          if: runner.os != 'Windows'
          uses: arduino/setup-protoc@v3
          with:
              version: "29.1"
              repo-token: ${{ github.token }}

        - name: Install protoc (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              Write-Host "Installing protoc version 29.1 via direct download..."
              
              # Download protoc 29.1 directly
              $protocUrl = "https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-win64.zip"
              $protocZip = "$env:TEMP\protoc-29.1-win64.zip"
              $protocDir = "C:\protoc"
              
              Write-Host "Downloading protoc 29.1..."
              Invoke-WebRequest -Uri $protocUrl -OutFile $protocZip
              
              Write-Host "Extracting protoc..."
              Expand-Archive -Path $protocZip -DestinationPath $protocDir -Force
              
              # Add to PATH
              $protocBin = "$protocDir\bin"
              $env:PATH = "$protocBin;$env:PATH"
              echo $protocBin >> $env:GITHUB_PATH
              
              # Clean up
              Remove-Item $protocZip -Force -ErrorAction SilentlyContinue
              
              # Verify installation
              if (Get-Command protoc -ErrorAction SilentlyContinue) {
                  $version = protoc --version
                  Write-Host "protoc installed successfully: $version"
              } else {
                  Write-Host "protoc installation may have failed"
                  exit 1
              }

        - name: Verify Rust installation (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              Write-Host "Rust version:"
              rustc --version
              Write-Host "Cargo version:"
              cargo --version
              Write-Host "Rustfmt version:"
              rustfmt --version
              Write-Host "Clippy version:"
              cargo clippy --version

        - name: Verify Rust installation (Unix)
          if: runner.os != 'Windows'
          shell: bash
          run: |
              echo "Rust version:"
              rustc --version
              echo "Cargo version:"
              cargo --version
              echo "Rustfmt version:"
              rustfmt --version
              echo "Clippy version:"
              cargo clippy --version

        - name: Verify protoc installation (Windows)
          if: runner.os == 'Windows'
          shell: powershell
          run: |
              Write-Host "Protoc version:"
              protoc --version

        - name: Verify protoc installation (Unix)
          if: runner.os != 'Windows'
          shell: bash
          run: |
              echo "Protoc version:"
              protoc --version
