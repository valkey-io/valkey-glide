name: Install shared software dependencies

inputs:
    os:
        description: "The current operating system"
        required: true
        type: string
        options:
            - amazon-linux
            - macos
            - ubuntu
            - windows
    target:
        description: "Specified target for rust toolchain, ex. x86_64-apple-darwin"
        type: string
        required: false
        defalt: "x86_64-unknown-linux-gnu"
        options:
            - x86_64-unknown-linux-gnu
            - aarch64-unknown-linux-gnu
            - x86_64-apple-darwin
            - aarch64-apple-darwin
            - aarch64-unknown-linux-musl
            - x86_64-unknown-linux-musl
            - x86_64-pc-windows-msvc
    engine-version:
        description: "Engine version to install"
        required: false
        type: string
    language:
        description: "The language being built (optional, for language-specific setup)"
        required: false
        type: string
    github-token:
        description: "GITHUB_TOKEN, GitHub App installation access token"
        required: true
        type: string

runs:
    using: "composite"
    steps:
        - name: Install software dependencies for macOS
          shell: bash
          if: "${{ inputs.os == 'macos' }}"
          run: |
              brew update
              brew install openssl coreutils

        - name: Install software dependencies for Ubuntu GNU
          shell: bash
          if: "${{ inputs.os == 'ubuntu' && !contains(inputs.target, 'musl')}}"
          run: |
              sudo apt update -y
              sudo apt install -y git gcc pkg-config openssl libssl-dev

        - name: Install software dependencies for MUSL
          shell: bash
          if: "${{ contains(inputs.target, 'musl') }}"
          run: |
              apk update
              wget -O - https://sh.rustup.rs | sh -s -- -y
              source "$HOME/.cargo/env"
              apk add protobuf-dev musl-dev make gcc envsubst openssl libressl-dev py3-pip

        - name: Install software dependencies for Amazon-Linux
          shell: bash
          if: "${{ inputs.os == 'amazon-linux' }}"
          run: |
              yum install -y gcc pkgconfig openssl openssl-devel which curl gettext libasan tar --allowerasing

        - name: Install software dependencies for Windows
          shell: pwsh
          if: "${{ inputs.os == 'windows' }}"
          run: |
              # Verify Rust toolchain is available
              rustc --version
              cargo --version

        - name: Setup Python for Windows
          if: "${{ inputs.os == 'windows' }}"
          uses: actions/setup-python@v5
          with:
              python-version: "3.x"

        - name: Setup WSL (Windows only)
          if: "${{ inputs.os == 'windows' && inputs.engine-version }}"
          uses: Vampire/setup-wsl@v6
          with:
              distribution: Ubuntu-22.04
              use-cache: true
              update: true
              additional-packages: build-essential git pkg-config libssl-dev

        - name: Cache Valkey build
          if: "${{ inputs.engine-version }}"
          uses: actions/cache@v4
          id: cache-valkey
          with:
              path: |
                  valkey-cache/redis-server
                  valkey-cache/redis-cli
                  valkey-cache/redis-benchmark
              key: valkey-${{ inputs.engine-version }}-${{ inputs.os }}-${{ inputs.target }}-${{ github.sha }}
              restore-keys: |
                  valkey-${{ inputs.engine-version }}-${{ inputs.os }}-${{ inputs.target }}-

        - name: Install engine
          shell: ${{ inputs.os == 'windows' && 'wsl-bash {0}' || 'bash' }}
          if: "${{ inputs.engine-version }}"
          env:
              CACHE_HIT: ${{ steps.cache-valkey.outputs.cache-hit }}
              ENGINE_VERSION: ${{ inputs.engine-version }}
              OS_TYPE: ${{ inputs.os }}
          run: |
              # Check if Valkey binaries are cached
              if [ "$CACHE_HIT" = "true" ]; then
                  echo "Using cached Valkey binaries"
                  # Clone repo fresh
                  git clone https://github.com/valkey-io/valkey.git
                  cd valkey && git checkout "$ENGINE_VERSION"
                  # Move cached binaries to correct location (force overwrite)
                  mkdir -p src
                  cp -f ../valkey-cache/* src/ 2>/dev/null || true
                  # Install the cached binaries
                  sudo make install
              else
                  echo "Building Valkey from source"
                  # Install dependencies (only needed on Linux, Windows handled by Vampire)
                  if [ "$OS_TYPE" != "windows" ]; then
                      sudo apt install -y build-essential git pkg-config libssl-dev
                  fi
                  git clone https://github.com/valkey-io/valkey.git
                  cd valkey && git checkout "$ENGINE_VERSION" && make -j$(nproc) BUILD_TLS=yes
                  # Cache the built binaries
                  mkdir -p ../valkey-cache
                  cp -f src/redis-server src/redis-cli src/redis-benchmark ../valkey-cache/
                  # Install the binaries
                  sudo make install
              fi

              # Start Valkey server in background
              redis-server --daemonize yes --bind 0.0.0.0 --port 6379

              # For Windows, write IP to a file that PowerShell can read
              if [ "$OS_TYPE" = "windows" ]; then
                  hostname -I | awk '{print $1}' > /tmp/wsl_ip.txt
              fi

        - name: Install Rust toolchain and protoc
          if: "${{ !contains(inputs.target, 'musl') }}"
          uses: ./.github/workflows/install-rust-and-protoc
          with:
              target: ${{ inputs.target }}
              github-token: ${{ inputs.github-token }}

        - name: Install zig
          if: ${{ contains(inputs.target, 'linux-gnu') }}
          uses: ./.github/workflows/install-zig
          with:
              target: ${{ inputs.target }}
