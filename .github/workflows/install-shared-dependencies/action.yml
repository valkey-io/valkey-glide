name: Install shared software dependencies

inputs:
    os:
        description: "The current operating system"
        required: true
        type: string
        options:
            - amazon-linux
            - macos
            - ubuntu
            - windows
    target:
        description: "Specified target for rust toolchain, ex. x86_64-apple-darwin"
        type: string
        required: false
        defalt: "x86_64-unknown-linux-gnu"
        options:
            - x86_64-unknown-linux-gnu
            - aarch64-unknown-linux-gnu
            - x86_64-apple-darwin
            - aarch64-apple-darwin
            - aarch64-unknown-linux-musl
            - x86_64-unknown-linux-musl
            - x86_64-pc-windows-msvc
    engine-version:
        description: "Engine version to install"
        required: false
        type: string
    language:
        description: "The language being built (optional, for language-specific setup)"
        required: false
        type: string
    github-token:
        description: "GITHUB_TOKEN, GitHub App installation access token"
        required: true
        type: string

runs:
    using: "composite"
    steps:
        - name: Install software dependencies for macOS
          shell: bash
          if: "${{ inputs.os == 'macos' }}"
          run: |
              brew update
              brew install openssl coreutils

        - name: Install software dependencies for Ubuntu GNU
          shell: bash
          if: "${{ inputs.os == 'ubuntu' && !contains(inputs.target, 'musl')}}"
          run: |
              sudo apt update -y
              sudo apt install -y git gcc pkg-config openssl libssl-dev

        - name: Install software dependencies for MUSL
          shell: bash
          if: "${{ contains(inputs.target, 'musl') }}"
          run: |
              apk update
              wget -O - https://sh.rustup.rs | sh -s -- -y
              source "$HOME/.cargo/env"
              apk add protobuf-dev musl-dev make gcc envsubst openssl libressl-dev py3-pip

        - name: Install software dependencies for Amazon-Linux
          shell: bash
          if: "${{ inputs.os == 'amazon-linux' }}"
          run: |
              yum install -y gcc pkgconfig openssl openssl-devel which curl gettext libasan tar --allowerasing

        - name: Install software dependencies for Windows
          shell: pwsh
          if: "${{ inputs.os == 'windows' }}"
          run: |
              # Verify Rust toolchain is available
              rustc --version
              cargo --version

        - name: Setup WSL (Windows + Java)
          if: "${{ inputs.os == 'windows' && inputs.engine-version && inputs.language == 'java' }}"
          uses: Vampire/setup-wsl@v3
          with:
              distribution: Ubuntu-22.04
              use-cache: false

        - name: Configure WSL2 (Windows + Java)
          shell: pwsh
          if: "${{ inputs.os == 'windows' && inputs.engine-version && inputs.language == 'java' }}"
          run: |
              # Ensure WSL2 is the default version
              wsl --set-default-version 2
              # Convert the distribution to WSL2 if it's not already
              wsl --set-version Ubuntu-22.04 2

        - name: Install Valkey in WSL (Windows + Java)
          shell: pwsh
          if: "${{ inputs.os == 'windows' && inputs.engine-version && inputs.language == 'java' }}"
          run: |
              # Install dependencies and Valkey in WSL
              wsl -d Ubuntu-22.04 -- sudo apt update
              wsl -d Ubuntu-22.04 -- sudo apt install -y build-essential git pkg-config libssl-dev
              wsl -d Ubuntu-22.04 -- git clone https://github.com/valkey-io/valkey.git
              wsl -d Ubuntu-22.04 -- bash -c "cd valkey && git checkout ${{ inputs.engine-version }} && make BUILD_TLS=yes && sudo make install"
              
              # Start Valkey server in WSL background
              wsl -d Ubuntu-22.04 -- redis-server --daemonize yes --bind 0.0.0.0 --port 6379

        - name: Install Rust toolchain and protoc
          if: "${{ !contains(inputs.target, 'musl') }}"
          uses: ./.github/workflows/install-rust-and-protoc
          with:
              target: ${{ inputs.target }}
              github-token: ${{ inputs.github-token }}

        - name: Install engine
          if: "${{ inputs.engine-version && inputs.os != 'windows' }}"
          uses: ./.github/workflows/install-engine
          with:
              engine-version: ${{ inputs.engine-version }}
              target: ${{ inputs.target }}

        - name: Install zig
          if: ${{ contains(inputs.target, 'linux-gnu') }}
          uses: ./.github/workflows/install-zig
          with:
              target: ${{ inputs.target }}
