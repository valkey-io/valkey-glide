name: "CodeQL"

on:
    push:
        branches:
            - "main"
            - "v.?[0-9]+.[0-9]+.[0-9]+"
            - "v.?[0-9]+.[0-9]+"
            - "v?[0-9]+.[0-9]+.[0-9]+"
            - "v?[0-9]+.[0-9]+"
            - release-*
    pull_request:
        branches:
            - "main"
            - "v.?[0-9]+.[0-9]+.[0-9]+"
            - "v.?[0-9]+.[0-9]+"
            - "v?[0-9]+.[0-9]+.[0-9]+"
            - "v?[0-9]+.[0-9]+"
            - release-*
    schedule:
        - cron: "37 18 * * 6"
    workflow_dispatch:

jobs:
    # C# CodeQL Analysis
    analyze-csharp:
        name: Analyze (csharp)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for C# file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      csharp:
                          - 'csharp/**'
                          - 'glide-core/src/**'
                          - 'glide-core/redis-rs/redis/src/**'
                          - '.github/workflows/codeql.yml'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.csharp == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: csharp
                  build-mode: manual
                  config-file: .github/codeql/codeql-config.yml

            - name: Setup .NET
              if: github.event_name != 'pull_request' || steps.changes.outputs.csharp == 'true'
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: "8.0.x"

            - name: Build C# components
              if: github.event_name != 'pull_request' || steps.changes.outputs.csharp == 'true'
              shell: bash
              run: |
                  cd csharp
                  dotnet build sources/Valkey.Glide/Valkey.Glide.csproj --configuration Lint --framework net8.0
                  dotnet build tests/Valkey.Glide.UnitTests/Valkey.Glide.UnitTests.csproj --configuration Lint --framework net8.0
                  dotnet build tests/Valkey.Glide.IntegrationTests/Valkey.Glide.IntegrationTests.csproj --configuration Lint --framework net8.0

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.csharp == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:csharp"

    # Go CodeQL Analysis
    analyze-go:
        name: Analyze (go)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for Go file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      go:
                          - 'go/**'
                          - 'glide-core/src/**'
                          - 'glide-core/redis-rs/redis/src/**'
                          - 'ffi/src/**'
                          - '.github/workflows/codeql.yml'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.go == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: go
                  build-mode: manual
                  config-file: .github/codeql/codeql-config.yml

            - name: Set up Go cache
              if: github.event_name != 'pull_request' || steps.changes.outputs.go == 'true'
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                      ~/go/bin
                  key: ${{ runner.os }}-go-${{ hashFiles('go/go.mod', 'go/go.sum') }}-protoc-gen-go-v1.33.0
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Cache protoc binary
              if: github.event_name != 'pull_request' || steps.changes.outputs.go == 'true'
              uses: actions/cache@v4
              with:
                  path: /usr/local/bin/protoc
                  key: ${{ runner.os }}-protoc-29.1
                  restore-keys: |
                      ${{ runner.os }}-protoc-

            - name: Install protoc-gen-go
              if: github.event_name != 'pull_request' || steps.changes.outputs.go == 'true'
              shell: bash
              run: |
                  # Ensure Go bin directory is in PATH
                  export PATH=$PATH:$(go env GOPATH)/bin
                  # Check if protoc-gen-go is already installed
                  if ! command -v protoc-gen-go &> /dev/null; then
                      echo "Installing protoc-gen-go..."
                      go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.33.0
                  else
                      echo "protoc-gen-go already installed: $(protoc-gen-go --version)"
                  fi

            - name: Install protoc compiler
              if: github.event_name != 'pull_request' || steps.changes.outputs.go == 'true'
              shell: bash
              run: |
                  # Check if protoc is already installed with correct version
                  if ! command -v protoc &> /dev/null || ! protoc --version | grep -q "29.1"; then
                      echo "Installing protoc 29.1..."
                      PB_REL="https://github.com/protocolbuffers/protobuf/releases"
                      curl -LO $PB_REL/download/v29.1/protoc-29.1-linux-x86_64.zip
                      sudo unzip protoc-29.1-linux-x86_64.zip -d /usr/local
                      sudo chmod +x /usr/local/bin/protoc
                  else
                      echo "protoc already installed: $(protoc --version)"
                  fi

            - name: Build Go components
              if: github.event_name != 'pull_request' || steps.changes.outputs.go == 'true'
              shell: bash
              run: |
                  # Ensure Go bin directory is in PATH
                  export PATH=$PATH:$(go env GOPATH)/bin

                  # Create minimal lib.h to satisfy CGO imports for CodeQL analysis
                  echo "Creating minimal lib.h for CodeQL analysis..."
                  echo "// Minimal header for CodeQL analysis" > go/lib.h
                  echo "#ifndef LIB_H" >> go/lib.h
                  echo "#define LIB_H" >> go/lib.h
                  echo "// Placeholder definitions for CodeQL analysis" >> go/lib.h
                  echo "#endif" >> go/lib.h

                  # Generate protobuf files
                  cd go
                  make generate-protobuf

                  # For CodeQL analysis, we just need the source code available
                  # Try to build but don't fail if it can't link with Rust library
                  echo "Attempting Go build for CodeQL analysis..."
                  go build ./... || echo "Go build failed due to missing Rust dependencies, but source code is available for CodeQL analysis"

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.go == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:go"

    # Java/Kotlin CodeQL Analysis
    analyze-java-kotlin:
        name: Analyze (java-kotlin)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for Java file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      java:
                          - 'java/**'
                          - 'glide-core/src/**'
                          - 'glide-core/redis-rs/redis/src/**'
                          - '.github/workflows/codeql.yml'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.java == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: java-kotlin
                  build-mode: manual
                  config-file: .github/codeql/codeql-config.yml

            - name: Cache protoc binary for Java
              if: github.event_name != 'pull_request' || steps.changes.outputs.java == 'true'
              uses: actions/cache@v4
              with:
                  path: /usr/local/bin/protoc
                  key: ${{ runner.os }}-protoc-29.1
                  restore-keys: |
                      ${{ runner.os }}-protoc-

            - name: Build Java/Kotlin components
              if: github.event_name != 'pull_request' || steps.changes.outputs.java == 'true'
              shell: bash
              run: |
                  # Check if protoc is already installed with correct version
                  if ! command -v protoc &> /dev/null || ! protoc --version | grep -q "29.1"; then
                      echo "Installing protoc 29.1..."
                      PB_REL="https://github.com/protocolbuffers/protobuf/releases"
                      curl -LO $PB_REL/download/v29.1/protoc-29.1-linux-x86_64.zip
                      sudo unzip protoc-29.1-linux-x86_64.zip -d /usr/local
                      sudo chmod +x /usr/local/bin/protoc
                  else
                      echo "protoc already installed: $(protoc --version)"
                  fi
                  # Build only Java components (skip Rust build for CodeQL analysis)
                  cd java
                  ./gradlew :client:processResources :client:compileJava --exclude-task :client:buildRust

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.java == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:java-kotlin"

    # JavaScript/TypeScript CodeQL Analysis
    analyze-javascript-typescript:
        name: Analyze (javascript-typescript)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for JavaScript/TypeScript file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      js:
                          - 'node/**'
                          - 'glide-core/src/**'
                          - 'glide-core/redis-rs/redis/src/**'
                          - '.github/workflows/codeql.yml'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.js == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: javascript-typescript
                  build-mode: none
                  config-file: .github/codeql/codeql-config.yml

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.js == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:javascript-typescript"

    # Python CodeQL Analysis
    analyze-python:
        name: Analyze (python)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for Python file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      python:
                          - 'python/**'
                          - 'glide-core/src/**'
                          - 'glide-core/redis-rs/redis/src/**'
                          - 'utils/**/*.py'
                          - '.github/workflows/codeql.yml'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.python == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: python
                  build-mode: none
                  config-file: .github/codeql/codeql-config.yml

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.python == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:python"

    # Rust CodeQL Analysis
    analyze-rust:
        name: Analyze (rust)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for Rust file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      rust:
                          - 'logger_core/**'
                          - 'glide-core/**'
                          - 'ffi/**'
                          - 'deny.toml'
                          - '.github/workflows/codeql.yml'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.rust == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: rust
                  build-mode: none
                  config-file: .github/codeql/codeql-config.yml

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.rust == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:rust"

    # C/C++ CodeQL Analysis
    analyze-c-cpp:
        name: Analyze (c-cpp)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for C/C++ file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      cpp:
                          - 'cpp/**'
                          - 'glide-core/src/**'
                          - '.github/workflows/codeql.yml'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.cpp == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: c-cpp
                  build-mode: manual
                  config-file: .github/codeql/codeql-config.yml

            - name: Build C++ components
              if: github.event_name != 'pull_request' || steps.changes.outputs.cpp == 'true'
              shell: bash
              run: |
                  cd glide-core
                  cargo build --release

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.cpp == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:c-cpp"

    # GitHub Actions CodeQL Analysis
    analyze-actions:
        name: Analyze (actions)
        runs-on: ubuntu-latest
        permissions:
            security-events: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Check for GitHub Actions file changes
              if: github.event_name == 'pull_request'
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  filters: |
                      actions:
                          - '.github/**'

            - name: Initialize CodeQL
              if: github.event_name != 'pull_request' || steps.changes.outputs.actions == 'true'
              uses: github/codeql-action/init@v3
              with:
                  languages: actions
                  build-mode: none
                  config-file: .github/codeql/codeql-config.yml

            - name: Perform CodeQL Analysis
              if: github.event_name != 'pull_request' || steps.changes.outputs.actions == 'true'
              uses: github/codeql-action/analyze@v3
              with:
                  category: "/language:actions"
