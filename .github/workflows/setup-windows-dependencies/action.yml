name: "Setup Windows Dependencies"
description: "Setup Python, SSH, and other Windows-specific dependencies"

inputs:
    github-token:
        description: "GitHub token for authentication"
        required: false
        default: ${{ github.token }}

outputs:
    python-available:
        description: "Whether Python is available"
        value: ${{ steps.check.outputs.python-available }}
    ssh-available:
        description: "Whether SSH is available"
        value: ${{ steps.check.outputs.ssh-available }}

runs:
    using: "composite"
    steps:
        - name: Check Windows dependencies
          id: check
          shell: powershell
          run: |
              Write-Host "Checking Windows dependencies..."

              # Debug: Show current PATH
              Write-Host "Current PATH:"
              $env:PATH -split ';' | ForEach-Object { Write-Host "  $_" }

              # Debug: Show all executables that might be Python
              Write-Host "All python-like executables in PATH:"
              Get-Command python*, py -ErrorAction SilentlyContinue | ForEach-Object { 
                  Write-Host "  $($_.Name) -> $($_.Source)"
                  try {
                      $version = & $_.Source --version 2>&1
                      Write-Host "    Version: $version"
                  } catch {
                      Write-Host "    Version check failed: $_"
                  }
              }

              # Check for Python installations
              $pythonAvailable = $false
              $pythonPath = $null

              # Method 1: Check PATH commands
              Write-Host "Method 1: Checking PATH commands..."
              if (Get-Command python3 -ErrorAction SilentlyContinue) {
                  $pythonAvailable = $true
                  $pythonPath = (Get-Command python3).Source
                  Write-Host "Found python3 in PATH: $pythonPath"
              } elseif (Get-Command python -ErrorAction SilentlyContinue) {
                  $version = python --version 2>&1
                  Write-Host "Found python command, version: $version"
                  if ($version -match "Python 3\.") {
                      $pythonAvailable = $true
                      $pythonPath = (Get-Command python).Source
                      Write-Host "Found Python 3.x via python command: $version"
                  } else {
                      Write-Host "Python found but not version 3.x: $version"
                  }
              } elseif (Get-Command py -ErrorAction SilentlyContinue) {
                  Write-Host "Found py launcher, checking version..."
                  try {
                      $version = py --version 2>&1
                      Write-Host "py launcher version: $version"
                      if ($version -match "Python 3\.") {
                          $pythonAvailable = $true
                          $pythonPath = (Get-Command py).Source
                          Write-Host "Found Python 3.x via py launcher: $version"
                      }
                  } catch {
                      Write-Host "py launcher version check failed: $_"
                  }
              } else {
                  Write-Host "No python commands found in PATH"
              }

              # Method 2: Check registry if not found in PATH
              if (-not $pythonAvailable) {
                  Write-Host "Method 2: Checking Windows registry for Python..."
                  $regPaths = @(
                      "HKLM:\SOFTWARE\Python\PythonCore\*\InstallPath",
                      "HKCU:\SOFTWARE\Python\PythonCore\*\InstallPath",
                      "HKLM:\SOFTWARE\WOW6432Node\Python\PythonCore\*\InstallPath"
                  )

                  foreach ($regPath in $regPaths) {
                      Write-Host "Checking registry path: $regPath"
                      try {
                          Get-ItemProperty $regPath -ErrorAction SilentlyContinue | ForEach-Object {
                              $installPath = $_.'(default)'
                              Write-Host "Registry entry found: $installPath"
                              if ($installPath -and (Test-Path $installPath)) {
                                  $pythonExe = Join-Path $installPath "python.exe"
                                  Write-Host "Checking: $pythonExe"
                                  if (Test-Path $pythonExe) {
                                      try {
                                          $version = & $pythonExe --version 2>&1
                                          Write-Host "Found Python at $pythonExe - Version: $version"
                                          if ($version -match "Python 3\.") {
                                              $pythonAvailable = $true
                                              $pythonPath = $pythonExe
                                              Write-Host "Using Python 3.x from registry: $pythonExe"
                                              break
                                          }
                                      } catch {
                                          Write-Host "Version check failed for $pythonExe : $_"
                                      }
                                  } else {
                                      Write-Host "python.exe not found at: $pythonExe"
                                  }
                              } else {
                                  Write-Host "Install path does not exist: $installPath"
                              }
                          }
                      } catch {
                          Write-Host "Registry check failed for $regPath : $_"
                      }
                      if ($pythonAvailable) { break }
                  }
              }

              # Method 3: Check common paths if still not found
              if (-not $pythonAvailable) {
                  Write-Host "Method 3: Checking common installation paths..."
                  $commonPaths = @(
                      "$env:LOCALAPPDATA\Programs\Python\Python*",
                      "$env:PROGRAMFILES\Python*",
                      "$env:PROGRAMFILES(x86)\Python*",
                      "C:\Python*"
                  )

                  foreach ($pathPattern in $commonPaths) {
                      Write-Host "Checking pattern: $pathPattern"
                      Get-ChildItem $pathPattern -Directory -ErrorAction SilentlyContinue | ForEach-Object {
                          $pythonExe = Join-Path $_.FullName "python.exe"
                          Write-Host "Checking: $pythonExe"
                          if (Test-Path $pythonExe) {
                              try {
                                  $version = & $pythonExe --version 2>&1
                                  Write-Host "Found Python at $pythonExe - Version: $version"
                                  if ($version -match "Python 3\.") {
                                      $pythonAvailable = $true
                                      $pythonPath = $pythonExe
                                      Write-Host "Using Python 3.x from common path: $pythonExe"
                                      break
                                  }
                              } catch {
                                  Write-Host "Version check failed for $pythonExe : $_"
                              }
                          } else {
                              Write-Host "python.exe not found at: $pythonExe"
                          }
                      }
                      if ($pythonAvailable) { break }
                  }
              }

              # Check SSH
              $sshAvailable = $false
              if (Get-Command ssh -ErrorAction SilentlyContinue) {
                  $sshAvailable = $true
                  Write-Host "SSH client available"
              } else {
                  Write-Host "SSH client not found"
              }

              # Set outputs
              echo "python-available=$pythonAvailable" >> $env:GITHUB_OUTPUT
              echo "ssh-available=$sshAvailable" >> $env:GITHUB_OUTPUT

              Write-Host "Detection complete: Python=$pythonAvailable, SSH=$sshAvailable"

        - name: Install Visual Studio Build Tools
          shell: powershell
          env:
              GITHUB_TOKEN: ${{ inputs.github-token }}
          run: |
              Write-Host "Installing Visual Studio Build Tools via Chocolatey..."
              
              # Check if running as administrator
              $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")
              if (-not $isAdmin) {
                  Write-Host "Error: This script must be run as Administrator to install Visual Studio Build Tools"
                  Write-Host "Please run the GitHub Actions runner service as Administrator or configure the runner with elevated privileges"
                  exit 1
              }
              
              Write-Host "Running with Administrator privileges"
              
              # Check if Chocolatey is available in PATH
              if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
                  Write-Host "Chocolatey not found in PATH, searching system..."
                  
                  # Systematic search for Chocolatey
                  $chocoPath = $null
                  
                  # Method 1: Check environment variable
                  if ($env:ChocolateyInstall -and (Test-Path "$env:ChocolateyInstall\bin\choco.exe")) {
                      $chocoPath = "$env:ChocolateyInstall\bin"
                      Write-Host "Found Chocolatey via environment variable: $chocoPath"
                  }
                  # Method 2: Search filesystem
                  elseif (-not $chocoPath) {
                      Write-Host "Searching filesystem for choco.exe..."
                      $found = Get-ChildItem -Path "C:\" -Name "choco.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
                      if ($found) {
                          $chocoPath = Split-Path $found.FullName
                          Write-Host "Found Chocolatey via filesystem search: $chocoPath"
                      }
                  }
                  # Method 3: Check registry
                  elseif (-not $chocoPath) {
                      Write-Host "Checking registry for Chocolatey..."
                      try {
                          $regPath = Get-ItemProperty -Path "HKLM:\SOFTWARE\Chocolatey" -Name "InstallLocation" -ErrorAction SilentlyContinue
                          if ($regPath -and (Test-Path "$($regPath.InstallLocation)\bin\choco.exe")) {
                              $chocoPath = "$($regPath.InstallLocation)\bin"
                              Write-Host "Found Chocolatey via registry: $chocoPath"
                          }
                      } catch {
                          Write-Host "Registry check failed: $_"
                      }
                  }
                  
                  if ($chocoPath) {
                      # Add to PATH for current session
                      $env:PATH = "$chocoPath;$env:PATH"
                      # Persist for GitHub Actions
                      echo $chocoPath >> $env:GITHUB_PATH
                      Write-Host "Added Chocolatey to PATH"
                  } else {
                      Write-Host "No existing Chocolatey installation found"
                      Write-Host "Installing prerequisites and Visual Studio Build Tools..."
                      
                      # Install prerequisites first to avoid exit code 5002
                      Write-Host "Installing prerequisites..."
                      
                      # Install .NET Framework 4.8 (required for VS installer)
                      try {
                          Write-Host "Installing .NET Framework 4.8..."
                          $netFrameworkUrl = "https://download.microsoft.com/download/9/4/1/941bcadcf2d5c19b8c5c7e6b8b5b8b8b/ndp48-x86-x64-allos-enu.exe"
                          $netFrameworkPath = "$env:TEMP\ndp48-installer.exe"
                          Invoke-WebRequest -Uri $netFrameworkUrl -OutFile $netFrameworkPath -TimeoutSec 300
                          Start-Process -FilePath $netFrameworkPath -ArgumentList "/quiet" -Wait
                          Remove-Item $netFrameworkPath -Force -ErrorAction SilentlyContinue
                          Write-Host ".NET Framework installation completed"
                      } catch {
                          Write-Host "Warning: .NET Framework installation failed: $_"
                      }
                      
                      # Try winget first (more reliable on modern Windows)
                      if (Get-Command winget -ErrorAction SilentlyContinue) {
                          Write-Host "Using winget to install Microsoft C++ Build Tools..."
                          winget install Microsoft.VisualStudio.2022.BuildTools.MSBuild --silent --accept-package-agreements --accept-source-agreements
                          
                          if ($LASTEXITCODE -eq 0) {
                              Write-Host "winget installation successful"
                              $skipChocolatey = $true
                          } else {
                              Write-Host "winget installation failed, trying full Build Tools..."
                              winget install Microsoft.VisualStudio.2022.BuildTools --silent --accept-package-agreements --accept-source-agreements
                              if ($LASTEXITCODE -eq 0) {
                                  Write-Host "Full Build Tools installation successful"
                                  $skipChocolatey = $true
                              } else {
                                  Write-Host "winget installation failed with exit code: $LASTEXITCODE"
                                  Write-Host "Falling back to direct installer..."
                              }
                          }
                      } else {
                          Write-Host "winget not available, using direct installer..."
                      }
                      
                      # Fallback to direct installer if winget failed or unavailable
                      if ($LASTEXITCODE -ne 0 -or -not (Get-Command winget -ErrorAction SilentlyContinue)) {
                          Write-Host "Creating offline VS 2022 Build Tools installer..."
                          
                          $installerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
                          $installerPath = "$env:TEMP\vs_buildtools.exe"
                          $offlineDir = "$env:TEMP\vs_offline"
                          
                          # Download bootstrapper with retry
                          $downloadSuccess = $false
                          for ($i = 1; $i -le 3; $i++) {
                              try {
                                  Write-Host "Downloading VS 2022 Build Tools bootstrapper (attempt $i/3)..."
                                  
                                  # Configure timeout via ServicePointManager (affects all WebClient instances)
                                  [System.Net.ServicePointManager]::DefaultConnectionLimit = 10
                                  [System.Net.ServicePointManager]::Expect100Continue = $false
                                  
                                  $webClient = New-Object System.Net.WebClient
                                  # Set headers to avoid issues
                                  $webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
                                  $webClient.DownloadFile($installerUrl, $installerPath)
                                  $webClient.Dispose()
                                  
                                  if (Test-Path $installerPath) {
                                      $fileSize = (Get-Item $installerPath).Length
                                      Write-Host "Bootstrapper download successful ($(($fileSize / 1MB).ToString('F1')) MB)"
                                      $downloadSuccess = $true
                                      break
                                  }
                              } catch {
                                  Write-Host "Download attempt $i failed: $_"
                                  if ($i -lt 3) { Start-Sleep -Seconds 10 }
                              }
                          }
                          
                          if ($downloadSuccess) {
                              # Create offline installer layout
                              Write-Host "Creating offline installer layout..."
                              New-Item -ItemType Directory -Path $offlineDir -Force | Out-Null
                              
                              $layoutArgs = @(
                                  "--layout", $offlineDir,
                                  "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
                                  "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22000",
                                  "--quiet",
                                  "--lang", "en-US"
                              )
                              
                              Write-Host "Downloading components to offline layout..."
                              Write-Host "Running: $installerPath $($layoutArgs -join ' ')"
                              $layoutProcess = Start-Process -FilePath $installerPath -ArgumentList $layoutArgs -Wait -PassThru
                              Write-Host "Layout creation completed with exit code: $($layoutProcess.ExitCode)"
                              
                              if ($layoutProcess.ExitCode -eq 0) {
                                  # Install from offline layout
                                  Write-Host "Installing VS 2022 Build Tools from offline layout..."
                                  $offlineInstaller = "$offlineDir\vs_buildtools.exe"
                                  
                                  if (Test-Path $offlineInstaller) {
                                      $installArgs = @(
                                          "--quiet",
                                          "--wait",
                                          "--norestart",
                                          "--noweb",
                                          "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
                                          "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22000"
                                      )
                                      
                                      Write-Host "Running offline installation..."
                                      $installProcess = Start-Process -FilePath $offlineInstaller -ArgumentList $installArgs -Wait -PassThru
                                      Write-Host "Offline installation completed with exit code: $($installProcess.ExitCode)"
                                      
                                      if ($installProcess.ExitCode -eq 0 -or $installProcess.ExitCode -eq 3010) {
                                          Write-Host "VS 2022 Build Tools offline installation successful"
                                      } else {
                                          Write-Host "VS 2022 Build Tools offline installation failed with exit code: $($installProcess.ExitCode)"
                                      }
                                  } else {
                                      Write-Host "Error: Offline installer not found at $offlineInstaller"
                                  }
                              } else {
                                  Write-Host "Failed to create offline layout with exit code: $($layoutProcess.ExitCode)"
                              }
                              
                              # Cleanup
                              Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
                              Remove-Item $offlineDir -Recurse -Force -ErrorAction SilentlyContinue
                          } else {
                              Write-Host "Failed to download VS Build Tools bootstrapper after 3 attempts"
                          }
                          
                          # Skip the rest of Visual Studio logic
                          $skipChocolatey = $true
                      }
                      
                      # Skip the rest of Chocolatey logic
                      $skipChocolatey = $true
                  }
              } else {
                  Write-Host "Chocolatey already available in PATH"
                  $skipChocolatey = $false
              }
              
              # Only proceed with Chocolatey if we found it or it was already in PATH
              if (-not $skipChocolatey) {
                  # Verify choco is now available
                  if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
                      Write-Host "Error: Chocolatey still not available after setup"
                      exit 1
                  }
                  
                  # Install Visual Studio Build Tools 2022 with C++ workload
                  Write-Host "Installing Visual Studio Build Tools 2022 via Chocolatey..."
                  choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041" -y
                  
                  if ($LASTEXITCODE -ne 0) {
                      Write-Host "Chocolatey installation failed with exit code: $LASTEXITCODE"
                      Write-Host "Trying alternative approach..."
                      
                      # Fallback: Install just the C++ compiler
                      choco install microsoft-build-tools -y
                      choco install visualcpp-build-tools -y
                  }
              }
              
              # Verify installation
              $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              if (Test-Path $vsWhere) {
                  Write-Host "Success: vswhere.exe found at $vsWhere"
                  
                  $buildTools = & $vsWhere -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -format json | ConvertFrom-Json
                  if ($buildTools) {
                      Write-Host "Success: Visual Studio Build Tools with C++ support installed"
                      $buildTools | ForEach-Object { Write-Host "  Product: $($_.productId), Path: $($_.installationPath)" }
                  } else {
                      Write-Host "Warning: C++ tools verification failed, but continuing..."
                  }
              } else {
                  Write-Host "Warning: vswhere.exe not found, trying manual MSVC detection..."
                  
                  # Check for MSVC directly
                  $msvcPaths = @(
                      "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\link.exe",
                      "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\link.exe",
                      "${env:ProgramFiles}\Microsoft Visual Studio\*\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\link.exe"
                  )
                  
                  $linkFound = $false
                  foreach ($pattern in $msvcPaths) {
                      $found = Get-ChildItem $pattern -ErrorAction SilentlyContinue | Select-Object -First 1
                      if ($found) {
                          Write-Host "Found link.exe at: $($found.FullName)"
                          $linkFound = $true
                          break
                      }
                  }
                  
                  if (-not $linkFound) {
                      Write-Host "Error: No MSVC compiler found after installation"
                      exit 1
                  }
              }
              
              Write-Host "Visual Studio Build Tools installation complete"

        - name: Setup Python3 symlink
          if: steps.check.outputs.python-available == 'true'
          shell: powershell
          run: |
              if (-not (Get-Command python3 -ErrorAction SilentlyContinue)) {
                  if (Get-Command python -ErrorAction SilentlyContinue) {
                      Write-Host "Creating python3 symlink..."
                      $pythonPath = (Get-Command python).Source
                      $python3Path = Join-Path (Split-Path $pythonPath) "python3.exe"
                      New-Item -ItemType HardLink -Path $python3Path -Target $pythonPath -Force
                      Write-Host "python3 symlink created"
                  }
              } else {
                  Write-Host "python3 command already exists"
              }

        - name: Install Python (when missing)
          if: steps.check.outputs.python-available != 'true'
          shell: powershell
          run: |
              Write-Host "Installing Python 3.11..."

              # Download Python installer
              $pythonUrl = "https://www.python.org/ftp/python/3.11.7/python-3.11.7-amd64.exe"
              $installerPath = "$env:TEMP\python-installer.exe"

              Write-Host "Downloading Python installer..."
              Invoke-WebRequest -Uri $pythonUrl -OutFile $installerPath

              Write-Host "Installing Python (current user only)..."
              # Install for current user only, add to PATH
              Start-Process -FilePath $installerPath -ArgumentList "/quiet", "InstallAllUsers=0", "PrependPath=1", "Include_test=0" -Wait

              Write-Host "Cleaning up installer..."
              Remove-Item $installerPath -Force

              Write-Host "Locating installed Python..."
              # Check common installation locations for current user
              $pythonPaths = @(
                  "$env:LOCALAPPDATA\Programs\Python\Python311\python.exe",
                  "$env:LOCALAPPDATA\Programs\Python\Python311-32\python.exe",
                  "$env:APPDATA\Local\Programs\Python\Python311\python.exe"
              )

              $foundPython = $null
              foreach ($path in $pythonPaths) {
                  if (Test-Path $path) {
                      $foundPython = $path
                      Write-Host "Found Python at: $path"
                      break
                  }
              }

              if ($foundPython) {
                  # Add Python directory to current session PATH
                  $pythonDir = Split-Path $foundPython
                  $scriptsDir = Join-Path $pythonDir "Scripts"
                  $env:PATH = "$pythonDir;$scriptsDir;$env:PATH"
                  Write-Host "Added to PATH: $pythonDir"
                  Write-Host "Added to PATH: $scriptsDir"

                  # Verify installation
                  try {
                      $version = & $foundPython --version 2>&1
                      Write-Host "Python installed successfully: $version"
                  } catch {
                      Write-Host "Python installation verification failed: $_"
                  }
              } else {
                  Write-Host "Python installation may have failed - executable not found"
              }

              Write-Host "Python installation complete"

        - name: Verify Python setup
          shell: powershell
          run: |
              Write-Host "Verifying Python setup..."

              $pythonWorking = $false

              if (Get-Command python3 -ErrorAction SilentlyContinue) {
                  try {
                      $version = python3 --version 2>&1
                      Write-Host "Python3 ready: $version"
                      $pythonWorking = $true
                  } catch {
                      Write-Host "Python3 command failed: $_"
                  }
              } elseif (Get-Command python -ErrorAction SilentlyContinue) {
                  try {
                      $version = python --version 2>&1
                      Write-Host "Python ready: $version"
                      $pythonWorking = $true
                  } catch {
                      Write-Host "Python command failed: $_"
                  }
              } else {
                  Write-Host "No Python commands available"
              }

              if (-not $pythonWorking) {
                  Write-Host "Warning: Python verification failed, but continuing workflow"
                  Write-Host "Python may still work for the actual build process"
              } else {
                  Write-Host "Python verification successful"
              }
