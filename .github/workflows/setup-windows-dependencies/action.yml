name: "Setup Windows Dependencies"
description: "Setup Python, SSH, and other Windows-specific dependencies"

inputs:
    github-token:
        description: "GitHub token for authentication"
        required: false
        default: ${{ github.token }}

outputs:
    python-available:
        description: "Whether Python is available"
        value: ${{ steps.check.outputs.python-available }}
    ssh-available:
        description: "Whether SSH is available"
        value: ${{ steps.check.outputs.ssh-available }}

runs:
    using: "composite"
    steps:
        - name: Check Windows dependencies
          id: check
          shell: powershell
          run: |
              Write-Host "Checking Windows dependencies..."

              # Debug: Show current PATH
              Write-Host "Current PATH:"
              $env:PATH -split ';' | ForEach-Object { Write-Host "  $_" }

              # Debug: Show all executables that might be Python
              Write-Host "All python-like executables in PATH:"
              Get-Command python*, py -ErrorAction SilentlyContinue | ForEach-Object { 
                  Write-Host "  $($_.Name) -> $($_.Source)"
                  try {
                      $version = & $_.Source --version 2>&1
                      Write-Host "    Version: $version"
                  } catch {
                      Write-Host "    Version check failed: $_"
                  }
              }

              # Check for Python installations
              $pythonAvailable = $false
              $pythonPath = $null

              # Method 1: Check PATH commands
              Write-Host "Method 1: Checking PATH commands..."
              if (Get-Command python3 -ErrorAction SilentlyContinue) {
                  $pythonAvailable = $true
                  $pythonPath = (Get-Command python3).Source
                  Write-Host "Found python3 in PATH: $pythonPath"
              } elseif (Get-Command python -ErrorAction SilentlyContinue) {
                  $version = python --version 2>&1
                  Write-Host "Found python command, version: $version"
                  if ($version -match "Python 3\.") {
                      $pythonAvailable = $true
                      $pythonPath = (Get-Command python).Source
                      Write-Host "Found Python 3.x via python command: $version"
                  } else {
                      Write-Host "Python found but not version 3.x: $version"
                  }
              } elseif (Get-Command py -ErrorAction SilentlyContinue) {
                  Write-Host "Found py launcher, checking version..."
                  try {
                      $version = py --version 2>&1
                      Write-Host "py launcher version: $version"
                      if ($version -match "Python 3\.") {
                          $pythonAvailable = $true
                          $pythonPath = (Get-Command py).Source
                          Write-Host "Found Python 3.x via py launcher: $version"
                      }
                  } catch {
                      Write-Host "py launcher version check failed: $_"
                  }
              } else {
                  Write-Host "No python commands found in PATH"
              }

              # Method 2: Check registry if not found in PATH
              if (-not $pythonAvailable) {
                  Write-Host "Method 2: Checking Windows registry for Python..."
                  $regPaths = @(
                      "HKLM:\SOFTWARE\Python\PythonCore\*\InstallPath",
                      "HKCU:\SOFTWARE\Python\PythonCore\*\InstallPath",
                      "HKLM:\SOFTWARE\WOW6432Node\Python\PythonCore\*\InstallPath"
                  )

                  foreach ($regPath in $regPaths) {
                      Write-Host "Checking registry path: $regPath"
                      try {
                          Get-ItemProperty $regPath -ErrorAction SilentlyContinue | ForEach-Object {
                              $installPath = $_.'(default)'
                              Write-Host "Registry entry found: $installPath"
                              if ($installPath -and (Test-Path $installPath)) {
                                  $pythonExe = Join-Path $installPath "python.exe"
                                  Write-Host "Checking: $pythonExe"
                                  if (Test-Path $pythonExe) {
                                      try {
                                          $version = & $pythonExe --version 2>&1
                                          Write-Host "Found Python at $pythonExe - Version: $version"
                                          if ($version -match "Python 3\.") {
                                              $pythonAvailable = $true
                                              $pythonPath = $pythonExe
                                              Write-Host "Using Python 3.x from registry: $pythonExe"
                                              break
                                          }
                                      } catch {
                                          Write-Host "Version check failed for $pythonExe : $_"
                                      }
                                  } else {
                                      Write-Host "python.exe not found at: $pythonExe"
                                  }
                              } else {
                                  Write-Host "Install path does not exist: $installPath"
                              }
                          }
                      } catch {
                          Write-Host "Registry check failed for $regPath : $_"
                      }
                      if ($pythonAvailable) { break }
                  }
              }

              # Method 3: Check common paths if still not found
              if (-not $pythonAvailable) {
                  Write-Host "Method 3: Checking common installation paths..."
                  $commonPaths = @(
                      "$env:LOCALAPPDATA\Programs\Python\Python*",
                      "$env:PROGRAMFILES\Python*",
                      "$env:PROGRAMFILES(x86)\Python*",
                      "C:\Python*"
                  )

                  foreach ($pathPattern in $commonPaths) {
                      Write-Host "Checking pattern: $pathPattern"
                      Get-ChildItem $pathPattern -Directory -ErrorAction SilentlyContinue | ForEach-Object {
                          $pythonExe = Join-Path $_.FullName "python.exe"
                          Write-Host "Checking: $pythonExe"
                          if (Test-Path $pythonExe) {
                              try {
                                  $version = & $pythonExe --version 2>&1
                                  Write-Host "Found Python at $pythonExe - Version: $version"
                                  if ($version -match "Python 3\.") {
                                      $pythonAvailable = $true
                                      $pythonPath = $pythonExe
                                      Write-Host "Using Python 3.x from common path: $pythonExe"
                                      break
                                  }
                              } catch {
                                  Write-Host "Version check failed for $pythonExe : $_"
                              }
                          } else {
                              Write-Host "python.exe not found at: $pythonExe"
                          }
                      }
                      if ($pythonAvailable) { break }
                  }
              }

              # Check SSH
              $sshAvailable = $false
              if (Get-Command ssh -ErrorAction SilentlyContinue) {
                  $sshAvailable = $true
                  Write-Host "SSH client available"
              } else {
                  Write-Host "SSH client not found"
              }

              # Set outputs
              echo "python-available=$pythonAvailable" >> $env:GITHUB_OUTPUT
              echo "ssh-available=$sshAvailable" >> $env:GITHUB_OUTPUT

              Write-Host "Detection complete: Python=$pythonAvailable, SSH=$sshAvailable"

        - name: Setup Python3 symlink
          if: steps.check.outputs.python-available == 'true'
          shell: powershell
          run: |
              if (-not (Get-Command python3 -ErrorAction SilentlyContinue)) {
                  if (Get-Command python -ErrorAction SilentlyContinue) {
                      Write-Host "Creating python3 symlink..."
                      $pythonPath = (Get-Command python).Source
                      $python3Path = Join-Path (Split-Path $pythonPath) "python3.exe"
                      New-Item -ItemType HardLink -Path $python3Path -Target $pythonPath -Force
                      Write-Host "python3 symlink created"
                  }
              } else {
                  Write-Host "python3 command already exists"
              }

        - name: Install Python (when missing)
          if: steps.check.outputs.python-available != 'true'
          shell: powershell
          run: |
              Write-Host "Installing Python 3.11..."

              # Download Python installer
              $pythonUrl = "https://www.python.org/ftp/python/3.11.7/python-3.11.7-amd64.exe"
              $installerPath = "$env:TEMP\python-installer.exe"

              Write-Host "Downloading Python installer..."
              Invoke-WebRequest -Uri $pythonUrl -OutFile $installerPath

              Write-Host "Installing Python (current user only)..."
              # Install for current user only, add to PATH
              Start-Process -FilePath $installerPath -ArgumentList "/quiet", "InstallAllUsers=0", "PrependPath=1", "Include_test=0" -Wait

              Write-Host "Cleaning up installer..."
              Remove-Item $installerPath -Force

              Write-Host "Refreshing PATH..."
              $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "User") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "Machine")

              Write-Host "Python installation complete"

        - name: Verify Python setup
          shell: powershell
          run: |
              if (Get-Command python3 -ErrorAction SilentlyContinue) {
                  python3 --version
                  Write-Host "Python3 ready"
              } elseif (Get-Command python -ErrorAction SilentlyContinue) {
                  python --version
                  Write-Host "Python ready"
              } else {
                  Write-Host "No Python available"
                  exit 1
              }
