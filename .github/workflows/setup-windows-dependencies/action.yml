name: "Setup Windows Dependencies"
description: "Install Windows dependencies including Chocolatey, Python, and Visual Studio Build Tools"

inputs:
    github-token:
        description: "GitHub token for authentication"
        required: false
        default: ${{ github.token }}

outputs:
    python-available:
        description: "Whether Python is available"
        value: ${{ steps.check.outputs.python-available }}
    ssh-available:
        description: "Whether SSH is available"
        value: ${{ steps.check.outputs.ssh-available }}

runs:
    using: "composite"
    steps:
        - name: Install Chocolatey
          shell: powershell
          run: |
              Write-Host "Installing Chocolatey..."
              
              if (Get-Command choco -ErrorAction SilentlyContinue) {
                  Write-Host "Chocolatey already available"
                  choco --version
              } else {
                  # Remove any corrupted installations
                  $paths = @("C:\ProgramData\chocolatey", "$env:ALLUSERSPROFILE\chocolatey")
                  foreach ($path in $paths) {
                      if (Test-Path $path) {
                          Write-Host "Removing existing installation: $path"
                          Remove-Item $path -Recurse -Force -ErrorAction SilentlyContinue
                      }
                  }
                  
                  # Install fresh
                  Set-ExecutionPolicy Bypass -Scope Process -Force
                  [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
                  Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                  
                  # Refresh PATH properly - Chocolatey adds C:\ProgramData\chocolatey\bin
                  $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
                  
                  # Also add Chocolatey bin directory explicitly
                  $chocoPath = "C:\ProgramData\chocolatey\bin"
                  if (Test-Path $chocoPath) {
                      $env:PATH = "$chocoPath;$env:PATH"
                      echo $chocoPath >> $env:GITHUB_PATH
                      Write-Host "Added Chocolatey to PATH: $chocoPath"
                  }
                  
                  if (Get-Command choco -ErrorAction SilentlyContinue) {
                      Write-Host "Chocolatey installed successfully"
                      choco --version
                  } else {
                      Write-Host "Chocolatey installation failed - continuing anyway"
                  }
              }

        - name: Check Windows dependencies
          id: check
          shell: powershell
          run: |
              Write-Host "Checking Windows dependencies..."
              
              # Check for Python installations
              $pythonAvailable = $false
              
              # Method 1: Check PATH commands
              Write-Host "Method 1: Checking PATH commands..."
              if (Get-Command python3 -ErrorAction SilentlyContinue) {
                  try {
                      $version = python3 --version 2>&1
                      Write-Host "python3 version check: $version"
                      if ($version -match "Python 3\." -and $version -notmatch "Microsoft Store" -and $version -notmatch "not found") {
                          $pythonAvailable = $true
                          Write-Host "Valid Python 3.x found via python3 command: $version"
                      } else {
                          Write-Host "python3 command exists but not functional (likely Windows Store alias)"
                      }
                  } catch {
                      Write-Host "python3 version check failed: $_"
                  }
              } elseif (Get-Command python -ErrorAction SilentlyContinue) {
                  $version = python --version 2>&1
                  Write-Host "Found python command, version: $version"
                  if ($version -match "Python 3\.") {
                      $pythonAvailable = $true
                      Write-Host "Found Python 3.x via python command: $version"
                  } else {
                      Write-Host "Python found but not version 3.x: $version"
                  }
              } elseif (Get-Command py -ErrorAction SilentlyContinue) {
                  Write-Host "Found py launcher, checking version..."
                  try {
                      $version = py --version 2>&1
                      Write-Host "py launcher version: $version"
                      if ($version -match "Python 3\.") {
                          $pythonAvailable = $true
                          Write-Host "Found Python 3.x via py launcher: $version"
                      }
                  } catch {
                      Write-Host "py launcher version check failed: $_"
                  }
              } else {
                  Write-Host "No python commands found in PATH"
              }

              # Check SSH
              $sshAvailable = $false
              try {
                  ssh -V
                  $sshAvailable = $true
                  Write-Host "SSH client available"
              } catch {
                  Write-Host "SSH client not found"
              }

              # Set outputs
              echo "python-available=$pythonAvailable" >> $env:GITHUB_OUTPUT
              echo "ssh-available=$sshAvailable" >> $env:GITHUB_OUTPUT

              Write-Host "Detection complete: Python=$pythonAvailable, SSH=$sshAvailable"

        - name: Install Python if not available
          if: steps.check.outputs.python-available != 'true'
          shell: powershell
          run: |
              Write-Host "Installing Python via Chocolatey..."
              
              if (Get-Command choco -ErrorAction SilentlyContinue) {
                  choco install python3 -y
                  
                  # Refresh PATH
                  $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
                  
                  # Verify
                  if (Get-Command python -ErrorAction SilentlyContinue) {
                      $version = python --version
                      Write-Host "Python installed successfully: $version"
                  } else {
                      Write-Host "Python installation may have failed"
                  }
              } else {
                  Write-Host "Chocolatey not available - cannot install Python"
              }

        - name: Install Visual Studio Build Tools
          shell: powershell
          run: |
              Write-Host "Installing Visual Studio 2022 Build Tools..."
              
              if (Get-Command choco -ErrorAction SilentlyContinue) {
                  Write-Host "Installing Visual Studio 2022 Build Tools with C++ components..."
                  choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows11SDK.22000" -y
                  
                  Write-Host "Verifying MSVC compiler installation..."
                  
                  # Use vswhere.exe to find Visual Studio installations
                  $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
                  if (Test-Path $vswhere) {
                      Write-Host "Using vswhere.exe to find Visual Studio installations..."
                      
                      # List all VS installations
                      $installations = & $vswhere -all -format json | ConvertFrom-Json
                      foreach ($install in $installations) {
                          Write-Host "Found VS installation:"
                          Write-Host "  Product: $($install.displayName)"
                          Write-Host "  Version: $($install.installationVersion)"
                          Write-Host "  Path: $($install.installationPath)"
                      }
                      
                      # Look specifically for Build Tools with C++ components
                      $buildToolsPath = & $vswhere -latest -products Microsoft.VisualStudio.Product.BuildTools -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                      if ($buildToolsPath) {
                          Write-Host "Found Build Tools with C++ components at: $buildToolsPath"
                          
                          # Look for MSVC compiler
                          $msvcDir = Join-Path $buildToolsPath "VC\Tools\MSVC"
                          if (Test-Path $msvcDir) {
                              Write-Host "MSVC directory found: $msvcDir"
                              $msvcVersions = Get-ChildItem $msvcDir -Directory | Sort-Object Name -Descending
                              foreach ($version in $msvcVersions) {
                                  Write-Host "  MSVC version: $($version.Name)"
                                  $compilerPath = Join-Path $version.FullName "bin\Hostx64\x64\cl.exe"
                                  if (Test-Path $compilerPath) {
                                      Write-Host "  âœ“ Compiler found: $compilerPath"
                                      $found = $true
                                      break
                                  }
                              }
                          }
                      } else {
                          Write-Host "No Build Tools with C++ components found via vswhere"
                          
                          # Try to install C++ components manually
                          Write-Host "Attempting to add C++ components to existing installation..."
                          $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
                          if (Test-Path $vsInstaller) {
                              Write-Host "Running VS installer to add C++ components..."
                              & $vsInstaller modify --installPath $buildToolsPath --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows11SDK.22000 --quiet
                          }
                      }
                  } else {
                      Write-Host "vswhere.exe not found, using manual search..."
                  }
                  
                  # Fallback manual search
                  if (-not $found) {
                      $msvcPaths = @(
                          "${env:ProgramFiles}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\cl.exe",
                          "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\cl.exe"
                      )
                      
                      foreach ($path in $msvcPaths) {
                          Write-Host "Checking: $path"
                          $compiler = Get-ChildItem $path -ErrorAction SilentlyContinue | Select-Object -First 1
                          if ($compiler) {
                              Write-Host "MSVC compiler found: $($compiler.FullName)"
                              $found = $true
                              break
                          }
                      }
                  }
                  
                  if (-not $found) {
                      Write-Host "Error: MSVC compiler not found after installation"
                      Write-Host "C++ build tools are required for Rust compilation"
                      exit 1
                  }
              } else {
                  Write-Host "Chocolatey not available - skipping Visual Studio Build Tools"
                  exit 1
              }
