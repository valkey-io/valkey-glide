name: C# CD

on:
    push:
        tags:
            - "v*.*"
    workflow_dispatch:
        inputs:
            version:
                description: "The release version of GLIDE, formatted as *.*.* or *.*.*-rc*"
                required: true
            nuget_publish:
                description: "Publish to NuGet"
                required: true
                type: boolean

permissions:
    contents: read
    id-token: write

concurrency:
    group: C#-CD-${{ github.head_ref || github.ref }}-${{ toJson(inputs) }}
    cancel-in-progress: true

run-name:
    # Set custom name if job is started manually and name is given
    ${{ github.event_name == 'workflow_dispatch' && (inputs.name == '' && format('{0} @ {1} {2}', github.ref_name, github.sha, toJson(inputs)) || inputs.name) || '' }}

env:
    CARGO_TERM_COLOR: always

jobs:
    load-platform-matrix:
        runs-on: ubuntu-latest
        outputs:
            PLATFORM_MATRIX: ${{ steps.load-platform-matrix.outputs.PLATFORM_MATRIX }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: load-platform-matrix
              id: load-platform-matrix
              shell: bash
              run: |
                  jq -c "[.[] | select(.PACKAGE_MANAGERS != null and (.PACKAGE_MANAGERS | contains([\"nuget\"])))]" < .github/json_matrices/build-matrix.json | awk '{ printf "PLATFORM_MATRIX=%s\n", $0 }' | tee -a $GITHUB_OUTPUT

    set-release-version:
        runs-on: ubuntu-latest
        outputs:
            RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
        steps:
            - name: Set the release version
              id: release-version
              shell: bash
              run: |
                  if ${{ github.event_name == 'workflow_dispatch' }}; then
                      R_VERSION="${{ env.INPUT_VERSION }}"
                  else
                      R_VERSION=${GITHUB_REF:11}
                  fi
                  echo "RELEASE_VERSION=${R_VERSION}" >> $GITHUB_ENV
                  echo "Release version detected: $R_VERSION"
                  echo "RELEASE_VERSION=$R_VERSION" >> $GITHUB_OUTPUT
              env:
                  INPUT_VERSION: ${{ github.event.inputs.version }}

    create-binaries:
        needs: [load-platform-matrix]
        timeout-minutes: 35
        strategy:
            # Run all jobs
            fail-fast: false
            matrix:
                host: ${{ fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX) }}
        runs-on: ${{ matrix.host.CD_RUNNER }}

        steps:
            - uses: actions/checkout@v4

            - name: Output Matrix Parameters for this job
              if: ${{ matrix.host.CD_RUNNER != 'macos-13' }}
              shell: bash
              run: |
                  echo "Job running with the following matrix configuration:"
                  echo "${{ toJson(matrix) }}"

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: ${{ matrix.host.OS }}
                  target: ${{ matrix.host.TARGET }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - uses: actions/cache@v4
              with:
                  path: csharp/rust/target
                  key: ${{ matrix.host.TARGET }}-csharp
                  restore-keys: |
                      ${{ matrix.host.TARGET }}-glide-core
                      ${{ matrix.host.TARGET }}

            # TODO strip debug symbols
            - name: Build native libs
              if: ${{ !contains(matrix.host.TARGET, 'linux-gnu') }}
              working-directory: csharp/rust
              run: cargo build --release

            - name: Build native libs (linux)
              if: ${{ contains(matrix.host.TARGET, 'linux-gnu') }}
              working-directory: csharp/rust
              run: |
                  cargo zigbuild -r --target ${{ matrix.host.TARGET }}.2.17
                  mkdir -p target/release
                  cp target/*/release/libglide_rs.so target/release/

            - name: Upload artifacts to publish
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.host.TARGET }}
                  path: |
                      csharp/rust/target/release/*.so
                      csharp/rust/target/release/*.dylib
                      csharp/rust/target/release/*.dll

    build-package-to-publish:
        needs: [set-release-version, create-binaries]
        runs-on: ubuntu-latest
        env:
            RELEASE_VERSION: ${{ needs.set-release-version.outputs.RELEASE_VERSION }}
        steps:
            - uses: actions/checkout@v4

            - name: Download published artifacts
              uses: actions/download-artifact@v4
              with:
                  path: csharp/bin

            - name: Rename lib for windows
              working-directory: csharp/bin
              run: |
                  find . -name glide_rs.dll -execdir mv {} libglide_rs.dll \;
                  tree

            - name: Set up dotnet
              uses: actions/setup-dotnet@v4
              with:
                  # install all supported versions + latest dotnet too to use language features
                  dotnet-version: |
                      6
                      8
                      9
              env:
                  DOTNET_INSTALL_DIR: ~/.dotnet

            - name: Pack the client
              run: |
                  dotnet build csharp/sources/Valkey.Glide/Valkey.Glide.csproj --configuration Release
                  dotnet pack csharp/sources/Valkey.Glide/Valkey.Glide.csproj --configuration Release
              env:
                  SkipCargo: true

            - name: Upload artifacts to publish
              uses: actions/upload-artifact@v4
              with:
                  name: package
                  path: csharp/sources/Valkey.Glide/bin/Release/Valkey.Glide.*.nupkg

    publish:
        environment: AWS_ACTIONS
        if: ${{ (inputs.nuget_publish == true || github.event_name == 'push') && github.repository_owner == 'valkey-io' }}
        needs: [build-package-to-publish]
        runs-on: ubuntu-latest
        steps:
            - name: Download package
              uses: actions/download-artifact@v4
              with:
                  name: package

            - name: Publish
              run: |
                  ls -l
                  : dotnet nuget push Valkey.Glide.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

    test:
        needs: [publish, set-release-version, load-platform-matrix]
        if: ${{ always() }}
        timeout-minutes: 35
        strategy:
            # Run all jobs
            fail-fast: false
            matrix:
                host: ${{ fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX) }}
        runs-on: ${{ matrix.host.CD_RUNNER }}
        env:
            RELEASE_VERSION: ${{ needs.set-release-version.outputs.RELEASE_VERSION }}
        steps:
            - uses: actions/checkout@v4

            - name: Download package
              if: ${{ needs.publish.result == 'skipped' }}
              uses: actions/download-artifact@v4
              with:
                  name: package
                  path: csharp/nuget.local

            - name: Set up a local nuget
              if: ${{ needs.publish.result == 'skipped' }}
              working-directory: csharp
              run: |
                  dotnet nuget config paths
                  dotnet nuget config paths | xargs cat
                  dotnet nuget add source nuget.local
                  dotnet nuget config paths
                  dotnet nuget config paths | xargs cat
                  ls -l nuget.local

            - name: Set up dotnet
              uses: actions/setup-dotnet@v4
              with:
                  # install latest dotnet too to use language features
                  dotnet-version: |
                      8
                      9

            - name: Patch IT suite to run tests using freshly published version
              working-directory: csharp/tests/Valkey.Glide.IntegrationTests
              run: |
                  dotnet remove reference $(dotnet list reference | tail -n +3)
                  dotnet add package Valkey.Glide --version ${{ env.RELEASE_VERSION }}
                  git diff

            - name: Install engine
              uses: ./.github/workflows/install-engine
              with:
                  engine-version: 8.1
                  target: ${{ matrix.host.TARGET }}

            - name: Run tests
              working-directory: csharp/tests/Valkey.Glide.IntegrationTests
              run: |
                  dotnet test --framework net8.0 --logger "console;verbosity=detailed" --logger "html;LogFileName=TestReport.html" --results-directory . --filter "FullyQualifiedName~CommandTests"

            - name: Upload test reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports
                  path: |
                      csharp/TestReport.html
                      utils/clusters/**

    remove-package-if-validation-fails:
        needs: [test, set-release-version]
        if: ${{ always() }}
        runs-on: ubuntu-latest
        steps:
            - name: Remove package from NuGet due to test failures
              if: ${{ needs.test.result == 'failure' }}
              run: dotnet nuget delete Valkey.Glide ${{ env.RELEASE_VERSION }} --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
