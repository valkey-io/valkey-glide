# The cross platform build was created based on the [Packaging Rust Applications for the NPM Registry blog](https://blog.orhun.dev/packaging-rust-for-npm/).

name: PyPI - Continuous Deployment

on:
    pull_request:
        paths:
            - .github/workflows/pypi-cd.yml
            - .github/workflows/build-python-wrapper/action.yml
            - .github/workflows/start-self-hosted-runner/action.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/install-engine/action.yml
            - .github/json_matrices/**
            - .github/workflows/create-test-matrices/action.yml
    push:
        tags:
            - "v*.*"
    workflow_dispatch:
        inputs:
            version:
                description: "The release version of GLIDE, formatted as *.*.* or *.*.*-rc*"
                required: true
            publish_async:
                description: "Publish Async Client to PyPI"
                required: true
                type: boolean
                default: false
            publish_sync:
                description: "Publish Sync Client to PyPI"
                required: true
                type: boolean
                default: false

concurrency:
    group: pypi-${{ github.head_ref || github.ref }}
    cancel-in-progress: true

permissions:
    id-token: write

jobs:
    load-platform-matrix:
        runs-on: ubuntu-latest
        outputs:
            PLATFORM_MATRIX: ${{ steps.load-platform-matrix.outputs.PLATFORM_MATRIX }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: load-platform-matrix
              id: load-platform-matrix
              shell: bash
              run: |
                  # Filter entries with pypi in PACKAGE_MANAGERS and replace "ephemeral" with "persistent" in RUNNER
                  export PLATFORM_MATRIX=$(jq 'map(
                      select(.PACKAGE_MANAGERS != null and (.PACKAGE_MANAGERS | contains(["pypi"])))
                      | .RUNNER = (
                          if (.RUNNER | type == "array") 
                          then (.RUNNER | map(if . == "ephemeral" then "persistent" else . end)) 
                          else (if .RUNNER == "ephemeral" then "persistent" else .RUNNER end) 
                          end
                      )
                  )' < .github/json_matrices/build-matrix.json | jq -c .)
                  echo "PLATFORM_MATRIX=${PLATFORM_MATRIX}" >> $GITHUB_OUTPUT

    start-self-hosted-runner:
        if: github.repository_owner == 'valkey-io'
        runs-on: ubuntu-latest
        environment: AWS_ACTIONS
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Start self hosted EC2 runner
              uses: ./.github/workflows/start-self-hosted-runner
              with:
                  role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
                  aws-region: ${{ secrets.AWS_REGION }}
                  ec2-instance-id: ${{ secrets.AWS_EC2_INSTANCE_ID }}

    publish-binaries:
        needs: [start-self-hosted-runner, load-platform-matrix]
        if: github.repository_owner == 'valkey-io'
        name: Publish packages to PyPi
        runs-on: ${{ matrix.build.RUNNER }}
        timeout-minutes: 60
        strategy:
            fail-fast: false
            matrix:
                build: ${{ fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX) }}
        outputs:
            release_version: ${{ steps.set_version.outputs.RELEASE_VERSION }}
        steps:
            - name: Setup self-hosted runner access
              if: ${{ contains(matrix.build.RUNNER, 'self-hosted') }}
              run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/valkey-glide

            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: "true"

            - name: Set the release version
              id: set_version
              shell: bash
              run: |
                  if ${{ env.EVENT_NAME == 'pull_request' }}; then
                    R_VERSION="0.1.0"
                  elif ${{ env.EVENT_NAME == 'workflow_dispatch' }}; then
                    R_VERSION="${{ env.INPUT_VERSION }}"
                  else
                    R_VERSION=${GITHUB_REF:11}
                  fi
                  echo "RELEASE_VERSION=${R_VERSION}" >> $GITHUB_ENV
                  echo "RELEASE_VERSION=${R_VERSION}" >> $GITHUB_OUTPUT
              env:
                  EVENT_NAME: ${{ github.event_name }}
                  INPUT_VERSION: ${{ github.event.inputs.version }}

            - name: Check that the release version dont have typo init
              if: ${{ github.event_name != 'pull_request' && contains(env.RELEASE_VERSION, '-') && !contains(env.RELEASE_VERSION, 'rc') }}
              run: |
                  echo "The release version "${{ env.RELEASE_VERSION }}" contains a typo, please fix it"
                  echo "The release version should be in the format v{major-version}.{minor-version}.{patch-version}-rc{release-candidate-number} when it a release candidate or v{major-version}.{minor-version}.{patch-version} in a stable release."
                  exit 1

            - name: Set the package version for Python
              working-directory: ./python
              run: |
                  SED_FOR_MACOS=`if [[ "${{ matrix.build.OS }}" =~ .*"macos".*  ]]; then echo "''"; fi`
                  # Set the version for the Async, Sync and Shared packages
                  # List of packages to update
                  for package in glide-async glide-sync glide-shared; do
                    echo "Patching version in $package/pyproject.toml"
                    sed -i $SED_FOR_MACOS "s/^dynamic = \[\s*\"version\"\s*\]/version = \"${{ env.RELEASE_VERSION }}\"/" "./$package/pyproject.toml"
                    # Log the updated file
                    cat "./$package/pyproject.toml"
                  done

            - name: Set up Python
              if: ${{ !contains(matrix.build.RUNNER, 'self-hosted') }}
              uses: actions/setup-python@v5
              with:
                  python-version: "3.13"

            - name: Update package version in config.toml for the async client
              uses: ./.github/workflows/update-glide-version
              with:
                  folder_path: "${{ github.workspace }}/python/glide-async/.cargo"
                  named_os: ${{ matrix.build.NAMED_OS }}

            - name: Update package version in config.toml for the sync client
              uses: ./.github/workflows/update-glide-version
              with:
                  folder_path: "${{ github.workspace }}/ffi/.cargo"
                  named_os: ${{ matrix.build.NAMED_OS }}

            ### BUILD ###

            - name: Build Python Sync and Async wrappers
              uses: ./.github/workflows/build-python-wrapper
              with:
                  os: ${{ matrix.build.OS }}
                  target: ${{ matrix.build.TARGET }}
                  publish: "true"
                  github-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Generate protobuf files
              working-directory: ./python
              run: |
                  python3 dev.py protobuf

            - name: Include protobuf files in the package
              working-directory: ./python
              run: |
                  # Protobuf files are ignored by .gitignore, which affects packaging tools.
                  # To include them in the build, we temporarily remove them from .gitignore.
                  SED_FOR_MACOS=`if [[ "${{ matrix.build.OS }}" =~ .*"macos".*  ]]; then echo "''"; fi`
                  sed -i $SED_FOR_MACOS '/pb2.py/d' .gitignore
                  # Log the edited .gitignore file
                  cat .gitignore

            - name: Symlink .gitignore into the sync and async folders
              working-directory: ./python
              run: |
                  # Ensures packaging tools exclude ignored files during build
                  ln -sf .gitignore glide-sync/.gitignore
                  ln -sf .gitignore glide-async/.gitignore

            - name: Copy README file into package directories
              working-directory: ./python
              run: |
                  # Copy the README file into each package directory to include it in the distributions
                  cp README.md glide-sync/README.md
                  cp README.md glide-async/README.md

            - name: Setup PyPy for macOS
              if: startsWith(matrix.build.NAMED_OS, 'darwin')
              run: |
                  # Install pypy
                  ARCH=$(uname -m)

                  if [[ "$ARCH" == "arm64" ]]; then
                    # Download PyPy for Apple Silicon
                    PYPY_VERSION_3_11=pypy3.11-v7.3.19-macos_arm64
                    PYPY_VERSION_3_10=pypy3.10-v7.3.19-macos_arm64
                    PYPY_VERSION_3_9=pypy3.9-v7.3.16-macos_arm64
                    
                    echo "Downloading PyPy 3.9 for arm64"
                    curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_9}.tar.bz2"
                    sudo tar -xf "${PYPY_VERSION_3_9}.tar.bz2" --exclude="*/bin/python*" -C /opt
                    
                    echo "Downloading PyPy 3.10 for arm64"
                    curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                    sudo tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt
                    
                    echo "Downloading PyPy 3.11 for arm64"
                    curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_11}.tar.bz2"
                    sudo tar -xf "${PYPY_VERSION_3_11}.tar.bz2" --exclude="*/bin/python*" -C /opt
                    
                  elif [[ "$ARCH" == "x86_64" ]]; then
                    PYPY_VERSION_3_11=pypy3.11-v7.3.19-macos_x86_64
                    PYPY_VERSION_3_10=pypy3.10-v7.3.19-macos_x86_64
                    PYPY_VERSION_3_9=pypy3.9-v7.3.16-macos_x86_64
                    
                    echo "Downloading PyPy 3.9 for x86_64"
                    curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_9}.tar.bz2"
                    sudo tar -xf "${PYPY_VERSION_3_9}.tar.bz2" --exclude="*/bin/python*" -C /opt
                    
                    echo "Downloading PyPy 3.10 for x86_64"
                    curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                    sudo tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt
                    
                    echo "Downloading PyPy 3.11 for x86_64"
                    curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_11}.tar.bz2" 
                    sudo tar -xf "${PYPY_VERSION_3_11}.tar.bz2" --exclude="*/bin/python*" -C /opt
                  fi

                  echo "/opt/${PYPY_VERSION_3_11}/bin:/opt/${PYPY_VERSION_3_10}/bin:/opt/${PYPY_VERSION_3_9}/bin" >> ${GITHUB_PATH}

                  sudo chmod -R a+rx /opt/pypy*/bin
                  sudo chmod -R a+rx /opt/pypy*/lib/*.dylib

            ### ASYNC CLIENT ###

            - name: Prepare the async client for deployment, vendor the glide-shared code
              working-directory: ./python
              run: cp -r glide-shared/glide_shared glide-async/python

            - name: Build Python Async client wheels (linux)
              if: startsWith(matrix.build.NAMED_OS, 'linux')
              uses: PyO3/maturin-action@v1
              with:
                  working-directory: ./python/glide-async
                  target: ${{ matrix.build.TARGET }}
                  args: --release --strip --out wheels -i ${{ github.event_name != 'pull_request' && 'python3.9 python3.10 python3.11 python3.12 python3.13 pypy3.9 pypy3.10 pypy3.11' || 'python3.13' }}
                  manylinux: auto
                  container: ${{ matrix.build.CONTAINER != '' && matrix.build.CONTAINER || '2014' }}
                  before-script-linux: |
                      # Install protobuf compiler
                      if [[ $(`which apt`) != '' ]]
                      then
                        echo "installing unzip and curl"
                        apt-get update
                        apt install unzip curl python3.13 pypy3 -y
                      fi
                      PB_REL="https://github.com/protocolbuffers/protobuf/releases"
                      ARCH=`uname -p`
                      if [[ $ARCH == 'x86_64' ]]; then
                        PROTOC_ARCH="x86_64"
                      elif [[ $ARCH == 'aarch64' ]]; then
                        PROTOC_ARCH="aarch_64"
                        export CC_aarch64_unknown_linux_gnu=gcc
                        export CFLAGS_aarch64_unknown_linux_gnu="-march=armv8-a"
                      else
                        echo "Running on unsupported architecture: $ARCH. Expected one of: ['x86_64', 'aarch64']"
                        exit 1
                      fi
                      curl -LO $PB_REL/download/v3.20.3/protoc-3.20.3-linux-${PROTOC_ARCH}.zip
                      unzip protoc-3.20.3-linux-${PROTOC_ARCH}.zip -d $HOME/.local
                      export PATH="$PATH:$HOME/.local/bin"

                      # Install PyPy
                      if [[ "$ARCH" == "x86_64" ]]; then
                        PYPY_VERSION_3_11=pypy3.11-v7.3.19-linux64
                        PYPY_VERSION_3_10=pypy3.10-v7.3.19-linux64
                        PYPY_VERSION_3_9=pypy3.9-v7.3.16-linux64

                        echo "Downloading PyPy 3.9 for x86_64"
                        curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_9}.tar.bz2"
                        tar -xf "${PYPY_VERSION_3_9}.tar.bz2"  --exclude="*/bin/python*" -C /opt

                        echo "Downloading PyPy 3.10 for x86_64"
                        curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                        tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt

                        echo "Downloading PyPy 3.11 for x86_64"
                        curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_11}.tar.bz2"
                        tar -xf "${PYPY_VERSION_3_11}.tar.bz2" --exclude="*/bin/python*" -C /opt

                        export PATH="/opt/${PYPY_VERSION_3_11}/bin:/opt/${PYPY_VERSION_3_10}/bin:/opt/${PYPY_VERSION_3_9}/bin:$PATH"

                      elif [[ "$ARCH" == "aarch64" ]]; then
                        PYPY_VERSION_3_11=pypy3.11-v7.3.19-aarch64
                        PYPY_VERSION_3_10=pypy3.10-v7.3.19-aarch64
                        PYPY_VERSION_3_9=pypy3.9-v7.3.16-aarch64

                        echo "Downloading PyPy 3.9 for aarch64"
                        curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_9}.tar.bz2"
                        tar -xf "${PYPY_VERSION_3_9}.tar.bz2" --exclude="*/bin/python*" -C /opt

                        echo "Downloading PyPy 3.10 for aarch64"
                        curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                        tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt

                        echo "Downloading PyPy 3.11 for aarch64"
                        curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_11}.tar.bz2"
                        tar -xf "${PYPY_VERSION_3_11}.tar.bz2" --exclude="*/bin/python*" -C /opt

                        export PATH="/opt/${PYPY_VERSION_3_11}/bin:/opt/${PYPY_VERSION_3_10}/bin:/opt/${PYPY_VERSION_3_9}/bin:$PATH"
                      else
                        echo "Running on unsupported architecture: $ARCH. Expected one of: ['x86_64', 'aarch64']"
                        exit 1
                      fi

            - name: Build Python Async client wheels (macos)
              if: startsWith(matrix.build.NAMED_OS, 'darwin')
              uses: PyO3/maturin-action@v1
              with:
                  maturin-version: 0.14.17
                  working-directory: ./python/glide-async
                  target: ${{ matrix.build.TARGET }}
                  args: --release --strip --out wheels -i  ${{ github.event_name != 'pull_request' && 'python3.9 python3.10 python3.11 python3.12 python3.13 pypy3.9 pypy3.10 pypy3.11' || 'python3.13' }}

            ### SYNC CLIENT ###

            - name: Install cibuildwheel
              run: python3 -m pip install cibuildwheel

            - name: Determine cibuildwheel version and set enable flags
              id: cibw_config
              run: |
                  python3 -m pip install setuptools
                  # PyPy builds are disabled by default from version 3
                  CIBW_VERSION=$(python3 -c "import pkg_resources; print(pkg_resources.get_distribution('cibuildwheel').version)")
                  echo "Detected cibuildwheel version: $CIBW_VERSION"

                  ENABLE_FLAGS=""
                  # Use version sort to compare
                  if [[ "$(printf '%s\n' "3.0.0" "$CIBW_VERSION" | sort -V | head -n1)" == "3.0.0" ]]; then
                    ENABLE_FLAGS="pypy pypy-eol"
                  fi
                  echo "enable_flags=$ENABLE_FLAGS" >> "$GITHUB_OUTPUT"

            - name: Build Python Sync client wheels
              run: |
                  # we call cibuildwheel from the root folder in order to copy the whole folder tree to the docker
                  cibuildwheel python/glide-sync --output-dir python/glide-sync/wheels
              env:
                  CIBW_BUILD: ${{ github.event_name != 'pull_request' && 'cp39-* cp310-* cp311-* cp312-* cp313-* pp39-* pp310-* pp311-*' || 'cp313-*' }}
                  CIBW_SKIP: "*-musl* *i686* *i386*"
                  CIBW_ARCHS_LINUX: auto
                  CIBW_ARCHS_MACOS: auto
                  CIBW_ENABLE: ${{ steps.cibw_config.outputs.enable_flags }}
                  MACOSX_DEPLOYMENT_TARGET: "10.12"

            ### UPLOAD WHEELS ###

            - name: Upload Python Async client wheels
              if: github.event_name != 'pull_request'
              uses: actions/upload-artifact@v4
              with:
                  name: wheels-${{ matrix.build.TARGET }}-async
                  path: python/glide-async/wheels
                  if-no-files-found: error

            - name: Upload Python Sync client wheels
              if: github.event_name != 'pull_request'
              uses: actions/upload-artifact@v4
              with:
                  name: wheels-${{ matrix.build.TARGET }}-sync
                  path: python/glide-sync/wheels
                  if-no-files-found: error

    build-source-dist-and-publish-to-pypi:
        name: Publish the base PyPi package
        runs-on: ubuntu-latest
        needs: publish-binaries
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set the release version
              shell: bash
              run: |
                  echo "RELEASE_VERSION=${{needs.publish-binaries.outputs.release_version}}" >> $GITHUB_ENV

            - name: Set the package version for Python
              working-directory: ./python
              run: |
                  SED_FOR_MACOS=`if [[ "${{ matrix.build.OS }}" =~ .*"macos".*  ]]; then echo "''"; fi`
                  # Set the version for the Async, Sync and Shared packages
                  # List of packages to update
                  for package in glide-async glide-sync glide-shared; do
                    echo "Patching version in $package/pyproject.toml"
                    sed -i $SED_FOR_MACOS "s/^dynamic = \[\s*\"version\"\s*\]/version = \"${{ env.RELEASE_VERSION }}\"/" "./$package/pyproject.toml"
                    # Log the updated file
                    cat "./$package/pyproject.toml"
                  done

            ### ASYNC CLIENT ###

            - name: Async client - Build source distributions
              uses: PyO3/maturin-action@v1
              with:
                  working-directory: ./python/glide-async
                  command: sdist
                  args: --out sdist

            - name: Async client - Download binaries
              uses: actions/download-artifact@v4
              with:
                  path: python/glide-async/wheels
                  merge-multiple: true

            - name: Async client - Publish binaries and source to PyPI
              if: ${{ github.event_name == 'push' || inputs.publish_async == true }}
              uses: PyO3/maturin-action@v1
              env:
                  MATURIN_PYPI_TOKEN: ${{ secrets.LIVEPYPI_API_TOKEN }}
                  MATURIN_REPOSITORY: pypi
              with:
                  command: upload
                  args: --skip-existing python/glide-async/wheels/* python/glide-async/sdist/*

            - name: Async client - Upload built wheels and sdist as GitHub artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: python-async-packages
                  path: |
                      python/glide-async/wheels/*.whl
                      python/glide-async/dist/*.tar.gz

            ### SYNC CLIENT ###

            - name: Install build and release tools
              run: |
                  python3 -m pip install --upgrade pip
                  python3 -m pip install build twine
                  python3 -m pip install -U packaging

            - name: Sync client - Build source distributions
              working-directory: ./python/glide-sync
              run: |
                  python3 -m build --sdist

            - name: Sync client - Download binaries
              uses: actions/download-artifact@v4
              with:
                  path: python/glide-sync/wheels
                  merge-multiple: true

            - name: Sync client - Publish binaries and source to PyPI
              if: ${{ github.event_name == 'push' || inputs.publish_sync == true }}
              env:
                  TWINE_USERNAME: __token__
                  TWINE_PASSWORD: ${{ secrets.LIVEPYPI_API_TOKEN }}
              run: |
                  twine upload python/glide-sync/wheels/* python/glide-sync/dist/*

            - name: Sync client - Upload built wheels and sdist as GitHub artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: python-sync-packages
                  path: |
                      python/glide-sync/wheels/*.whl
                      python/glide-sync/dist/*.tar.gz

    test-release:
        if: ${{ github.event_name == 'push' || inputs.publish_async== true || inputs.publish_sync == true }}
        name: Test the release
        runs-on: ${{ matrix.build.RUNNER }}
        needs:
            [
                build-source-dist-and-publish-to-pypi,
                publish-binaries,
                load-platform-matrix,
            ]
        strategy:
            fail-fast: false
            matrix:
                build: ${{ fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX) }}
        steps:
            - name: Setup self-hosted runner access
              if: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' }}
              run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/valkey-glide

            - name: checkout
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: 3.12

            - name: Setup PyPy for testing
              run: |
                  ARCH=$(uname -m)

                  if [[ "${{ matrix.build.NAMED_OS }}" == "linux" ]]; then
                    if [[ "$ARCH" == "x86_64" ]]; then
                      PYPY_VERSION_3_10=pypy3.10-v7.3.19-linux64
                      echo "Downloading PyPy 3.10 for x86_64"
                      curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                      sudo tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt
                      
                    elif [[ "$ARCH" == "aarch64" ]]; then
                      PYPY_VERSION_3_10=pypy3.10-v7.3.19-aarch64
                      echo "Downloading PyPy 3.10 for aarch64"
                      curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                      sudo tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt
                    fi

                    sudo chmod -R a+rx /opt/${PYPY_VERSION_3_10}/bin

                  elif [[ "${{ matrix.build.NAMED_OS }}" == "darwin" ]]; then
                    if [[ "$ARCH" == "arm64" ]]; then
                      PYPY_VERSION_3_10=pypy3.10-v7.3.19-macos_arm64
                      echo "Downloading PyPy 3.10 for arm64"
                      curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                      sudo tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt
                      
                    else
                      PYPY_VERSION_3_10=pypy3.10-v7.3.19-macos_x86_64
                      echo "Downloading PyPy 3.10 for x86_64"
                      curl -LO "https://downloads.python.org/pypy/${PYPY_VERSION_3_10}.tar.bz2"
                      sudo tar -xf "${PYPY_VERSION_3_10}.tar.bz2" --exclude="*/bin/python*" -C /opt
                    fi

                    sudo chmod -R a+rx /opt/${PYPY_VERSION_3_10}/bin
                    sudo chmod -R a+rx /opt/${PYPY_VERSION_3_10}/lib/*.dylib
                  fi

                  echo "/opt/${PYPY_VERSION_3_10}/bin" >> ${GITHUB_PATH}

            - name: Install engine
              uses: ./.github/workflows/install-engine
              with:
                  engine-version: "8.0"
                  target: ${{ matrix.build.target }}

            - name: Check if RC and set a distribution tag for the package
              shell: bash
              env:
                  RELEASE_VERSION: ${{ needs.publish-binaries.outputs.release_version }}
              run: |
                  if [[ "$RELEASE_VERSION" == *"rc"* ]]
                  then
                    echo "This is a release candidate"
                    echo "PIP_PRE=true" >> $GITHUB_ENV
                  else
                    echo "This is a stable release"
                    echo "PIP_PRE=false" >> $GITHUB_ENV
                  fi

                  # Format the version for PyPI (remove leading 'v' and convert '-rc' to 'rc')
                  PYPI_VERSION="${RELEASE_VERSION#v}"
                  PYPI_VERSION="${PYPI_VERSION//-rc/rc}"
                  echo "PYPI_VERSION=${PYPI_VERSION}" >> $GITHUB_ENV

            - name: Run the Async Client tests
              if: ${{ inputs.publish_async == true }}
              shell: bash
              working-directory: ./utils/release-candidate-testing/python
              run: |
                  python -m venv venv
                  source venv/bin/activate
                  pip install -U pip
                  if [[ "${{ env.PIP_PRE }}" == "true" ]]; then
                    pip install "valkey-glide==${{ env.PYPI_VERSION }}"
                  else
                    pip install valkey-glide
                  fi
                  python async_rc_test.py

            - name: Run the Async Clients tests with PyPy
              if: ${{ inputs.publish_async == true }}
              shell: bash
              working-directory: ./utils/release-candidate-testing/python
              run: |
                  pypy3 -m venv pypy_venv
                  source pypy_venv/bin/activate
                  pip install -U pip
                  if [[ "${{ env.PIP_PRE }}" == "true" ]]; then
                    pip install "valkey-glide==${{ env.PYPI_VERSION }}"
                  else
                    pip install valkey-glide
                  fi
                  pypy3 async_rc_test.py

            - name: Run the Sync Client tests
              if: ${{ inputs.publish_sync == true }}
              shell: bash
              working-directory: ./utils/release-candidate-testing/python
              run: |
                  python -m venv venv
                  source venv/bin/activate
                  pip install -U pip
                  if [[ "${{ env.PIP_PRE }}" == "true" ]]; then
                    pip install "valkey-glide-sync==${{ env.PYPI_VERSION }}"
                  else
                    pip install valkey-glide-sync
                  fi
                  python sync_rc_test.py

            - name: Run the Sync Client tests with PyPy
              if: ${{ inputs.publish_sync == true }}
              shell: bash
              working-directory: ./utils/release-candidate-testing/python
              run: |
                  pypy3 -m venv pypy_venv
                  source pypy_venv/bin/activate
                  pip install -U pip
                  if [[ "${{ env.PIP_PRE }}" == "true" ]]; then
                    pip install "valkey-glide-sync==${{ env.PYPI_VERSION }}"
                  else
                    pip install valkey-glide-sync
                  fi
                  pypy3 sync_rc_test.py

            # Reset the repository to make sure we get the clean checkout of the action later in other actions.
            # It is not required since in other actions we are cleaning before the action, but it is a good practice to do it here as well.
            - name: Reset repository
              if: ${{ contains(matrix.build.RUNNER, 'self-hosted') }}
              shell: bash
              run: |
                  git reset --hard
                  git clean -xdf
