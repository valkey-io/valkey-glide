name: Java CI

on:
    push:
        branches: ["main"]
        paths:
            - glide-core/src/**
            - submodules/**
            - java/**
            - .github/workflows/java.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    pull_request:
        paths:
            - glide-core/src/**
            - submodules/**
            - java/**
            - .github/workflows/java.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    workflow_dispatch:
        inputs:
            full-matrix:
                description: "Run the full matrix"
                required: false
                default: "false"

    schedule:
        - cron: "0 0 * * *"

concurrency:
    group: java-${{ github.head_ref || github.ref }}
    cancel-in-progress: true

jobs:
    get-matrices:
        runs-on: ubuntu-latest
        # Avoid running on schedule for forks
        if: (github.repository_owner == 'valkey-io' || github.event_name != 'schedule')
        outputs:
            engine-matrix-output: ${{ steps.get-matrices.outputs.engine-matrix-output }}
            host-matrix-output: ${{ steps.get-matrices.outputs.host-matrix-output }}
            version-matrix-output: ${{ steps.get-matrices.outputs.version-matrix-output }}
        steps:
            - uses: actions/checkout@v4
            - id: get-matrices
              uses: ./.github/workflows/create-test-matrices
              with:
                  language-name: java
                  dispatch-run-full-matrix: ${{ github.event.inputs.full-matrix || 'false' }}

    test-java:
        needs: get-matrices
        timeout-minutes: 35
        strategy:
            # Run all jobs
            fail-fast: false
            matrix:
                java: ${{ fromJson(needs.get-matrices.outputs.version-matrix-output) }}
                engine: ${{ fromJson(needs.get-matrices.outputs.engine-matrix-output) }}
                host: ${{ fromJson(needs.get-matrices.outputs.host-matrix-output).include }}
        runs-on: ${{ matrix.host.RUNNER }}

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - uses: gradle/actions/wrapper-validation@v3

            - name: Set up JDK ${{ matrix.java }}
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: ${{ matrix.java }}

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: ${{ matrix.host.OS }}
                  target: ${{ matrix.host.TARGET }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "26.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Build java client
              working-directory: java
              run: ./gradlew --continue build -x javadoc

            - name: Ensure no skipped files by linter
              working-directory: java
              run: ./gradlew spotlessDiagnose | grep 'All formatters are well behaved for all files'

            - uses: ./.github/workflows/test-benchmark
              with:
                  language-flag: -java

            - name: Upload test & spotbugs reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-java-${{ matrix.java }}-${{ matrix.engine.type }}-${{ matrix.engine.version }}-${{ matrix.host.RUNNER }}
                  path: |
                      java/client/build/reports/**
                      java/integTest/build/reports/**
                      utils/clusters/**
                      benchmarks/results/**
                      java/client/build/reports/spotbugs/**

    build-amazonlinux-latest:
        if: (github.repository_owner == 'valkey-io' && github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' && github.event.inputs.full-matrix == 'true')
        needs: get-matrices
        strategy:
            # Run all jobs
            fail-fast: false
            matrix:
                java: ${{ fromJson(needs.get-matrices.outputs.version-matrix-output) }}
                engine: ${{ fromJson(needs.get-matrices.outputs.engine-matrix-output) }}
        runs-on: ubuntu-latest
        container: amazonlinux:latest
        timeout-minutes: 35
        steps:
            - name: Install git
              run: |
                  yum -y remove git
                  yum -y remove git-*
                  yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
                  yum update
                  yum install -y git
                  git --version

            - uses: actions/checkout@v4

            - name: Checkout submodules
              run: |
                  git config --global --add safe.directory "$GITHUB_WORKSPACE"
                  git submodule update --init --recursive

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: "amazon-linux"
                  target: "x86_64-unknown-linux-gnu"
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "26.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Install Java
              run: |
                  yum install -y java-${{ matrix.java }}-amazon-corretto-devel.x86_64

            - name: Build java wrapper
              working-directory: java
              run: ./gradlew --continue build -x javadoc

            - name: Upload test & spotbugs reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-${{ matrix.java }}-${{ matrix.engine }}-amazon-linux
                  path: |
                      java/client/build/reports/**
                      java/integTest/build/reports/**
                      java/client/build/reports/spotbugs/**

    lint-rust:
        timeout-minutes: 15
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - uses: ./.github/workflows/lint-rust
              with:
                  cargo-toml-folder: ./java
              name: lint java rust

    test-modules:
        if: github.event.pull_request.head.repo.owner.login == 'valkey-io'
        environment: AWS_ACTIONS
        name: Running Module Tests
        runs-on: [self-hosted, linux, ARM64]
        timeout-minutes: 15
        steps:
            - name: Setup self-hosted runner access
              run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/valkey-glide

            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Set up JDK
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: 17

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "26.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Test java wrapper
              working-directory: java
              run: ./gradlew :integTest:modulesTest -Dcluster-endpoints=${{ secrets.MEMDB_MODULES_ENDPOINT }} -Dtls=true

            - name: Upload test reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-modules
                  path: |
                      java/integTest/build/reports/**
