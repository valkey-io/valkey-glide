name: Java CI

on:
    push:
        branches:
            - main
            - release-*
            - v*
        paths:
            - glide-core/src/**
            - glide-core/redis-rs/redis/src/**
            - java/**
            - utils/cluster_manager.py
            - .github/workflows/java.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-engine/action.yml
            - .github/workflows/create-test-matrices/action.yml
            - .github/json_matrices/**

    pull_request:
        paths:
            - glide-core/src/**
            - glide-core/redis-rs/redis/src/**
            - java/**
            - utils/cluster_manager.py
            - .github/workflows/java.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-engine/action.yml
            - .github/workflows/create-test-matrices/action.yml
            - .github/json_matrices/**

    workflow_dispatch:
        inputs:
            full-matrix:
                description: "Run the full engine, host, and language version matrix"
                type: boolean
                default: false
            name:
                required: false
                type: string
                description: "(Optional) Test run name"

    workflow_call:

concurrency:
    group: java-${{ github.head_ref || github.ref }}-${{ toJson(inputs) }}
    cancel-in-progress: true

run-name:
    # Set custom name if job is started manually and name is given
    ${{ github.event_name == 'workflow_dispatch' && (inputs.name == '' && format('{0} @ {1} {2}', github.ref_name, github.sha, toJson(inputs)) || inputs.name) || '' }}

jobs:
    get-matrices:
        runs-on: ubuntu-latest
        outputs:
            engine-matrix-output: ${{ steps.get-matrices.outputs.engine-matrix-output }}
            host-matrix-output: ${{ steps.get-matrices.outputs.host-matrix-output }}
            version-matrix-output: ${{ steps.get-matrices.outputs.version-matrix-output }}
        steps:
            - uses: actions/checkout@v4
            - id: get-matrices
              uses: ./.github/workflows/create-test-matrices
              with:
                  language-name: java
                  # Run full test matrix if job started by cron or it was explictly specified by a person who triggered the workflow
                  run-full-matrix: ${{ github.event.inputs.full-matrix == 'true' || github.event_name == 'schedule' }}

    test-java:
        needs: get-matrices
        timeout-minutes: 35
        strategy:
            fail-fast: false
            matrix:
                java: ${{ fromJson(needs.get-matrices.outputs.version-matrix-output) }}
                engine: ${{ fromJson(needs.get-matrices.outputs.engine-matrix-output) }}
                host: ${{ fromJson(needs.get-matrices.outputs.host-matrix-output) }}
        runs-on: ${{ matrix.host.RUNNER }}

        steps:
            - uses: actions/checkout@v4

            - uses: gradle/actions/wrapper-validation@v3

            - name: Set up JDK ${{ matrix.java }}
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: ${{ matrix.java }}

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: ${{ matrix.host.OS }}
                  target: ${{ matrix.host.TARGET }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "29.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Build java client
              working-directory: java
              run: ./gradlew --continue build -x javadoc

            - name: Ensure no skipped files by linter
              working-directory: java
              run: ./gradlew spotlessDiagnose | grep 'All formatters are well behaved for all files'

            - uses: ./.github/workflows/test-benchmark
              if: ${{ matrix.engine.version == '8.0' && matrix.host.RUNNER == 'ubuntu-latest' && matrix.java == '17' }}
              with:
                  language-flag: -java

            - name: Upload test & spotbugs reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-java-${{ matrix.java }}-${{ matrix.engine.type }}-${{ matrix.engine.version }}-${{ matrix.host.RUNNER }}
                  path: |
                      java/client/build/reports/**
                      java/integTest/build/reports/**
                      utils/clusters/**
                      benchmarks/results/**
                      java/client/build/reports/spotbugs/**

    get-containers:
        runs-on: ubuntu-latest
        if: ${{ github.event.inputs.full-matrix == 'true' || github.event_name == 'schedule' }}
        outputs:
            engine-matrix-output: ${{ steps.get-matrices.outputs.engine-matrix-output }}
            host-matrix-output: ${{ steps.get-matrices.outputs.host-matrix-output }}
            version-matrix-output: ${{ steps.get-matrices.outputs.version-matrix-output }}

        steps:
            - uses: actions/checkout@v4
            - id: get-matrices
              uses: ./.github/workflows/create-test-matrices
              with:
                  language-name: java
                  run-full-matrix: true
                  containers: true

    test-java-container:
        runs-on: ${{ matrix.host.RUNNER }}
        needs: [get-containers]
        timeout-minutes: 25
        strategy:
            fail-fast: false
            matrix:
                java: ${{ fromJson(needs.get-containers.outputs.version-matrix-output) }}
                engine: ${{ fromJson(needs.get-containers.outputs.engine-matrix-output) }}
                host: ${{ fromJson(needs.get-containers.outputs.host-matrix-output) }}
        container:
            image: ${{ matrix.host.IMAGE }}
            options: ${{ join(' -q ', matrix.host.CONTAINER_OPTIONS) }} # adding `-q` to bypass empty options
        steps:
            - name: Install git
              run: |
                  yum update
                  yum install -y git tar java-${{ matrix.java }}-amazon-corretto-devel.x86_64
                  echo IMAGE=amazonlinux:latest | sed -r 's/:/-/g' >> $GITHUB_ENV
            # Replace `:` in the variable otherwise it can't be used in `upload-artifact`
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: ${{ matrix.host.OS }}
                  target: ${{ matrix.host.TARGET }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "29.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Build java wrapper
              working-directory: java
              run: ./gradlew --continue build -x javadoc

            - name: Upload test & spotbugs reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-java-${{ matrix.java }}-${{ matrix.engine.type }}-${{ matrix.engine.version }}-${{ env.IMAGE }}-${{ matrix.host.ARCH }}
                  path: |
                      java/client/build/reports/**
                      java/integTest/build/reports/**
                      java/client/build/reports/spotbugs/**

    lint-rust:
        timeout-minutes: 15
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: ./.github/workflows/lint-rust
              with:
                  cargo-toml-folder: java
                  github-token: ${{ secrets.GITHUB_TOKEN }}
              name: lint java rust

    test-modules:
        if: (github.repository_owner == 'valkey-io' && github.event_name == 'workflow_dispatch') || github.event.pull_request.head.repo.owner.login == 'valkey-io'
        environment: AWS_ACTIONS
        name: Modules Tests
        runs-on: [self-hosted, linux, ARM64, persistent]
        timeout-minutes: 15
        steps:
            - name: Setup self-hosted runner access
              run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/valkey-glide

            - uses: actions/checkout@v4

            - name: Set up JDK
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: 17

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "29.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Test java wrapper
              working-directory: java
              run: ./gradlew :integTest:modulesTest -Dcluster-endpoints=${{ secrets.MEMDB_MODULES_ENDPOINT }} -Dtls=true

            - name: Upload test reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-modules
                  path: |
                      java/integTest/build/reports/**
