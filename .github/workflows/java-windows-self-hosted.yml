name: Java Tests (Windows Self-Hosted)

on:
    workflow_dispatch:
        inputs:
            java-version:
                description: "Java version to test"
                required: false
                default: "17"
                type: choice
                options:
                    - "11"
                    - "17"
            use-remote-cluster:
                description: "Use remote Linux cluster"
                required: false
                default: true
                type: boolean

permissions: {}

jobs:
    test-windows-self-hosted:
        name: Java ${{ github.event.inputs.java-version }} on Windows Self-Hosted
        runs-on: [self-hosted, windows, valkey-runner] # Target Windows runner
        timeout-minutes: 45

        steps:
            - uses: actions/checkout@v4

            - name: Set up JDK ${{ github.event.inputs.java-version }}
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: ${{ github.event.inputs.java-version }}

            - name: Install protoc (protobuf)
              if: runner.os != 'Windows'
              uses: arduino/setup-protoc@v3
              with:
                  version: "29.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Install protoc (Windows)
              if: runner.os == 'Windows'
              shell: powershell
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Check if protoc is already available
                  if (Get-Command protoc -ErrorAction SilentlyContinue) {
                      Write-Host "protoc already installed: $(protoc --version)"
                      exit 0
                  }

                  Write-Host "Installing protoc on Windows..."

                  # Download protoc with authentication
                  $url = "https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-win64.zip"
                  $zipPath = "$env:TEMP\protoc.zip"
                  $extractPath = "$env:TEMP\protoc"

                  # Clean up extraction directory if it exists
                  if (Test-Path $extractPath) {
                      Remove-Item -Recurse -Force $extractPath
                  }

                  # Add authentication header if token is available
                  $headers = @{}
                  if ($env:GITHUB_TOKEN) {
                      $headers["Authorization"] = "Bearer $env:GITHUB_TOKEN"
                  }

                  Invoke-WebRequest -Uri $url -OutFile $zipPath -Headers $headers

                  # Extract using .NET
                  Add-Type -AssemblyName System.IO.Compression.FileSystem
                  [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractPath)

                  # Add to PATH
                  $protocPath = "$extractPath\bin"
                  echo "$protocPath" >> $env:GITHUB_PATH

                  # Verify installation
                  & "$protocPath\protoc.exe" --version

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: windows
                  target: x86_64-pc-windows-msvc
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: "" # Skip Valkey installation on Windows
                  language: java

            - name: Configure remote Valkey cluster
              if: ${{ github.event.inputs.use-remote-cluster == 'true' }}
              shell: powershell
              run: |
                  # Test if remote cluster is configured
                  if ("${{ vars.VALKEY_REMOTE_HOST }}" -eq "") {
                      Write-Host "⚠️ VALKEY_REMOTE_HOST not configured - will use local cluster"
                      exit 0
                  }

                  Write-Host "[CONFIG] Configuring remote Valkey cluster access..."
                  echo "VALKEY_REMOTE_HOST=${{ vars.VALKEY_REMOTE_HOST }}" >> $env:GITHUB_ENV
                  Write-Host "Remote Valkey configured: ${{ vars.VALKEY_REMOTE_HOST }}"

            - name: Verify build environment
              shell: powershell
              run: |
                  Write-Host "Verifying build environment..."

                  # Check Java
                  Write-Host "Java version:"
                  java -version

                  # Check protoc
                  Write-Host "Protoc version:"
                  protoc --version

                  # Check Rust
                  Write-Host "Rust version:"
                  rustc --version
                  cargo --version

                  # Check MSVC tools
                  Write-Host "Checking MSVC tools..."
                  try {
                      $linkPath = Get-Command link.exe -ErrorAction Stop
                      Write-Host "✓ link.exe found at: $($linkPath.Source)"
                  } catch {
                      Write-Host "✗ link.exe not found - this will cause Rust compilation to fail"
                      Write-Host "Checking PATH for Visual Studio components..."
                      $pathEntries = $env:PATH -split ';'
                      $vsEntries = $pathEntries | Where-Object { $_ -like '*Visual Studio*' -or $_ -like '*VC*' -or $_ -like '*MSVC*' }
                      if ($vsEntries.Count -gt 0) {
                          Write-Host "Found Visual Studio paths:"
                          foreach ($entry in $vsEntries) {
                              Write-Host "  $entry"
                          }
                      } else {
                          Write-Host "No Visual Studio paths found in PATH"
                      }
                      throw "MSVC tools not available"
                  }

                  Write-Host "Build environment verification complete"

            - uses: actions/cache@v4
              with:
                  path: |
                      .gradle/caches
                      .gradle/wrapper
                  key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
                  restore-keys: |
                      ${{ runner.os }}-gradle-

            - name: Build Java client
              working-directory: java
              shell: powershell
              run: .\gradlew.bat --build-cache --continue build -x javadoc

            - name: Run integration tests
              working-directory: java
              shell: powershell
              run: .\gradlew.bat --build-cache :integTest:test

            - name: Upload test reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: java-test-reports-windows-self-hosted
                  path: |
                      java/client/build/reports/**
                      java/integTest/build/reports/**
