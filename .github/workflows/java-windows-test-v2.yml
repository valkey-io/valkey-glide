name: Java Windows Test v2

on:
  workflow_dispatch:
  push:
    branches:
      - ci-cd-java-windows-support
    paths:
      - '.github/workflows/java-windows-test-v2.yml'
      - 'java/**'

jobs:
  test-windows-build:
    name: Windows Build Test
    runs-on: windows-2022

    strategy:
      matrix:
        java: ['17']
        rust-target: ['x86_64-pc-windows-msvc', 'x86_64-pc-windows-gnu']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "29.1"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup MSYS2 (for GNU target)
        if: matrix.rust-target == 'x86_64-pc-windows-gnu'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make

      - name: Setup MSVC (for MSVC target)
        if: matrix.rust-target == 'x86_64-pc-windows-msvc'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install zig (for cross-compilation support)
        shell: pwsh
        run: |
          pip install ziglang
          cargo install --locked cargo-zigbuild

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Download and setup Redis Windows
        shell: pwsh
        run: |
          Write-Host "Setting up Redis for Windows..."

          # Try to download newer Redis fork first
          $modernUrl = "https://github.com/tporadowski/redis/releases/download/v5.0.14.1/Redis-x64-5.0.14.1.zip"
          $legacyUrl = "https://github.com/microsoftarchive/redis/releases/download/win-3.0.504/Redis-x64-3.0.504.zip"

          try {
            Write-Host "Trying Redis 5.0.14..."
            Invoke-WebRequest -Uri $modernUrl -OutFile "redis.zip" -ErrorAction Stop
            $redisVersion = "5.0.14"
          } catch {
            Write-Host "Falling back to Redis 3.0.504..."
            Invoke-WebRequest -Uri $legacyUrl -OutFile "redis.zip"
            $redisVersion = "3.0.504"
          }

          Expand-Archive -Path "redis.zip" -DestinationPath "C:\redis" -Force

          # Find the actual redis-server.exe
          $redisExe = Get-ChildItem -Path "C:\redis" -Recurse -Filter "redis-server.exe" | Select-Object -First 1
          if ($redisExe) {
            Write-Host "Found Redis at: $($redisExe.FullName)"
            Write-Host "Redis version: $redisVersion"

            # Add to PATH
            $redisPath = $redisExe.DirectoryName
            echo "$redisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            echo "REDIS_PATH=$redisPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            Write-Host "ERROR: Could not find redis-server.exe!"
            exit 1
          }

      - name: Start Redis server
        shell: pwsh
        run: |
          $redisPath = $env:REDIS_PATH
          $redisExe = Join-Path $redisPath "redis-server.exe"

          Write-Host "Starting Redis from: $redisExe"

          # Create minimal config
          $config = @"
          port 6379
          bind 127.0.0.1
          protected-mode no
          save ""
          "@
          $config | Out-File -FilePath "redis.conf" -Encoding ascii

          # Start Redis
          $proc = Start-Process -FilePath $redisExe -ArgumentList "redis.conf" -PassThru -WindowStyle Hidden
          Write-Host "Redis started with PID: $($proc.Id)"

          Start-Sleep -Seconds 3

          # Test connection
          $redisCli = Join-Path $redisPath "redis-cli.exe"
          & $redisCli ping
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to connect to Redis!"
            exit 1
          }
          Write-Host "Redis is running and responding to ping!"

      - name: Build Java client
        shell: cmd
        run: |
          cd java
          echo Building with target: ${{ matrix.rust-target }}
          if "${{ matrix.rust-target }}" == "x86_64-pc-windows-gnu" (
            gradlew.bat --info --build-cache :client:build -x javadoc -x test -Ptarget=${{ matrix.rust-target }}
          ) else (
            gradlew.bat --info --build-cache :client:build -x javadoc -x test
          )

      - name: Check built artifacts
        shell: pwsh
        run: |
          Write-Host "=== Checking build artifacts ==="

          # Check for DLL
          $dlls = Get-ChildItem -Path "java" -Recurse -Filter "*.dll" -ErrorAction SilentlyContinue
          if ($dlls) {
            Write-Host "Found DLLs:"
            foreach ($dll in $dlls) {
              Write-Host "  - $($dll.FullName)"
              Write-Host "    Size: $($dll.Length) bytes"
            }
          } else {
            Write-Host "WARNING: No DLL files found!"
          }

          # Check for JAR
          $jars = Get-ChildItem -Path "java\client\build\libs" -Filter "*.jar" -ErrorAction SilentlyContinue
          if ($jars) {
            Write-Host "Found JARs:"
            foreach ($jar in $jars) {
              Write-Host "  - $($jar.Name)"
              Write-Host "    Size: $($jar.Length) bytes"
            }
          } else {
            Write-Host "WARNING: No JAR files found!"
          }

      - name: Run unit tests
        shell: cmd
        run: |
          cd java
          echo Running unit tests...
          gradlew.bat --info :client:test --tests "*ConfigurationTest*" --tests "*BaseClientTest*" -x javadoc

      - name: Publish to local Maven (for integration tests)
        shell: cmd
        run: |
          cd java
          echo Publishing to local Maven...
          gradlew.bat :client:publishToMavenLocal

      - name: Run integration tests
        shell: cmd
        run: |
          cd java
          echo Running integration tests with Redis at localhost:6379...
          gradlew.bat --info :integTest:test --tests "*ConnectionTests*" --tests "*PingTests*" -Dstandalone-endpoints=localhost:6379

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-test-reports-${{ matrix.rust-target }}
          path: |
            java/client/build/reports/**
            java/integTest/build/reports/**
            java/client/build/test-results/**
            java/integTest/build/test-results/**

      - name: Upload built libraries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-libraries-${{ matrix.rust-target }}
          path: |
            java/target/**/*.dll
            java/client/build/libs/*.jar

      - name: Summary
        if: always()
        shell: pwsh
        run: |
          Write-Host "=== Build Summary ==="
          Write-Host "Java: ${{ matrix.java }}"
          Write-Host "Rust target: ${{ matrix.rust-target }}"
          Write-Host "Redis: $env:REDIS_PATH"

          # Check if tests passed
          if (Test-Path "java\client\build\test-results\test\*.xml") {
            Write-Host "Unit test results found"
          }
          if (Test-Path "java\integTest\build\test-results\test\*.xml") {
            Write-Host "Integration test results found"
          }