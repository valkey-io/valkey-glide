name: NPM - Continuous Deployment

on:
    pull_request:
        paths:
            - .github/workflows/npm-cd.yml
            - .github/workflows/build-node-wrapper/action.yml
            - .github/workflows/install-rust-and-protoc/action.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/install-engine/action.yml
            - .github/json_matrices/**
            - .github/workflows/create-test-matrices/action.yml
    push:
        tags:
            - "v*.*.*"
    workflow_dispatch:
        inputs:
            version:
                description: "The release version of GLIDE, formatted as *.*.* or *.*.*-rc*"
                required: true
            publish:
                description: "Publish"
                required: true
                type: boolean
                default: false

concurrency:
    group: node-cd-${{ github.head_ref || github.ref }}-${{ toJson(inputs) }}
    cancel-in-progress: true

permissions:
    id-token: write

jobs:
    determine-version:
        name: Determine Release Version and NPM Tag
        runs-on: ubuntu-latest
        outputs:
            release_version: ${{ steps.set-version.outputs.release_version }}
            npm_tag: ${{ steps.set-version.outputs.npm_tag }}
        steps:
            - name: Set version and tag
              id: set-version
              shell: bash
              run: |
                  R_VERSION=""
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    R_VERSION="0.0.0-pr" # Placeholder for PRs, adjust if needed
                  elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    R_VERSION="${{ github.event.inputs.version }}"
                  else
                    R_VERSION="${GITHUB_REF#refs/tags/v}"
                  fi
                  echo "release_version=${R_VERSION}" >> $GITHUB_OUTPUT

                  N_TAG="latest"
                  if [[ "${R_VERSION}" == *"rc"* ]]; then
                    N_TAG="next"
                  fi
                  echo "npm_tag=${N_TAG}" >> $GITHUB_OUTPUT

                  # Also set to GITHUB_ENV for immediate use if any step in this job needed it
                  echo "RELEASE_VERSION=${R_VERSION}" >> $GITHUB_ENV
                  echo "NPM_TAG=${N_TAG}" >> $GITHUB_ENV

    load-platform-matrix:
        runs-on: ubuntu-latest
        outputs:
            PLATFORM_MATRIX: ${{ steps.load-platform-matrix.outputs.PLATFORM_MATRIX }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: load-platform-matrix
              id: load-platform-matrix
              shell: bash
              run: |
                  # Filter entries with npm in PACKAGE_MANAGERS
                  export PLATFORM_MATRIX=$(jq 'map(
                      select(.PACKAGE_MANAGERS != null and (.PACKAGE_MANAGERS | contains(["npm"])))
                  )' < .github/json_matrices/build-matrix.json | jq -c .)
                  echo "PLATFORM_MATRIX=${PLATFORM_MATRIX}" >> $GITHUB_OUTPUT

    build-binaries:
        needs: [load-platform-matrix, determine-version]
        name: Build native binaries
        runs-on: ${{ matrix.build.CD_RUNNER || matrix.build.BUILD_RUNNER || matrix.build.RUNNER }}
        container:
            image: ${{ matrix.build.IMAGE || '' }}
            options: ${{ matrix.build.CONTAINER_OPTIONS || 'none'}}
        strategy:
            fail-fast: false
            matrix:
                build: ${{fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX)}}
        steps:
            # For MUSL on X64 we need to install git since we use the checkout action
            - name: Install git for musl
              if: ${{ contains(matrix.build.TARGET, 'x86_64-unknown-linux-musl')}}
              run: |
                  apk update
                  apk add git

            - name: Checkout
              if: ${{ matrix.build.TARGET != 'aarch64-unknown-linux-musl' }}
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup for musl
              if: ${{ contains(matrix.build.TARGET, 'musl')}}
              uses: ./.github/workflows/setup-musl-on-linux
              with:
                  npm-scope: ${{ vars.NPM_SCOPE }}
                  npm-auth-token: ${{ secrets.NPM_AUTH_TOKEN }}
                  arch: ${{ matrix.build.ARCH }}

            - name: Setup environment variables
              shell: bash
              run: |
                  # Set RELEASE_VERSION and NPM_TAG from the determine-version job outputs
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

                  # Determine if the target is musl and set PLATFORM_ID (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    MUSL_FLAG="-musl"
                  else
                    MUSL_FLAG=""
                  fi
                  PLATFORM_ID="${{ matrix.build.NAMED_OS }}${MUSL_FLAG}-${{ matrix.build.ARCH }}"
                  echo "PLATFORM_ID=${PLATFORM_ID}" >> $GITHUB_ENV

                  # Determine build type (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"apple-darwin"* ]]; then
                    BUILD_TYPE="mac"
                  elif [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    BUILD_TYPE="musl"
                  else
                    BUILD_TYPE="gnu"
                  fi
                  echo "BUILD_TYPE=${BUILD_TYPE}" >> $GITHUB_ENV

            - name: Setup node
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  architecture: ${{ matrix.build.ARCH }}
                  scope: "${{ vars.NPM_SCOPE }}"
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Setup node for building
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              working-directory: ./node
              run: |
                  npm config set registry https://registry.npmjs.org/
                  npm config set '//registry.npmjs.org/:_authToken' ${{ secrets.NPM_AUTH_TOKEN }}
                  npm config set scope ${{ vars.NPM_SCOPE }}

            - name: Update package version in config.toml
              uses: ./.github/workflows/update-glide-version
              with:
                  folder_path: "${{ github.workspace }}/node/rust-client/.cargo"
                  named_os: ${{ matrix.build.NAMED_OS }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "25.1"
                  repo-token: ${{ inputs.github-token }}

            # Install Zig for cross-compilation
            - uses: mlugg/setup-zig@v2
              with:
                  version: latest

            # Build native modules using appropriate script based on platform
            - name: Build native modules
              shell: bash
              working-directory: ./node/rust-client
              env:
                  TARGET: ${{ matrix.build.TARGET }}
              run: |
                  # Install build dependencies
                  npm install

                  # Select appropriate build script based on platform
                  if [[ "$TARGET" == *"apple-darwin"* ]]; then
                    echo "Building for macOS ($TARGET)..."
                    npm run build:release:mac
                    
                    # For macOS, if we're on ARM, also build for x86_64
                    if [[ "$TARGET" == "aarch64-apple-darwin" ]]; then
                      echo "Building universal binary for macOS..."
                      CARGO_BUILD_TARGET=x86_64-apple-darwin npm run build:release:mac
                    fi
                    
                  elif [[ "$TARGET" == *"-musl"* ]]; then
                    echo "Building for musl ($TARGET)..."
                    npm run build:release:musl
                  else
                    echo "Building for gnu ($TARGET)..."
                    npm run build:release:gnu
                  fi

                  # Verify the build output
                  ls -la *.node

            - name: Upload node binaries artifact
              uses: actions/upload-artifact@v4
              with:
                  name: node-binaries-${{ env.PLATFORM_ID }}
                  path: |
                      node/rust-client/glide-rs.*.node
                      node/src/native.js
                      node/src/native.d.ts
                  if-no-files-found: error

    organize-artifacts:
        needs: [build-binaries, load-platform-matrix, determine-version]
        name: Organize artifacts for publishing
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: "true"

            - name: Set versioning environment variables from determine-version job
              shell: bash
              run: |
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

            - name: Install napi-rs CLI
              shell: bash
              run: |
                  npm install -g @napi-rs/cli

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  pattern: node-binaries-*
                  path: ./artifacts

            - name: List downloaded artifacts
              shell: bash
              run: |
                  find ./artifacts -type f -name "*.node" | sort

            - name: Organize artifacts with napi-rs
              shell: bash
              run: |
                  # Create artifacts directory
                  mkdir -p ./organized-artifacts

                  # Copy the .node files to platform-specific directories
                  # The napi artifacts command will organize them under npm/ directory
                  napi artifacts --dir ./artifacts --npm-dir ./node/npm

                  # Check the organized files
                  find ./node/npm -type f | sort

            - name: Upload organized artifacts for reference
              uses: actions/upload-artifact@v4
              with:
                  name: organized-node-artifacts
                  path: ./node/npm

    publish-platform-packages:
        name: Publish platform-specific NPM packages
        needs: [organize-artifacts, determine-version]
        if: github.event_name == 'push' || github.event.inputs.publish == true
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install node
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  scope: "${{ vars.NPM_SCOPE }}"
                  always-auth: true

            - name: Set versioning environment variables from determine-version job
              shell: bash
              run: |
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

            - name: Check that the release version don't have typo in it
              if: ${{ github.event_name != 'pull_request' && contains(env.RELEASE_VERSION, '-') && !contains(env.RELEASE_VERSION, 'rc') }}
              run: |
                  echo "The release version "${RELEASE_VERSION}" contains a typo, please fix it"
                  echo "The release version should be in the format v{major-version}.{minor-version}.{patch-version}-rc{release-candidate-number} when it a release candidate or v{major-version}.{minor-version}.{patch-version} in a stable release."
                  exit 1

            - name: Download organized artifacts
              uses: actions/download-artifact@v4
              with:
                  name: organized-node-artifacts
                  path: ./node/npm

            - name: Publish platform-specific packages
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node
              run: |
                  # Set npm auth token
                  npm config set registry https://registry.npmjs.org/
                  npm config set '//registry.npmjs.org/:_authToken' ${{ secrets.NPM_AUTH_TOKEN }}
                  npm config set scope ${{ vars.NPM_SCOPE }}

                  # Find all platform package directories and publish them
                  for pkg_dir in npm/*/; do
                    # Skip the glide directory (TypeScript-only package)
                    if [[ "${pkg_dir}" == "npm/glide/" ]]; then
                      continue
                    fi

                    echo "Publishing package in ${pkg_dir}..."
                    cd "${pkg_dir}"

                    # Replace version placeholder
                    sed -i "s/\$RELEASE_VERSION/${RELEASE_VERSION}/g" package.json

                    set +e  # Disable immediate exit on non-zero exit codes
                    # Copy readme and license files
                    cp ../README.md ./README.md
                    cp ../LICENSE ./LICENSE
                    # Publish the package
                    npm_publish_err=$(npm publish --tag "${NPM_TAG}" --access public --loglevel=error 2>&1 || true)
                    publish_exit_code=$?

                    # Re-enable immediate exit
                    set -e

                    if [[ $publish_exit_code -eq 0 ]]; then
                      echo "Package published successfully."
                    elif echo "$npm_publish_err" | grep -q "You cannot publish over the previously published versions"; then
                      echo "Skipping publishing, package already published."
                    else
                      echo "Failed to publish with error: $npm_publish_err"
                      exit 1
                    fi
                  done
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

    publish-base-to-npm:
        name: Publish the base TypeScript package
        needs: [publish-platform-packages, determine-version]
        if: github.event_name == 'push' || github.event.inputs.publish == true
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: "true"

            - name: Install node
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  scope: "${{ vars.NPM_SCOPE }}"
                  always-auth: true

            - name: Set versioning environment variables from determine-version job
              shell: bash
              run: |
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

            - name: Create directory for TypeScript package
              shell: bash
              run: |
                  mkdir -p ./node/npm/glide

            - name: Copy package.json and other files to npm/glide
              shell: bash
              run: |
                  # Copy the main package.json
                  cp ./node/package.json ./node/npm/glide/

                  # Copy the source files
                  mkdir -p ./node/npm/glide/build-ts
                  cp -r ./node/build-ts/* ./node/npm/glide/build-ts/

                  # Copy the README
                  cp ./node/README.md ./node/npm/glide/

                  # Create index.ts loader
                  cat > ./node/npm/glide/index.ts << 'EOL'
                  /**
                   * This is the entry point for the TypeScript-only package.
                   * It imports the main package and re-exports everything.
                   */
                  import * as glide from './build-ts/index';
                  export = glide;
                  EOL

            - name: Prepare package.json with napi prepublish
              shell: bash
              working-directory: ./node/npm/glide
              run: |
                  # Install napi-rs CLI
                  npm install -g @napi-rs/cli

                  # Update version in package.json using RELEASE_VERSION from job environment
                  jq ".version = \"${RELEASE_VERSION}\"" package.json > package.json.tmp && mv package.json.tmp package.json

                  # Run napi prepublish to add optionalDependencies for platform packages
                  # It uses the 'name' (e.g., @valkey/valkey-glide) and 'napi' section from package.json
                  napi prepublish

                  # Check the result
                  echo "--- package.json after napi prepublish ---"
                  cat package.json
                  echo "-----------------------------------------"

            - name: Publish the base package
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node/npm/glide
              run: |
                  # Install dependencies
                  npm install

                  # Run the build if needed
                  if [[ -f "package.json" && -n "$(jq -r '.scripts.build // ""' package.json)" ]]; then
                    npm run build
                  fi

                  # Publish the package
                  npm publish --access public --tag ${{ env.NPM_TAG }} --ignore-scripts
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

    test-release:
        if: ${{ github.event_name == 'push' || inputs.publish == true }}
        name: Test the release
        needs: [publish-base-to-npm, load-platform-matrix, determine-version]
        runs-on: ${{ matrix.build.CD_RUNNER || matrix.build.RUNNER }}
        container:
            image: ${{ matrix.build.IMAGE || '' }}
            options: ${{ matrix.build.CONTAINER_OPTIONS || 'none'}}
        strategy:
            fail-fast: false
            matrix:
                build: ${{fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX)}}
        steps:
            - name: Setup self-hosted runner access
              if: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' }}
              run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/valkey-glide

            - name: Install redis and git for alpine
              if: ${{ contains(matrix.build.TARGET, 'musl') }}
              run: |
                  apk update
                  apk add git redis
                  node -v

            - name: Install Python for ubuntu
              if: ${{ contains(matrix.build.TARGET, 'linux-gnu') }}
              run: |
                  sudo apt update
                  sudo apt install python3

            - name: Checkout
              if: ${{  matrix.build.TARGET != 'aarch64-unknown-linux-musl'}}
              uses: actions/checkout@v4

            - name: Setup for musl
              if: ${{ contains(matrix.build.TARGET, 'musl') }}
              uses: ./.github/workflows/setup-musl-on-linux
              with:
                  npm-scope: ${{ vars.NPM_SCOPE }}
                  npm-auth-token: ${{ secrets.NPM_AUTH_TOKEN }}
                  arch: ${{ matrix.build.ARCH }}

            - name: Install engine
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              uses: ./.github/workflows/install-engine
              with:
                  engine-version: "8.0"
                  target: ${{ matrix.build.target }}

            - name: Setup node
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  architecture: ${{ matrix.build.ARCH }}
                  scope: "${{ vars.NPM_SCOPE }}"
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Install tsc and compile utils
              shell: bash
              working-directory: ./utils
              run: |
                  npm install
                  npm install -g typescript
                  npx tsc -p ./tsconfig.json

            - name: Setup environment variables
              shell: bash
              run: |
                  # Set RELEASE_VERSION and NPM_TAG from the determine-version job outputs
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

                  # Determine if the target is musl and set PLATFORM_ID (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    MUSL_FLAG="-musl"
                  else
                    MUSL_FLAG=""
                  fi
                  PLATFORM_ID="${{ matrix.build.NAMED_OS }}${MUSL_FLAG}-${{ matrix.build.ARCH }}"
                  echo "PLATFORM_ID=${PLATFORM_ID}" >> $GITHUB_ENV

                  # Determine build type (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"apple-darwin"* ]]; then
                    BUILD_TYPE="mac"
                  elif [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    BUILD_TYPE="musl"
                  else
                    BUILD_TYPE="gnu"
                  fi
                  echo "BUILD_TYPE=${BUILD_TYPE}" >> $GITHUB_ENV

            - name: Run the tests
              shell: bash
              working-directory: ./utils/release-candidate-testing/node
              run: |
                  npm install
                  npm install --no-save @valkey/valkey-glide@${{ env.NPM_TAG }}
                  npm run test

            - name: Deprecating packages on failure
              if: ${{ failure() }}
              shell: bash
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
                  PLATFORM_MATRIX: ${{ needs.load-platform-matrix.outputs.PLATFORM_MATRIX }}
              run: |
                  # Detect OS and install jq
                  if [[ "${OSTYPE}" == "darwin"* ]]; then
                      brew install jq || true
                  elif command -v apk > /dev/null; then
                      apk add --no-cache jq
                  else
                      sudo apt-get update && sudo apt-get install -y jq
                  fi

                  # RELEASE_VERSION is now directly available from the environment
                  echo "Release version for Deprecating: ${RELEASE_VERSION}"

                  # Validate RELEASE_VERSION
                  if [[ ! "${RELEASE_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ && "${RELEASE_VERSION}" != "0.0.0-pr" ]]; then
                      echo "Invalid release version format: ${RELEASE_VERSION}"
                      exit 1
                  fi

                  if [[ "${RELEASE_VERSION}" == "0.0.0-pr" ]]; then
                      echo "Skipping deprecation for PR version."
                      exit 0
                  fi

                  # Deprecating base package
                  npm deprecate "@valkey/valkey-glide@${RELEASE_VERSION}" "This version has been deprecated due to test failures" --force || true

                  # Process platform matrix
                  echo "${PLATFORM_MATRIX}" > platform_matrix.json

                  while read -r pkg; do
                      package_name="@valkey/valkey-glide-${pkg}"
                      echo "Deprecating ${package_name}@${RELEASE_VERSION}"
                      npm deprecate "${package_name}@${RELEASE_VERSION}" "This version has been deprecated due to test failures" --force || true
                  done < <(jq -r '.[] | "\(.NAMED_OS)\(.TARGET | test("musl") | if . then "-musl" else "" end)-\(.ARCH)"' platform_matrix.json)
