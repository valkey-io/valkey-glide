# This workflow is responsible for the continuous deployment of the GLIDE project to NPM.

name: NPM - Continuous Deployment

on:
    pull_request:
        paths:
            - .github/workflows/npm-cd.yml
            - .github/json_matrices/**
            - node/package.json
            - node/npm/**
            - node/rust-client/Cargo.toml
            - node/rust-client/src/**
    push:
        tags:
            - "v*.*.*" # e.g. v1.2.3, v1.2.3-rc1
    workflow_dispatch:
        inputs:
            version:
                description: "The release version of GLIDE, formatted as *.*.* or *.*.*-rc*"
                required: true
            publish:
                description: "Publish"
                required: true
                type: boolean
                default: false

concurrency:
    group: node-cd-${{ github.head_ref || github.ref }}-${{ toJson(inputs) }}
    cancel-in-progress: true

permissions:
    id-token: write
    contents: read

jobs:
    get-build-parameters:
        runs-on: ubuntu-latest
        outputs:
            release_version: ${{ steps.get-params.outputs.release_version }}
            npm_tag: ${{ steps.get-params.outputs.npm_tag }}
            platform_matrix: ${{ steps.load-platform-matrix.outputs.platform_matrix }}
            should_publish: ${{ steps.get-params.outputs.should_publish }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Get Build Parameters
              id: get-params
              shell: bash
              env:
                  GH_EVENT_NAME: ${{ github.event_name }}
                  GH_REF: ${{ github.ref }}
                  INPUT_VER: ${{ github.event.inputs.version }}
                  INPUT_PUB: ${{ github.event.inputs.publish }}
              run: |
                  echo "Event: $GH_EVENT_NAME  Ref: $GH_REF"

                  # pull_request: use dummy version and never publish
                  if [[ "$GH_EVENT_NAME" == "pull_request" ]]; then
                    RELEASE="255.255.255"
                    SHOULD_PUB="false"

                  # workflow_dispatch: manual version input
                  elif [[ "$GH_EVENT_NAME" == "workflow_dispatch" ]]; then
                    VER_INPUT="$INPUT_VER"
                    PUB_INPUT="$INPUT_PUB"
                    if [[ -n "$VER_INPUT" && "$VER_INPUT" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
                      RELEASE="$VER_INPUT"
                      SHOULD_PUB="$PUB_INPUT"
                    else
                      echo "::error::Invalid manual version: '$VER_INPUT'"; exit 1
                    fi

                  # push on tags must be vX.Y.Z or vX.Y.Z-rcN
                  elif [[ "$GH_EVENT_NAME" == "push" && \
                          "$GH_REF" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?)$ ]]; then
                    RELEASE="${BASH_REMATCH[1]}"
                    SHOULD_PUB="true"

                  else
                    echo "::error::Unrecognized event/ref '$GH_REF'"; exit 1
                  fi

                  # npm-tag logic
                  if [[ "$RELEASE" == *-rc* ]]; then TAG="next"; else TAG="latest"; fi

                  echo "release_version=$RELEASE"  >> $GITHUB_OUTPUT
                  echo "npm_tag=$TAG"             >> $GITHUB_OUTPUT
                  echo "should_publish=$SHOULD_PUB" >> $GITHUB_OUTPUT

            - name: Load Platform Matrix
              id: load-platform-matrix
              shell: bash
              run: |
                  # Filter entries with npm in PACKAGE_MANAGERS and use CD_RUNNER if available
                  export PLATFORM_MATRIX=$(jq 'map(
                      select(.PACKAGE_MANAGERS != null and (.PACKAGE_MANAGERS | contains(["npm"])))
                      | .runner = (
                          if (.CD_RUNNER != null) 
                          then .CD_RUNNER 
                          elif (.RUNNER != null and (.RUNNER | type != "array")) then .RUNNER 
                          else "ubuntu-latest"
                          end
                      )
                      | .build_type = (
                          if (.TARGET | contains("musl")) 
                          then "musl" 
                          elif (.TARGET | contains("gnu")) 
                          then "gnu" 
                          else "mac" 
                          end
                      )
                      | if .RUNNER == "macos13" then .["test-runner"] = "macos13" else . end
                  )' < .github/json_matrices/build-matrix.json | jq -c .)
                  echo "platform_matrix=${PLATFORM_MATRIX}" >> $GITHUB_OUTPUT
                  echo "Platform matrix loaded: ${PLATFORM_MATRIX}"

    build-native-modules:
        needs: [get-build-parameters]
        strategy:
            matrix:
                include: ${{ fromJson(needs.get-build-parameters.outputs.platform_matrix) }}
            fail-fast: false
        runs-on: ${{ matrix.runner }}
        name: Build for ${{ matrix.TARGET }} (${{ matrix.build_type }})
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest

            - name: Cache cargo registry
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo
                      ~/.napi-rs
                      ./target
                  key: ${{ matrix.TARGET }}-cargo-cache
                  restore-keys: |
                      ${{ matrix.TARGET }}-cargo-cache
                      cargo-cache

            # You might ask why we don't use the common action for installing Rust, the reason is many targets to install, and caching will be more efficient
            - name: Install Rust with the required target
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.TARGET }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "25.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Build Native Modules
              working-directory: ./node/rust-client
              id: build-action
              run: |
                  npm install -g @napi-rs/cli prettier

                  # Set up the env parameters for the build and copy the files to the target directory
                  if [[ "${{ matrix.build_type }}" == "musl" || "${{ matrix.build_type }}" == "gnu" ]]; then
                    additional_suffix="-${{ matrix.build_type }}"
                    additional_param="--zig"
                  fi

                  # Install needed dependencies
                  if [[ "${{ matrix.TARGET }}" == *"linux"* ]]; then
                    sudo apt update
                    sudo apt install -y snap gcc pkg-config openssl libssl-dev
                    sudo snap install zig --classic --beta
                  else
                    brew update
                    brew install tree
                  fi

                  # Build the native module

                  # For GNU targets, we use the zig abi param set in the package.json to 2.17
                  if [[ "${{ matrix.TARGET }}" == *"gnu"* ]]; then
                    npm run build:release:gnu

                  # For darwin arm we just build native
                  elif [[ "${{ matrix.TARGET }}" == "aarch64-apple-darwin" ]]; then
                    napi build --release --strip --platform --js ../src/native.js --dts ../src/native.d.ts --js-package-name @valkey/valkey-glide --pipe 'prettier -w' $npm_config_build_flags

                  # For macos x86 we build on mac darwin, since mac allow that easily, for musl we use zig
                  else
                    napi build --release $additional_param --strip --target "${{ matrix.TARGET }}" --js ../src/native.js --dts ../src/native.d.ts --js-package-name @valkey/valkey-glide --pipe 'prettier -w' $npm_config_build_flags
                  fi

                  # Copy the built files to the target directory, including LICENSE and README.md
                  target_dir="../npm/${{ matrix.NAMED_OS }}-${{ matrix.ARCH }}${additional_suffix}"
                  cp -r *.node $target_dir/
                  cp -r ../README.md $target_dir/
                  cp -r ../../LICENSE $target_dir/

                  # List the contents of the target directory
                  echo "Contents of target directory:"
                  tree ../npm/

            # We want to use the native.js and native.d.ts files in the base package, but we don't have the glide dir yet so we upload them as artifacts
            - name: Upload Module js files
              uses: actions/upload-artifact@v4
              if: ${{ matrix.TARGET == 'x86_64-unknown-linux-gnu' }}
              with:
                  name: js-files-${{ github.run_id }}
                  path: |
                      ./node/src/native.js
                      ./node/src/native.d.ts
                      ./node/src/native.js.map
                  retention-days: 1 # try not to keep them too long since our cache is limited
                  if-no-files-found: error

    prepare-and-version-packages:
        needs: [get-build-parameters, build-native-modules]
        runs-on: ubuntu-latest
        outputs:
            prepared_base_package_artifact_name: "prepared-base-package"
            versioned_platform_packages_artifact_name: "versioned-platform-packages"
        steps:
            - name: Checkout repository (for root package.json and build scripts)
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            # Put the native.js and native.d.ts files in the src directory, so it would be available for the base package build
            - name: Download Module js files
              uses: actions/download-artifact@v4
              with:
                  name: js-files-${{ github.run_id }}
                  path: ./node/src

            # We already built the native modules, so no need for full build
            - name: Build TypeScript (for base package)
              working-directory: ./node
              shell: bash
              run: |
                  npm install # To install tsc and other build deps
                  npm run build-protobuf
                  npm run build:ts:release

            - name: Copy TS build output, package files to base_package_content
              working-directory: ./node
              shell: bash
              run: |
                  mkdir -p ./npm/glide/build-ts
                  # Copy built TypeScript files into glide build directory
                  cp -r ./build-ts/* ./npm/glide/build-ts/
                  cp ../LICENSE ./npm/glide/
                  cp ./README.md ./npm/glide/
                  cp ./package.json ./npm/glide/package.json

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest
                  registry-url: "https://registry.npmjs.org"
                  scope: "@valkey"

            - name: Install NAPI-RS CLI
              shell: bash
              run: npm install -g @napi-rs/cli

            - name: Run napi prepublish
              shell: bash
              working-directory: ./node/npm/glide
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NAPI_RS_VERSION_FROM_TAG: ${{ needs.get-build-parameters.outputs.release_version }}
              run: |
                  echo "Version from tag (env): ${NAPI_RS_VERSION_FROM_TAG}"
                  echo "  Release npm tag (env): ${NPM_TAG}"

                  # Replace version in package.json with the one from the tag
                  # The version in package.json is set to "$RELEASE_VERSION" by default.
                  sed -i "s/\$RELEASE_VERSION/${NAPI_RS_VERSION_FROM_TAG}/g" ./package.json

                  # prepublish napi api is used to add the optional dependencies to the package.json base on additional triples in the package.json and take all the native modules from the npm directory and align there versions to the one in the package.json
                  # pretty cool and helpful
                  napi prepublish \
                    --config "./package.json" \
                    --prefix "../" \
                    --skip-gh-release

                  # echo some stuff, mainly for debugging

                  echo "napi prepublish completed. Root package.json version:"
                  cat ./package.json | jq .optionalDependencies

                  echo "napi prepublish completed. Root package.json version:"
                  cat "./package.json" | jq .version

                  # Checking all package.json files in the npm directory for the version
                  echo "Checking all package.json files in the npm directory for the version:"
                  for dir in ../*; do
                    if [ -f "${dir}/package.json" ]; then
                      echo "Package: ${dir}"
                      cat "${dir}/package.json" | jq .version
                    fi
                  done

    publish-platform-packages:
        environment: AWS_ACTIONS
        needs: [prepare-and-version-packages, get-build-parameters]
        runs-on: ubuntu-latest
        # Only run for actual publish events (tags or dispatch with publish=true)
        if: needs.get-build-parameters.outputs.should_publish == 'true'
        steps:
            - name: Setup Node.js and NPM
              uses: actions/setup-node@v4
              with:
                  node-version: latest
                  registry-url: "https://registry.npmjs.org"
                  scope: "@valkey"
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Publish each platform package
              shell: bash
              working-directory: ./node/npm
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
                  NPM_TAG: ${{ needs.get-build-parameters.outputs.npm_tag }}
              run: |
                  echo "Publishing platform packages from ./npm with tag ${NPM_TAG}"
                  for dir in ./*; do
                    # Check if the directory is not the base package and contains a package.json file
                    if [[ "$dir" != "./glide" && -d "$dir" && -f "${dir}/package.json" ]]; then
                      echo "Publishing ${dir}..."
                      (cd "${dir}" && npm publish --tag "${NPM_TAG}" --access public)
                      # Add error handling and unpublish logic here if needed
                    fi
                  done

    publish-base-package:
        needs: [
                publish-platform-packages,
                prepare-and-version-packages,
                get-build-parameters,
            ] # Depends on platform packages being published for optionalDeps
        runs-on: ubuntu-latest
        if: needs.get-build-parameters.outputs.should_publish == 'true'
        steps:
            - name: Setup Node.js and NPM
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  scope: "@valkey"
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Publish base package
              shell: bash
              working-directory: ./node/npm/glide
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
                  NPM_TAG: ${{ needs.get-build-parameters.outputs.npm_tag }}
              run: |
                  echo "Publishing base package with tag ${NPM_TAG}"
                  npm publish --tag ${NPM_TAG}  --access public
                  # Check if the publish was successful
                  if [ $? -ne 0 ]; then
                      echo "::error::Publish failed"; exit 1
                  fi

    test-published-release:
        needs: [publish-base-package, get-build-parameters]
        if: needs.get-build-parameters.outputs.should_publish == 'true'
        strategy:
            matrix:
                include: ${{ fromJson(needs.get-build-parameters.outputs.platform_matrix) }}
            fail-fast: true
        runs-on: ${{ matrix.test-runner || matrix.runner }}
        container:
            image: ${{ matrix.IMAGE || ''}}
            options: ${{ matrix.CONTAINER_OPTIONS || 'none' }}
        name: Test & Cleanup on ${{ matrix.TARGET }}
        steps:
            - name: Setup musl on Linux
              if: ${{ matrix.build_type == 'musl' }}
              shell: sh
              run: |
                  apk update
                  apk add bash git python3

            - name: Checkout (via action)
              if: ${{ !(matrix.TARGET == 'aarch64-unknown-linux-musl') }}
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Checkout-action manually repository for musl on ARM64
              if: ${{ matrix.TARGET == 'aarch64-unknown-linux-musl' }}
              shell: bash
              run: |
                  # First, clone the repository
                  git clone https://github.com/${{ github.repository }} $GITHUB_WORKSPACE
                  cd $GITHUB_WORKSPACE
                  # Now we can run further git commands
                  git config --global --add safe.directory $GITHUB_WORKSPACE
                  git fetch origin ${{ github.sha }}
                  git checkout ${{ github.sha }}
                  git clean -xdf
                  git reset --hard

            - name: Setup Node.js
              if: ${{ !(matrix.build_type == 'musl') }}
              uses: actions/setup-node@v4
              with:
                  node-version: latest

            - name: Install Valkey
              run: |
                  # Install the latest version of Valkey
                  if [[ "${{ matrix.TARGET }}" == *"gnu"* ]]; then
                      apt update
                      apt install valkey
                  elif [[ "${{ matrix.TARGET }}" == *"musl"* ]]; then
                      apk update
                      apk add valkey
                  elif [[ "${{ matrix.TARGET }}" == *"mac"* ]]; then
                      brew update
                      brew install valkey
                  else
                      echo "::error::Unsupported target: ${{ matrix.TARGET }}"; exit 1
                  fi
            - name: Run utils/node Tests
              working-directory: utils/release-candidate-testing/node
              run: |
                  npm install
                  npm install @valkey/valkey-glide@${{ needs.get-build-parameters.outputs.npm_tag }} --save
                  npm run build:utils
                  npm test

    unpublish-on-failure:
        needs:
            [publish-base-package, test-published-release, get-build-parameters]
        if: failure() && needs.get-build-parameters.outputs.should_publish == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest
                  registry-url: "https://registry.npmjs.org"
                  scope: "@valkey"
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Unpublish Published Packages
              run: |
                  echo "Unpublishing due to failure…"
                  # Main package
                  npm unpublish @valkey/valkey-glide@${{ needs.get-build-parameters.outputs.release_version }} --force || echo "Failed to unpublish @valkey/valkey-glide, might not exist"

                  # Platform packages
                  for target in ${{ fromJson(needs.get-build-parameters.outputs.platform_matrix) }}; do
                    # Extract the os-arch name from the matrix
                    os=$(echo $target | jq -r '.NAMED_OS')
                    arch=$(echo $target | jq -r '.ARCH')
                    if [[ ${{ fromJson(needs.get-build-parameters.outputs.platform_matrix.build_type) }} == "musl" ]]; then
                      additional_suffix="-musl"
                    elif [[ ${{ fromJson(needs.get-build-parameters.outputs.platform_matrix.build_type) }} == "gnu" ]]; then
                      additional_suffix="-gnu"
                    else
                      additional_suffix=""
                    fi
                    package_name="@valkey/valkey-glide-${os}-${arch}${additional_suffix}"
                    echo "Unpublishing ${package_name}..."
                    npm unpublish ${package_name}@${{ needs.get-build-parameters.outputs.npm_tag }} --force || echo "Failed to unpublish ${package_name}, might not exist"
                  done
