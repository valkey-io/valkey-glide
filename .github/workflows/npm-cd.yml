name: NPM - Continuous Deployment

on:
    pull_request:
        paths:
            - .github/workflows/npm-cd.yml
            - .github/workflows/build-node-wrapper/action.yml
            - .github/workflows/install-rust-and-protoc/action.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/install-engine/action.yml
            - .github/json_matrices/**
            - .github/workflows/create-test-matrices/action.yml
    push:
        tags:
            - "v*.*.*"
    workflow_dispatch:
        inputs:
            version:
                description: "The release version of GLIDE, formatted as *.*.* or *.*.*-rc*"
                required: true
            publish:
                description: "Publish"
                required: true
                type: boolean
                default: false

concurrency:
    group: node-cd-${{ github.head_ref || github.ref }}-${{ toJson(inputs) }}
    cancel-in-progress: true

permissions:
    id-token: write

jobs:
    determine-version:
        name: Determine Release Version and NPM Tag
        runs-on: ubuntu-latest
        outputs:
            release_version: ${{ steps.set-version.outputs.release_version }}
            npm_tag: ${{ steps.set-version.outputs.npm_tag }}
        steps:
            - name: Set version and tag
              id: set-version
              shell: bash
              run: |
                  R_VERSION=""
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    R_VERSION="0.0.0-pr" # Placeholder for PRs, adjust if needed
                  elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    R_VERSION="${{ github.event.inputs.version }}"
                  else
                    R_VERSION="${GITHUB_REF#refs/tags/v}"
                  fi
                  echo "release_version=${R_VERSION}" >> $GITHUB_OUTPUT

                  N_TAG="latest"
                  if [[ "${R_VERSION}" == *"rc"* ]]; then
                    N_TAG="next"
                  fi
                  echo "npm_tag=${N_TAG}" >> $GITHUB_OUTPUT

                  # Also set to GITHUB_ENV for immediate use if any step in this job needed it
                  echo "RELEASE_VERSION=${R_VERSION}" >> $GITHUB_ENV
                  echo "NPM_TAG=${N_TAG}" >> $GITHUB_ENV

    load-platform-matrix:
        runs-on: ubuntu-latest
        outputs:
            PLATFORM_MATRIX: ${{ steps.load-platform-matrix.outputs.PLATFORM_MATRIX }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: load-platform-matrix
              id: load-platform-matrix
              shell: bash
              run: |
                  # Filter entries with npm in PACKAGE_MANAGERS
                  FILTERED_MATRIX_JSON=$(jq 'map(
                      select(.PACKAGE_MANAGERS != null and (.PACKAGE_MANAGERS | contains(["npm"])))
                  )' .github/json_matrices/build-matrix.json)

                  # If aarch64-apple-darwin is present, remove x86_64-apple-darwin to avoid redundant builds,
                  # as the aarch64 job will build both.
                  FINAL_MATRIX_JSON=$(echo "${FILTERED_MATRIX_JSON}" | jq '
                    . as $npm_platforms
                    | ($npm_platforms | map(select(.TARGET == "aarch64-apple-darwin")) | length > 0) as $has_arm_darwin
                    | if $has_arm_darwin then
                        $npm_platforms | map(select(.TARGET != "x86_64-apple-darwin"))
                      else
                        $npm_platforms
                      end
                  ')
                  echo "PLATFORM_MATRIX=$(echo "${FINAL_MATRIX_JSON}" | jq -c .)" >> $GITHUB_OUTPUT

    build-binaries:
        needs: [load-platform-matrix, determine-version]
        name: Build native binaries
        runs-on: ${{ matrix.build.CD_RUNNER || matrix.build.BUILD_RUNNER || matrix.build.RUNNER }}
        container:
            image: ${{ matrix.build.IMAGE || '' }}
            options: ${{ matrix.build.CONTAINER_OPTIONS || 'none'}}
        strategy:
            fail-fast: false
            matrix:
                build: ${{fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX)}}
        steps:
            # For MUSL on X64 we need to install git since we use the checkout action
            - name: Install git for musl
              if: ${{ contains(matrix.build.TARGET, 'x86_64-unknown-linux-musl')}}
              run: |
                  apk update
                  apk add git

            - name: Checkout
              if: ${{ matrix.build.TARGET != 'aarch64-unknown-linux-musl' }}
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup for musl
              if: ${{ contains(matrix.build.TARGET, 'musl')}}
              uses: ./.github/workflows/setup-musl-on-linux
              with:
                  npm-scope: ${{ vars.NPM_SCOPE }}
                  npm-auth-token: ${{ secrets.NPM_AUTH_TOKEN }} # Ensure NPM_AUTH_TOKEN is defined in repo secrets
                  arch: ${{ matrix.build.ARCH }}

            - name: Set versioning environment variables
              shell: bash
              run: |
                  # Set RELEASE_VERSION and NPM_TAG from the determine-version job outputs
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

                  # Determine if the target is musl and set PLATFORM_ID (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    MUSL_FLAG="-musl"
                  else
                    MUSL_FLAG=""
                  fi
                  PLATFORM_ID="${{ matrix.build.NAMED_OS }}${MUSL_FLAG}-${{ matrix.build.ARCH }}"
                  echo "PLATFORM_ID=${PLATFORM_ID}" >> $GITHUB_ENV

                  # Determine build type (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"apple-darwin"* ]]; then
                    BUILD_TYPE="mac"
                  elif [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    BUILD_TYPE="musl"
                  else
                    BUILD_TYPE="gnu"
                  fi
                  echo "BUILD_TYPE=${BUILD_TYPE}" >> $GITHUB_ENV

            - name: Setup node
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  architecture: ${{ matrix.build.ARCH }}
                  scope: "${{ vars.NPM_SCOPE }}"
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Setup node for building
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              working-directory: ./node
              run: |
                  npm config set registry https://registry.npmjs.org/
                  npm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
                  npm config set scope ${{ vars.NPM_SCOPE }}
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Update package version in config.toml
              uses: ./.github/workflows/update-glide-version
              with:
                  folder_path: "${{ github.workspace }}/node/rust-client/.cargo"
                  named_os: ${{ matrix.build.NAMED_OS }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "25.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            # Install Zig for cross-compilation - direct installation for musl environments
            - name: Install Zig directly on Alpine/musl
              if: ${{ contains(matrix.build.TARGET, 'musl') }}
              shell: bash
              run: |
                  echo "Installing Zig directly on Alpine Linux..."
                  # Try to install from package manager first
                  if ! apk add --no-cache zig; then
                    echo "Zig not available in apk, installing manually..."
                    
                    # Install dependencies for manual installation
                    apk add --no-cache curl xz
                    
                    # Download latest stable Zig for Linux
                    ZIG_VERSION="0.12.0"
                    ARCH=$(uname -m)
                    if [[ "${ARCH}" == "x86_64" ]]; then
                      ZIG_ARCH="x86_64"
                    elif [[ "${ARCH}" == "aarch64" ]]; then
                      ZIG_ARCH="aarch64"
                    else
                      echo "Unsupported architecture: ${ARCH}"
                      exit 1
                    fi
                    
                    # Download and extract Zig
                    curl -sSL "https://ziglang.org/download/${ZIG_VERSION}/zig-linux-${ZIG_ARCH}-${ZIG_VERSION}.tar.xz" -o zig.tar.xz
                    mkdir -p /usr/local/zig
                    tar -xf zig.tar.xz --strip-components=1 -C /usr/local/zig
                    ln -s /usr/local/zig/zig /usr/local/bin/zig
                    
                    # Verify installation
                    zig version
                  fi

            # Install Zig for cross-compilation - use action for non-musl environments
            - uses: mlugg/setup-zig@v2
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              with:
                  version: latest

            # Build native modules using appropriate script based on platform
            - name: Build native modules
              shell: bash
              working-directory: ./node/rust-client
              env:
                  TARGET: ${{ matrix.build.TARGET }}
              run: |
                  # Install build dependencies
                  npm install

                  # Verify Zig installation
                  if ! command -v zig &> /dev/null; then
                    echo "Zig not found in PATH, installing manually..."
                    
                    # Install dependencies for manual installation if not on musl
                    # (for musl, they should have been installed in the previous step)
                    if ! command -v apk &> /dev/null; then
                      if command -v apt-get &> /dev/null; then
                        sudo apt-get update
                        sudo apt-get install -y curl xz-utils
                      elif command -v yum &> /dev/null; then
                        sudo yum install -y curl xz
                      fi
                    fi
                    
                    # Download latest stable Zig for the appropriate platform
                    ZIG_VERSION="0.12.0"
                    PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
                    ARCH=$(uname -m)
                    
                    if [[ "${PLATFORM}" == "darwin" ]]; then
                      if [[ "${ARCH}" == "x86_64" ]]; then
                        ZIG_URL="https://ziglang.org/download/${ZIG_VERSION}/zig-macos-x86_64-${ZIG_VERSION}.tar.xz"
                      elif [[ "${ARCH}" == "arm64" ]]; then
                        ZIG_URL="https://ziglang.org/download/${ZIG_VERSION}/zig-macos-aarch64-${ZIG_VERSION}.tar.xz"
                      fi
                    elif [[ "${PLATFORM}" == "linux" ]]; then
                      if [[ "${ARCH}" == "x86_64" ]]; then
                        ZIG_URL="https://ziglang.org/download/${ZIG_VERSION}/zig-linux-x86_64-${ZIG_VERSION}.tar.xz"
                      elif [[ "${ARCH}" == "aarch64" ]]; then
                        ZIG_URL="https://ziglang.org/download/${ZIG_VERSION}/zig-linux-aarch64-${ZIG_VERSION}.tar.xz"
                      fi
                    fi
                    
                    if [[ -n "${ZIG_URL}" ]]; then
                      echo "Downloading Zig from ${ZIG_URL}..."
                      curl -sSL "${ZIG_URL}" -o zig.tar.xz
                      mkdir -p /tmp/zig
                      tar -xf zig.tar.xz --strip-components=1 -C /tmp/zig
                      
                      # Add Zig to PATH
                      echo "Adding Zig to PATH..."
                      export PATH="/tmp/zig:$PATH"
                    else
                      echo "ERROR: Unsupported platform/architecture: ${PLATFORM}/${ARCH}"
                      exit 1
                    fi
                  fi

                  # Verify Zig is now available
                  echo "Zig version:"
                  zig version

                  # Select appropriate build script based on platform
                  if [[ "$TARGET" == *"apple-darwin"* ]]; then
                    echo "Building for macOS ($TARGET)..."
                    npm run build:release:mac
                    
                    # For macOS, if we're on ARM, also build for x86_64
                    if [[ "$TARGET" == "aarch64-apple-darwin" ]]; then
                      echo "Building universal binary for macOS..."
                      CARGO_BUILD_TARGET=x86_64-apple-darwin npm run build:release:mac
                    fi
                    
                  elif [[ "$TARGET" == *"-musl"* ]]; then
                    echo "Building for musl ($TARGET)..."
                    # Make sure all dependencies for building on Alpine are installed
                    if command -v apk &> /dev/null; then
                      apk add --no-cache libc-dev build-base
                    fi
                    npm run build:release:musl
                  else
                    echo "Building for gnu ($TARGET)..."
                    npm run build:release:gnu
                  fi

                  # Verify the build output
                  echo "Verifying native binary output:"
                  ls -la *.node

                  # Verify JavaScript bindings were generated
                  echo "Verifying JavaScript bindings:"
                  if [[ -f "native.js" && -f "native.d.ts" ]]; then
                    echo "✅ JavaScript bindings were successfully generated:"
                    ls -la native.js native.d.ts
                  else
                    echo "❌ ERROR: JavaScript bindings are missing!"
                    echo "Current directory contents:"
                    ls -la
                    exit 1
                  fi

            # Upload native JS/TS declaration files once from Ubuntu x64 build
            # Upload JavaScript bindings - Only do this once (from the x86_64 Linux GNU build)
            - name: Upload native JS files
              if: ${{ matrix.build.TARGET == 'x86_64-unknown-linux-gnu' }}
              uses: actions/upload-artifact@v4
              with:
                  name: native-js-files
                  path: |
                      node/rust-client/native.js
                      node/rust-client/native.d.ts
                  if-no-files-found: error
                  compression-level: 6
                  overwrite: false

            - name: Upload node binaries artifact
              uses: actions/upload-artifact@v4
              with:
                  name: node-binaries-${{ env.PLATFORM_ID }}
                  path: |
                      node/rust-client/glide-rs.*.node
                  if-no-files-found: error

    organize-artifacts:
        needs: [build-binaries, load-platform-matrix, determine-version]
        name: Organize artifacts for publishing
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: "true"

            - name: Set versioning environment variables from determine-version job
              shell: bash
              run: |
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

            - name: Install napi-rs CLI
              shell: bash
              run: |
                  npm install -g @napi-rs/cli

            - name: Download all binary artifacts
              uses: actions/download-artifact@v4
              with:
                  pattern: node-binaries-*
                  path: ./artifacts/binaries

            - name: Download native JS files
              uses: actions/download-artifact@v4
              with:
                  name: native-js-files
                  path: ./artifacts/native-js

            - name: List and verify downloaded artifacts
              shell: bash
              run: |
                  echo "## Artifact Verification" >> $GITHUB_STEP_SUMMARY
                  echo "Verifying all required artifacts were downloaded successfully" >> $GITHUB_STEP_SUMMARY

                  # Check binary artifacts
                  echo "Binary artifacts:"
                  binary_count=$(find ./artifacts/binaries -type f -name "*.node" | sort | tee >(cat) | wc -l)
                  echo "Found ${binary_count} binary artifacts" >> $GITHUB_STEP_SUMMARY

                  # Check JavaScript files
                  echo "Native JS files:"
                  js_files=$(find ./artifacts/native-js -type f | sort | tee >(cat))
                  js_count=$(echo "$js_files" | wc -l)

                  echo "Found ${js_count} JavaScript binding files" >> $GITHUB_STEP_SUMMARY

                  # Verify JS files specifically
                  if [[ -f "./artifacts/native-js/native.js" && -f "./artifacts/native-js/native.d.ts" ]]; then
                    echo "✅ Required JavaScript bindings verified:" >> $GITHUB_STEP_SUMMARY
                    ls -la ./artifacts/native-js/native.js ./artifacts/native-js/native.d.ts >> $GITHUB_STEP_SUMMARY
                  else
                    echo "❌ ERROR: Missing required JavaScript binding files!" >> $GITHUB_STEP_SUMMARY
                    echo "Content of ./artifacts/native-js:" >> $GITHUB_STEP_SUMMARY
                    ls -la ./artifacts/native-js/ >> $GITHUB_STEP_SUMMARY
                    echo "This will cause issues later in the workflow. Failing now." >> $GITHUB_STEP_SUMMARY
                    exit 1
                  fi

            # Prepare binary artifacts for organization
            - name: Prepare directory structure for artifacts
              shell: bash
              run: |
                  # Step summary
                  echo "## Preparing Binary Artifacts" >> $GITHUB_STEP_SUMMARY
                  echo "Creating directory structure and preparing for artifact organization" >> $GITHUB_STEP_SUMMARY

                  # Create artifacts directory for binaries
                  mkdir -p ./organized-artifacts

                  # Extract the .node files from artifacts/binaries into organized-artifacts/
                  find ./artifacts/binaries -type f -name "*.node" -exec cp -v {} ./organized-artifacts/ \;

                  # Document findings
                  num_binaries=$(find ./organized-artifacts -type f -name "*.node" | wc -l)
                  echo "- Located and copied ${num_binaries} native binary files for packaging" >> $GITHUB_STEP_SUMMARY

            # Run NAPI-RS tool to organize binaries by platform
            - name: Organize binaries with napi-rs
              shell: bash
              run: |
                  # Step summary
                  echo "## Organizing Artifacts by Platform" >> $GITHUB_STEP_SUMMARY
                  echo "Using NAPI-RS CLI to organize native modules into platform-specific directories" >> $GITHUB_STEP_SUMMARY

                  # Copy the .node files to platform-specific directories
                  # The napi artifacts command will organize them under npm/ directory
                  napi artifacts --dir ./organized-artifacts --npm-dir ./node/npm

                  # Document results
                  num_dirs=$(find ./node/npm -maxdepth 1 -type d | grep -v "^./node/npm$" | wc -l)
                  echo "- Created ${num_dirs} platform-specific package directories" >> $GITHUB_STEP_SUMMARY

            # Add JavaScript binding files to platform packages
            - name: Add native JavaScript files to packages
              shell: bash
              run: |
                  # Step summary
                  echo "## Adding JavaScript Binding Files" >> $GITHUB_STEP_SUMMARY
                  echo "Adding native.js and native.d.ts to each platform package" >> $GITHUB_STEP_SUMMARY

                  # Verify source files exist before attempting to copy
                  if [[ ! -f "./artifacts/native-js/native.js" ]]; then
                    echo "❌ ERROR: JavaScript binding file native.js not found!" >> $GITHUB_STEP_SUMMARY
                    ls -la ./artifacts/native-js/ || echo "Directory not found or empty"
                    exit 1
                  fi

                  if [[ ! -f "./artifacts/native-js/native.d.ts" ]]; then
                    echo "❌ ERROR: TypeScript definitions file native.d.ts not found!" >> $GITHUB_STEP_SUMMARY
                    ls -la ./artifacts/native-js/ || echo "Directory not found or empty"
                    exit 1
                  fi

                  # Copy native.js and native.d.ts to each platform package directory
                  copied_count=0
                  failed_count=0
                  echo "| Package | JS File | TS Definitions | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

                  for pkg_dir in ./node/npm/*/; do
                    # Skip the glide directory (TypeScript-only package)
                    if [[ "${pkg_dir}" == "./node/npm/glide/" ]]; then
                      continue
                    fi
                    
                    # Get package name for reporting
                    pkg_name=$(basename "${pkg_dir}")
                    status="✅ Success"
                    js_status="✅"
                    ts_status="✅"
                    
                    # Copy native.js with error handling
                    if ! cp -v ./artifacts/native-js/native.js "${pkg_dir}" 2>/dev/null; then
                      js_status="❌"
                      status="❌ Failed"
                      ((failed_count++))
                    fi
                    
                    # Copy native.d.ts with error handling
                    if ! cp -v ./artifacts/native-js/native.d.ts "${pkg_dir}" 2>/dev/null; then
                      ts_status="❌"
                      status="❌ Failed"
                      ((failed_count++))
                    else
                      # Only increment success count if both files were copied
                      if [[ "$js_status" == "✅" ]]; then
                        ((copied_count++))
                      fi
                    fi
                    
                    echo "| ${pkg_name} | ${js_status} | ${ts_status} | ${status} |" >> $GITHUB_STEP_SUMMARY
                  done

                  # Report overall status
                  if [[ $failed_count -gt 0 ]]; then
                    echo "❌ WARNING: Failed to add JS bindings to ${failed_count} packages!" >> $GITHUB_STEP_SUMMARY
                    exit 1
                  else
                    echo "✅ Successfully added JS bindings to ${copied_count} platform packages" >> $GITHUB_STEP_SUMMARY
                  fi

            # Verify package integrity with checksums
            - name: Generate and verify package checksums
              shell: bash
              run: |
                  # Step summary
                  echo "## Verifying Package Integrity" >> $GITHUB_STEP_SUMMARY
                  echo "| Package | JS Files | TypeScript Definitions | Binary | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

                  # Track any missing files
                  missing_files=false
                  missing_count=0

                  # Generate and verify checksums
                  for pkg_dir in ./node/npm/*/; do
                    # Skip the glide directory
                    if [[ "${pkg_dir}" == "./node/npm/glide/" ]]; then
                      continue
                    fi
                    
                    pkg_name=$(basename "${pkg_dir}")
                    
                    # Check for required files
                    has_js=$(test -f "${pkg_dir}/native.js" && echo "✅" || echo "❌")
                    has_dts=$(test -f "${pkg_dir}/native.d.ts" && echo "✅" || echo "❌")
                    has_node=$(find "${pkg_dir}" -name "*.node" | grep -q . && echo "✅" || echo "❌")
                    
                    # Determine overall status
                    if [[ "$has_js" == "✅" && "$has_dts" == "✅" && "$has_node" == "✅" ]]; then
                      status="✅ Complete"
                    else
                      status="❌ Missing files"
                      missing_files=true
                      ((missing_count++))
                    fi
                    
                    echo "| ${pkg_name} | ${has_js} | ${has_dts} | ${has_node} | ${status} |" >> $GITHUB_STEP_SUMMARY
                    
                    # Generate checksums for verification (with error handling)
                    echo "Checksums for ${pkg_name}:" 
                    if ! sha256sum "${pkg_dir}"/*.js "${pkg_dir}"/*.d.ts "${pkg_dir}"/*.node 2>/dev/null; then
                      echo "⚠️ Warning: Could not generate complete checksums for ${pkg_name}" >> $GITHUB_STEP_SUMMARY
                      # List files that were found
                      echo "Files found in ${pkg_name}:" >> $GITHUB_STEP_SUMMARY
                      echo '```' >> $GITHUB_STEP_SUMMARY
                      ls -la "${pkg_dir}" >> $GITHUB_STEP_SUMMARY
                      echo '```' >> $GITHUB_STEP_SUMMARY
                    fi
                  done

                  # Add summary section with results
                  echo "## Package Verification Summary" >> $GITHUB_STEP_SUMMARY
                  if [[ "$missing_files" == "true" ]]; then
                    echo "❌ ${missing_count} packages are missing required files!" >> $GITHUB_STEP_SUMMARY
                    echo "This will cause issues when publishing. Failing the workflow." >> $GITHUB_STEP_SUMMARY
                    exit 1
                  else 
                    echo "✅ All package files verified successfully" >> $GITHUB_STEP_SUMMARY
                  fi

                  # Check the final organized files and structure
                  echo "## Final Package Structure" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  find ./node/npm -type f | sort >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

            - name: Upload organized artifacts for reference
              uses: actions/upload-artifact@v4
              with:
                  name: organized-node-artifacts
                  path: ./node/npm

    publish-platform-packages:
        name: Publish platform-specific NPM packages
        needs: [organize-artifacts, determine-version]
        if: github.event_name == 'push' || github.event.inputs.publish == true
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install node
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  scope: "${{ vars.NPM_SCOPE }}" # Ensure NPM_SCOPE is defined in repo variables
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }} # Ensure NPM_AUTH_TOKEN is defined in repo secrets

            - name: Set versioning environment variables from determine-version job
              shell: bash
              run: |
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

            - name: Check that the release version don't have typo in it
              shell: bash
              run: |
                  echo "Current release version from env: ${{ env.RELEASE_VERSION }}"
                  if [ -z "${{ env.RELEASE_VERSION }}" ]; then
                    echo "Error: RELEASE_VERSION is empty!"
                    exit 1
                  fi
                  # Example: Check if version matches a simple pattern like X.Y.Z or X.Y.Z-rc.N or 0.0.0-pr
                  # Adjust the regex to your specific versioning scheme
                  if ! [[ "${{ env.RELEASE_VERSION }}" =~ ^([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?|0\.0\.0-pr)$ ]]; then
                    echo "Error: RELEASE_VERSION format appears incorrect: ${{ env.RELEASE_VERSION }}"
                    # exit 1 # Optionally exit on format mismatch
                  fi
                  echo "RELEASE_VERSION (${{ env.RELEASE_VERSION }}) is present."

            - name: Download organized artifacts
              uses: actions/download-artifact@v4
              with:
                  name: organized-node-artifacts
                  path: ./node/npm

            - name: Prepare and verify package files
              shell: bash
              working-directory: ./node
              run: |
                  # Step summary
                  echo "## Package Preparation" >> $GITHUB_STEP_SUMMARY
                  echo "Preparing platform-specific packages for publishing" >> $GITHUB_STEP_SUMMARY

                  # Prepare common files
                  echo "Preparing common README and LICENSE files..."
                  cp -v README.md npm/ || { echo "❌ Failed to copy README.md" >> $GITHUB_STEP_SUMMARY; exit 1; }
                  cp -v ../LICENSE npm/ || { echo "❌ Failed to copy LICENSE" >> $GITHUB_STEP_SUMMARY; exit 1; }
                  echo "✅ Common files prepared successfully" >> $GITHUB_STEP_SUMMARY

                  # Count and log platform packages
                  platform_pkg_count=$(find npm/ -maxdepth 1 -type d -not -path "npm/" -not -path "npm/glide" | wc -l)
                  echo "Found ${platform_pkg_count} platform-specific packages to verify" >> $GITHUB_STEP_SUMMARY

                  # Set up summary table
                  echo "### Package Verification" >> $GITHUB_STEP_SUMMARY
                  echo "| Package | JS File | TS Definitions | Binary | Version | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

                  # Verify native JS files in all packages
                  echo "Verifying platform packages and adding metadata..."
                  has_errors=false

                  for pkg_dir in npm/*/; do
                    # Skip the glide directory (TypeScript-only package)
                    if [[ "${pkg_dir}" == "npm/glide/" ]]; then
                      continue
                    fi
                    
                    # Get package name for reporting
                    pkg_name=$(basename "${pkg_dir}")
                    
                    # Check component files
                    has_js=$(test -f "${pkg_dir}/native.js" && echo "✅" || echo "❌")
                    has_dts=$(test -f "${pkg_dir}/native.d.ts" && echo "✅" || echo "❌")
                    has_node=$(find "${pkg_dir}" -name "*.node" | grep -q . && echo "✅" || echo "❌")
                    
                    # Determine if package is complete
                    if [[ "$has_js" == "❌" || "$has_dts" == "❌" || "$has_node" == "❌" ]]; then
                      status="❌ Missing files"
                      has_errors=true
                      echo "ERROR: Package ${pkg_name} is missing required files"
                      ls -la "${pkg_dir}"
                    else
                      status="✅ Complete"
                      
                      # Replace version placeholder (only if package is complete)
                      sed -i "s/\$RELEASE_VERSION/${RELEASE_VERSION}/g" "${pkg_dir}/package.json"
                      pkg_version=$(jq -r '.version' "${pkg_dir}/package.json")
                      
                      # Copy README and LICENSE
                      cp -v npm/README.md "${pkg_dir}/README.md"
                      cp -v npm/LICENSE "${pkg_dir}/LICENSE"
                    fi
                    
                    # Add to summary table
                    echo "| ${pkg_name} | ${has_js} | ${has_dts} | ${has_node} | ${pkg_version:-N/A} | ${status} |" >> $GITHUB_STEP_SUMMARY
                    
                    # Generate checksums for logging
                    echo "Checksums for ${pkg_name}:"
                    sha256sum "${pkg_dir}"/*.js "${pkg_dir}"/*.d.ts "${pkg_dir}"/*.node 2>/dev/null || echo "  - Could not generate complete checksums"
                  done

                  # Fail if any packages are incomplete
                  if [[ "$has_errors" == "true" ]]; then
                    echo "❌ Some packages are missing required files. Cannot proceed with publishing." >> $GITHUB_STEP_SUMMARY
                    exit 1
                  fi

                  echo "✅ All platform packages verified and prepared successfully" >> $GITHUB_STEP_SUMMARY

            # Set up npm registry authentication and configuration
            - name: Configure npm authentication
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node
              run: |
                  # Step summary
                  echo "## NPM Registry Configuration" >> $GITHUB_STEP_SUMMARY
                  echo "Setting up npm registry authentication for publishing" >> $GITHUB_STEP_SUMMARY

                  # Set npm auth token
                  npm config set registry https://registry.npmjs.org/
                  npm config set '//registry.npmjs.org/:_authToken' ${{ secrets.NPM_AUTH_TOKEN }}
                  npm config set scope ${{ vars.NPM_SCOPE }}

                  # Report success
                  echo "✅ npm registry configured with scope: ${{ vars.NPM_SCOPE }}" >> $GITHUB_STEP_SUMMARY
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

            # Collect information about packages to be published
            - name: Analyze platform packages
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node
              id: analyze-packages
              run: |
                  # Step summary
                  echo "## Platform Package Analysis" >> $GITHUB_STEP_SUMMARY
                  echo "| Package | Version | Platform | Files |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

                  # Count packages for reporting
                  platform_pkg_count=0

                  # Track package information
                  echo "package_names=" > package_info.txt

                  # Analyze each package directory
                  for pkg_dir in npm/*/; do
                    # Skip the glide directory (TypeScript-only package)
                    if [[ "${pkg_dir}" == "npm/glide/" ]]; then
                      continue
                    fi
                    
                    package_name=$(jq -r '.name' "${pkg_dir}/package.json")
                    package_version=$(jq -r '.version' "${pkg_dir}/package.json")
                    platform_info=$(jq -r '.os[0] // "unknown" | " (" + . + ")"' "${pkg_dir}/package.json")
                    
                    # Count binary files
                    binary_count=$(find "${pkg_dir}" -name "*.node" | wc -l)
                    file_count=$(find "${pkg_dir}" -type f | wc -l)
                    
                    # Append to package names list
                    echo "package_names+=${package_name}," >> package_info.txt
                    
                    # Report in summary
                    echo "| ${package_name} | ${package_version} | ${platform_info} | ${file_count} (${binary_count} native) |" >> $GITHUB_STEP_SUMMARY
                    ((platform_pkg_count++))
                  done

                  # Report total count
                  echo "Found ${platform_pkg_count} platform-specific packages to publish" >> $GITHUB_STEP_SUMMARY
                  echo "::set-output name=package_count::${platform_pkg_count}"
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

            # Step 1: Verify packages to be published
            - name: Verify packages before publishing
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node
              run: |
                  # Step summary
                  echo "## Pre-Publish Verification" >> $GITHUB_STEP_SUMMARY
                  echo "Verifying packages before publishing" >> $GITHUB_STEP_SUMMARY

                  # Count packages and collect metadata
                  pkg_count=0
                  verified_packages=()

                  echo "| Package | Version | Platform | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

                  # Check all packages
                  for pkg_dir in npm/*/; do
                    # Skip the TypeScript-only package
                    if [[ "${pkg_dir}" == "npm/glide/" ]]; then
                      continue
                    fi
                    
                    # Extract package metadata
                    package_name=$(jq -r '.name' "${pkg_dir}/package.json")
                    package_version=$(jq -r '.version' "${pkg_dir}/package.json")
                    platform_info=$(jq -r '.os[0] // "unknown" | " (" + . + ")"' "${pkg_dir}/package.json")
                    
                    # Verify package.json has required fields
                    if [[ -z "$package_name" || "$package_name" == "null" || "$package_version" == "null" ]]; then
                      echo "| ${package_name:-Unknown} | ${package_version:-None} | ${platform_info} | ❌ Invalid metadata |" >> $GITHUB_STEP_SUMMARY
                      continue
                    fi
                    
                    # Verify package files exist
                    if [[ ! -f "${pkg_dir}/native.js" || ! -f "${pkg_dir}/native.d.ts" ]]; then
                      echo "| ${package_name} | ${package_version} | ${platform_info} | ❌ Missing JS files |" >> $GITHUB_STEP_SUMMARY
                      continue
                    fi
                    
                    # Verify binary exists
                    if ! find "${pkg_dir}" -name "*.node" | grep -q .; then
                      echo "| ${package_name} | ${package_version} | ${platform_info} | ❌ Missing binary |" >> $GITHUB_STEP_SUMMARY
                      continue
                    fi
                    
                    # Package is valid
                    echo "| ${package_name} | ${package_version} | ${platform_info} | ✅ Ready |" >> $GITHUB_STEP_SUMMARY
                    verified_packages+=("${package_name}")
                    ((pkg_count++))
                  done

                  # Create file with verified packages for next step
                  printf "%s\n" "${verified_packages[@]}" > verified_packages.txt

                  # Report results
                  echo "✅ ${pkg_count} packages verified and ready for publishing" >> $GITHUB_STEP_SUMMARY

                  # Fail if no packages are ready
                  if [[ $pkg_count -eq 0 ]]; then
                    echo "❌ No valid packages found to publish!" >> $GITHUB_STEP_SUMMARY
                    exit 1
                  fi

            # Step 2: Publish verified packages
            - name: Publish platform packages
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node
              run: |
                  # Step summary
                  echo "## Platform Package Publishing" >> $GITHUB_STEP_SUMMARY
                  echo "Publishing platform-specific packages with version ${RELEASE_VERSION}" >> $GITHUB_STEP_SUMMARY
                  echo "| Package | Version | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

                  # Track package publishing status
                  published_packages=()
                  skipped_packages=()
                  failed_packages=()

                  # Read list of verified packages
                  readarray -t verified_packages < verified_packages.txt

                  # Process each platform package
                  for pkg_dir in npm/*/; do
                    # Skip the glide directory (TypeScript-only package)
                    if [[ "${pkg_dir}" == "npm/glide/" ]]; then
                      continue
                    fi
                    
                    # Extract package info
                    package_name=$(jq -r '.name' "${pkg_dir}/package.json")
                    package_version=$(jq -r '.version' "${pkg_dir}/package.json")
                    
                    # Skip if not in verified packages
                    if ! printf '%s\n' "${verified_packages[@]}" | grep -q "^${package_name}$"; then
                      echo "Skipping ${package_name} (not verified)"
                      skipped_packages+=("${package_name}")
                      echo "| ${package_name} | ${package_version} | ⚠️ Skipped - not verified |" >> $GITHUB_STEP_SUMMARY
                      continue
                    fi
                    
                    # Publish the package
                    echo "Publishing package ${package_name}@${package_version}..."
                    cd "${pkg_dir}"
                    
                    # Handle publishing with error handling
                    set +e
                    npm_publish_output=$(npm publish --tag "${NPM_TAG}" --access public --loglevel=error 2>&1)
                    publish_exit_code=$?
                    set -e
                    
                    # Process result
                    if [[ $publish_exit_code -eq 0 ]]; then
                      echo "| ${package_name} | ${package_version} | ✅ Published |" >> $GITHUB_STEP_SUMMARY
                      published_packages+=("${package_name}")
                    elif echo "$npm_publish_output" | grep -q "You cannot publish over the previously published versions"; then
                      echo "| ${package_name} | ${package_version} | ⚠️ Already exists |" >> $GITHUB_STEP_SUMMARY
                      skipped_packages+=("${package_name}")
                    else
                      echo "| ${package_name} | ${package_version} | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
                      echo "Error: $npm_publish_output" >> $GITHUB_STEP_SUMMARY
                      failed_packages+=("${package_name}")
                    fi
                    
                    # Return to working directory
                    cd "${OLDPWD}"
                  done

                  # Save results to files for the next step
                  printf "%s\n" "${published_packages[@]}" > published_packages.txt
                  printf "%s\n" "${failed_packages[@]}" > failed_packages.txt

            # Step 3: Report publishing results
            - name: Report publishing results
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node
              run: |
                  # Step summary
                  echo "## Publishing Results Summary" >> $GITHUB_STEP_SUMMARY

                  # Read result files
                  readarray -t published_packages < <(cat published_packages.txt 2>/dev/null || echo "")
                  readarray -t failed_packages < <(cat failed_packages.txt 2>/dev/null || echo "")

                  # Count results
                  published_count=${#published_packages[@]}
                  failed_count=${#failed_packages[@]}

                  # Adjust for empty files
                  if [[ "${published_packages[0]}" == "" ]]; then
                    published_count=0
                  fi

                  if [[ "${failed_packages[0]}" == "" ]]; then
                    failed_count=0
                  fi

                  # Report statistics
                  echo "### Publishing Statistics" >> $GITHUB_STEP_SUMMARY
                  echo "- ✅ **Successfully published:** ${published_count} packages" >> $GITHUB_STEP_SUMMARY
                  echo "- ❌ **Failed to publish:** ${failed_count} packages" >> $GITHUB_STEP_SUMMARY

                  # List published packages if any
                  if [[ $published_count -gt 0 ]]; then
                    echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
                    echo "```" >> $GITHUB_STEP_SUMMARY
                    printf "  %s\n" "${published_packages[@]}" >> $GITHUB_STEP_SUMMARY
                    echo "```" >> $GITHUB_STEP_SUMMARY
                  fi

                  # Report and exit with error if any failures
                  if [[ $failed_count -gt 0 ]]; then
                    echo "### Failed Packages" >> $GITHUB_STEP_SUMMARY
                    echo "```" >> $GITHUB_STEP_SUMMARY
                    printf "  %s\n" "${failed_packages[@]}" >> $GITHUB_STEP_SUMMARY
                    echo "```" >> $GITHUB_STEP_SUMMARY
                    echo "❌ Some packages failed to publish. See above for details." >> $GITHUB_STEP_SUMMARY
                    exit 1
                  fi

                  echo "✅ All package publishing completed successfully" >> $GITHUB_STEP_SUMMARY
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

    publish-base-to-npm:
        name: Publish the base TypeScript package
        needs: [publish-platform-packages, determine-version]
        if: github.event_name == 'push' || github.event.inputs.publish == true
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  submodules: "true"

            - name: Install node
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  scope: "${{ vars.NPM_SCOPE }}"
                  always-auth: true

            - name: Set versioning environment variables from determine-version job
              shell: bash
              run: |
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

            - name: Create directory for TypeScript package
              shell: bash
              run: |
                  mkdir -p ./node/npm/glide

            # Copy package source files to the publishing directory
            - name: Copy source files to npm package
              shell: bash
              run: |
                  # Step summary
                  echo "## Preparing TypeScript Package" >> $GITHUB_STEP_SUMMARY
                  echo "Copying TypeScript source files to the npm package directory" >> $GITHUB_STEP_SUMMARY

                  # Copy the main package.json
                  cp ./node/package.json ./node/npm/glide/
                  echo "- Copied package.json" >> $GITHUB_STEP_SUMMARY

                  # Copy the compiled TypeScript files
                  mkdir -p ./node/npm/glide/build-ts
                  cp -r ./node/build-ts/* ./node/npm/glide/build-ts/

                  # Count files for reporting
                  ts_files=$(find ./node/npm/glide/build-ts -type f -name "*.js" | wc -l)
                  d_ts_files=$(find ./node/npm/glide/build-ts -type f -name "*.d.ts" | wc -l)
                  echo "- Copied ${ts_files} JavaScript files and ${d_ts_files} TypeScript definition files" >> $GITHUB_STEP_SUMMARY

                  # Copy documentation
                  cp ./node/README.md ./node/npm/glide/
                  echo "- Copied README.md" >> $GITHUB_STEP_SUMMARY

            # Create the TypeScript entry point file
            - name: Create package entry point
              shell: bash
              run: |
                  # Step summary
                  echo "## Creating Package Entry Point" >> $GITHUB_STEP_SUMMARY
                  echo "Creating index.ts entry point for the TypeScript package" >> $GITHUB_STEP_SUMMARY

                  # Create index.ts loader
                  cat > ./node/npm/glide/index.ts << 'EOL'
                  /**
                   * This is the entry point for the TypeScript-only package.
                   * It imports the main package and re-exports everything.
                   */
                  import * as glide from './build-ts/index';
                  export = glide;
                  EOL

                  echo "✅ Created TypeScript entry point file (index.ts)" >> $GITHUB_STEP_SUMMARY
                  echo '```typescript' >> $GITHUB_STEP_SUMMARY
                  cat ./node/npm/glide/index.ts >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

            # Configure the package.json version and run napi prepublish
            - name: Update package version
              shell: bash
              working-directory: ./node/npm/glide
              run: |
                  # Step summary
                  echo "## Configuring Package Version" >> $GITHUB_STEP_SUMMARY
                  echo "Setting version to ${RELEASE_VERSION} in package.json" >> $GITHUB_STEP_SUMMARY

                  # Update version in package.json using RELEASE_VERSION from job environment
                  jq ".version = \"${RELEASE_VERSION}\"" package.json > package.json.tmp && mv package.json.tmp package.json

                  # Display the updated version
                  pkg_name=$(jq -r '.name' package.json)
                  echo "✅ Updated package ${pkg_name} to version ${RELEASE_VERSION}" >> $GITHUB_STEP_SUMMARY

            # Add platform-specific dependencies to the package
            - name: Configure platform dependencies
              shell: bash
              working-directory: ./node/npm/glide
              run: |
                  # Step summary
                  echo "## Configuring Platform Dependencies" >> $GITHUB_STEP_SUMMARY
                  echo "Using NAPI-RS to add platform-specific packages as optional dependencies" >> $GITHUB_STEP_SUMMARY

                  # Install napi-rs CLI
                  npm install -g @napi-rs/cli

                  # Run napi prepublish to add optionalDependencies for platform packages
                  # It uses the 'name' (e.g., @valkey/valkey-glide) and 'napi' section from package.json
                  napi prepublish

                  # Extract and display dependencies for reporting
                  echo "### Added Optional Dependencies:" >> $GITHUB_STEP_SUMMARY
                  echo '```json' >> $GITHUB_STEP_SUMMARY
                  jq '.optionalDependencies' package.json >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY

                  # Count dependencies
                  dep_count=$(jq '.optionalDependencies | length' package.json)
                  echo "✅ Added ${dep_count} platform-specific optional dependencies" >> $GITHUB_STEP_SUMMARY

            # Install dependencies and prepare the package for publishing
            - name: Prepare package
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node/npm/glide
              run: |
                  # Step summary
                  echo "## Preparing Package for Publishing" >> $GITHUB_STEP_SUMMARY
                  echo "Installing dependencies and preparing the package" >> $GITHUB_STEP_SUMMARY

                  # Install dependencies
                  echo "Installing dependencies..."
                  npm install

                  # Run the build if the package has a build script
                  if [[ -f "package.json" && -n "$(jq -r '.scripts.build // ""' package.json)" ]]; then
                    echo "Running build script..."
                    npm run build
                    echo "- Build completed successfully" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "- No build script found, skipping" >> $GITHUB_STEP_SUMMARY
                  fi

                  # Verify package contents before publishing
                  file_count=$(find . -type f | wc -l)
                  echo "- Package contains ${file_count} files ready for publishing" >> $GITHUB_STEP_SUMMARY
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

            # Publish the TypeScript package to npm
            - name: Publish package
              if: ${{ github.event_name == 'push' || inputs.publish == true }}
              shell: bash
              working-directory: ./node/npm/glide
              run: |
                  # Step summary
                  echo "## Publishing TypeScript Package" >> $GITHUB_STEP_SUMMARY
                  echo "Publishing @valkey/valkey-glide@${RELEASE_VERSION} with tag ${NPM_TAG}" >> $GITHUB_STEP_SUMMARY

                  # Publish the package
                  set +e  # Don't exit immediately on error
                  npm_publish_output=$(npm publish --access public --tag ${{ env.NPM_TAG }} --ignore-scripts 2>&1)
                  publish_exit_code=$?
                  set -e

                  # Handle the result
                  if [[ $publish_exit_code -eq 0 ]]; then
                    echo "✅ Successfully published @valkey/valkey-glide@${RELEASE_VERSION}" >> $GITHUB_STEP_SUMMARY
                    echo "${npm_publish_output}"
                  elif echo "${npm_publish_output}" | grep -q "You cannot publish over the previously published versions"; then
                    echo "⚠️ Package @valkey/valkey-glide@${RELEASE_VERSION} already exists" >> $GITHUB_STEP_SUMMARY
                    echo "${npm_publish_output}"
                  else
                    echo "❌ Failed to publish package: ${npm_publish_output}" >> $GITHUB_STEP_SUMMARY
                    echo "${npm_publish_output}"
                    exit 1
                  fi
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

    test-release:
        if: ${{ github.event_name == 'push' || inputs.publish == true }}
        name: Test the release
        needs: [publish-base-to-npm, load-platform-matrix, determine-version]
        runs-on: ${{ matrix.build.CD_RUNNER || matrix.build.RUNNER }}
        container:
            image: ${{ matrix.build.IMAGE || '' }}
            options: ${{ matrix.build.CONTAINER_OPTIONS || 'none'}}
        strategy:
            fail-fast: false
            matrix:
                build: ${{fromJson(needs.load-platform-matrix.outputs.PLATFORM_MATRIX)}}
        steps:
            - name: Setup self-hosted runner access
              if: ${{ matrix.build.TARGET == 'aarch64-unknown-linux-gnu' }}
              run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/valkey-glide

            - name: Install redis and git for alpine
              if: ${{ contains(matrix.build.TARGET, 'musl') }}
              run: |
                  apk update
                  apk add git redis build-base libc-dev
                  node -v

                  # Try to install Zig for testing
                  if ! apk add --no-cache zig; then
                    echo "Zig not available in apk, installing manually..."
                    
                    # Install dependencies for manual installation
                    apk add --no-cache curl xz
                    
                    # Download latest stable Zig for Linux
                    ZIG_VERSION="0.12.0"
                    ARCH=$(uname -m)
                    if [[ "${ARCH}" == "x86_64" ]]; then
                      ZIG_ARCH="x86_64"
                    elif [[ "${ARCH}" == "aarch64" ]]; then
                      ZIG_ARCH="aarch64"
                    else
                      echo "Unsupported architecture: ${ARCH}"
                      exit 1
                    fi
                    
                    # Download and extract Zig
                    curl -sSL "https://ziglang.org/download/${ZIG_VERSION}/zig-linux-${ZIG_ARCH}-${ZIG_VERSION}.tar.xz" -o zig.tar.xz
                    mkdir -p /usr/local/zig
                    tar -xf zig.tar.xz --strip-components=1 -C /usr/local/zig
                    ln -s /usr/local/zig/zig /usr/local/bin/zig
                  fi

                  # Verify Zig installation
                  if command -v zig &> /dev/null; then
                    echo "Zig installed:"
                    zig version
                  else
                    echo "WARNING: Zig installation not found in PATH"
                  fi

            - name: Install Python for ubuntu
              if: ${{ contains(matrix.build.TARGET, 'linux-gnu') }}
              run: |
                  sudo apt update
                  sudo apt install python3

            - name: Checkout
              if: ${{  matrix.build.TARGET != 'aarch64-unknown-linux-musl'}}
              uses: actions/checkout@v4

            - name: Setup for musl
              if: ${{ contains(matrix.build.TARGET, 'musl') }}
              uses: ./.github/workflows/setup-musl-on-linux
              with:
                  npm-scope: ${{ vars.NPM_SCOPE }}
                  npm-auth-token: ${{ secrets.NPM_AUTH_TOKEN }}
                  arch: ${{ matrix.build.ARCH }}

            - name: Install engine
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              uses: ./.github/workflows/install-engine
              with:
                  engine-version: "8.0"
                  target: ${{ matrix.build.target }}

            - name: Setup node
              if: ${{ !contains(matrix.build.TARGET, 'musl') }}
              uses: actions/setup-node@v4
              with:
                  node-version: "latest"
                  registry-url: "https://registry.npmjs.org"
                  architecture: ${{ matrix.build.ARCH }}
                  scope: "${{ vars.NPM_SCOPE }}"
                  always-auth: true
                  token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Install tsc and compile utils
              shell: bash
              working-directory: ./utils
              run: |
                  npm install
                  npm install -g typescript
                  npx tsc -p ./tsconfig.json

            - name: Setup environment variables
              shell: bash
              run: |
                  # Set RELEASE_VERSION and NPM_TAG from the determine-version job outputs
                  echo "RELEASE_VERSION=${{ needs.determine-version.outputs.release_version }}" >> $GITHUB_ENV
                  echo "NPM_TAG=${{ needs.determine-version.outputs.npm_tag }}" >> $GITHUB_ENV

                  # Determine if the target is musl and set PLATFORM_ID (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    MUSL_FLAG="-musl"
                  else
                    MUSL_FLAG=""
                  fi
                  PLATFORM_ID="${{ matrix.build.NAMED_OS }}${MUSL_FLAG}-${{ matrix.build.ARCH }}"
                  echo "PLATFORM_ID=${PLATFORM_ID}" >> $GITHUB_ENV

                  # Determine build type (matrix-dependent)
                  if [[ "${{ matrix.build.TARGET }}" == *"apple-darwin"* ]]; then
                    BUILD_TYPE="mac"
                  elif [[ "${{ matrix.build.TARGET }}" == *"-musl"* ]]; then
                    BUILD_TYPE="musl"
                  else
                    BUILD_TYPE="gnu"
                  fi
                  echo "BUILD_TYPE=${BUILD_TYPE}" >> $GITHUB_ENV

            # Install and test the published package across different platforms
            - name: Install test dependencies
              shell: bash
              working-directory: ./utils/release-candidate-testing/node
              run: |
                  # Step summary for installation process
                  echo "## Package Installation" >> $GITHUB_STEP_SUMMARY
                  echo "Installing dependencies and published package on platform: ${{ env.PLATFORM_ID }}" >> $GITHUB_STEP_SUMMARY

                  # Install project dependencies first
                  echo "Installing project dependencies..."
                  npm install

                  # Add status table for installation
                  echo "| Operation | Status | Details |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                  echo "| Project Dependencies | ✅ Installed | utils/release-candidate-testing/node |" >> $GITHUB_STEP_SUMMARY

                  # Install the package for testing
                  echo "Installing @valkey/valkey-glide@${{ env.NPM_TAG }}..."
                  if npm install --no-save @valkey/valkey-glide@${{ env.NPM_TAG }}; then
                    echo "| Published Package | ✅ Installed | @valkey/valkey-glide@${RELEASE_VERSION} (${NPM_TAG}) |" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "| Published Package | ❌ Failed | @valkey/valkey-glide@${RELEASE_VERSION} (${NPM_TAG}) |" >> $GITHUB_STEP_SUMMARY
                    exit 1
                  fi

                  # Check binary files detection
                  echo "Verifying native binaries..."
                  if [[ -d "node_modules/@valkey" ]]; then
                    binary_files=$(find node_modules/@valkey -name "*.node" | wc -l)
                    if [[ $binary_files -gt 0 ]]; then
                      echo "| Native Binaries | ✅ Found | ${binary_files} files detected |" >> $GITHUB_STEP_SUMMARY
                    else
                      echo "| Native Binaries | ⚠️ Warning | No binaries found |" >> $GITHUB_STEP_SUMMARY
                    fi
                  fi

            # Run the test suite against the published package
            - name: Run tests
              shell: bash
              working-directory: ./utils/release-candidate-testing/node
              run: |
                  # Step summary for test execution
                  echo "## Testing Published Package" >> $GITHUB_STEP_SUMMARY
                  echo "| Package | Version | Platform | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                  echo "| @valkey/valkey-glide | ${RELEASE_VERSION} (${NPM_TAG}) | ${{ env.PLATFORM_ID }} | 🔄 Running tests... |" >> $GITHUB_STEP_SUMMARY

                  # Run tests
                  echo "Running tests on platform ${{ env.PLATFORM_ID }}..."
                  npm run test

                  # Update step summary with success status
                  echo "## Test Results" >> $GITHUB_STEP_SUMMARY
                  echo "| Test Suite | Platform | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
                  echo "| Release Verification | ${{ env.PLATFORM_ID }} | ✅ All tests passed |" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "🟢 Package validation completed successfully on platform ${{ env.PLATFORM_ID }}" >> $GITHUB_STEP_SUMMARY

            # Changed from deprecation to unpublish for better package management
            - name: Unpublish packages on failure
              if: ${{ failure() }}
              shell: bash
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
                  PLATFORM_MATRIX: ${{ needs.load-platform-matrix.outputs.PLATFORM_MATRIX }}
              run: |
                  # Add error information to step summary
                  echo "## ❌ Test Failure Recovery" >> $GITHUB_STEP_SUMMARY
                  echo "Tests failed on platform: ${{ env.PLATFORM_ID }}" >> $GITHUB_STEP_SUMMARY
                  echo "Initiating unpublish operation for packages at version ${RELEASE_VERSION}" >> $GITHUB_STEP_SUMMARY

                  # Detect OS and install jq
                  if [[ "${OSTYPE}" == "darwin"* ]]; then
                      brew install jq || true
                  elif command -v apk > /dev/null; then
                      apk add --no-cache jq
                  else
                      sudo apt-get update && sudo apt-get install -y jq
                  fi

                  # Log release version for unpublishing
                  echo "Release version for unpublishing: ${RELEASE_VERSION}"

                  # Validate RELEASE_VERSION
                  if [[ ! "${RELEASE_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ && "${RELEASE_VERSION}" != "0.0.0-pr" ]]; then
                      echo "❌ Invalid release version format: ${RELEASE_VERSION}" >> $GITHUB_STEP_SUMMARY
                      exit 1
                  fi

                  if [[ "${RELEASE_VERSION}" == "0.0.0-pr" ]]; then
                      echo "⚠️ Skipping unpublish for PR version." >> $GITHUB_STEP_SUMMARY
                      exit 0
                  fi

                  # Unpublishing base package instead of deprecating
                  echo "Unpublishing base package @valkey/valkey-glide@${RELEASE_VERSION}..."
                  npm unpublish "@valkey/valkey-glide@${RELEASE_VERSION}" --force || true
                  echo "- Unpublished @valkey/valkey-glide@${RELEASE_VERSION}" >> $GITHUB_STEP_SUMMARY

                  # Process platform matrix for unpublishing platform-specific packages
                  echo "${PLATFORM_MATRIX}" > platform_matrix.json
                  echo "## Platform-specific packages unpublished:" >> $GITHUB_STEP_SUMMARY
                  echo "| Package | Version | Status |" >> $GITHUB_STEP_SUMMARY
                  echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY

                  # Track unpublishing status
                  unpublish_success=true

                  # Process each platform package
                  while read -r pkg; do
                      package_name="@valkey/valkey-glide-${pkg}"
                      echo "Unpublishing ${package_name}@${RELEASE_VERSION}..."
                      
                      # Attempt to unpublish with error handling
                      if npm unpublish "${package_name}@${RELEASE_VERSION}" --force; then
                          echo "| ${package_name} | ${RELEASE_VERSION} | ✅ Unpublished |" >> $GITHUB_STEP_SUMMARY
                          echo "✅ Successfully unpublished ${package_name}@${RELEASE_VERSION}"
                      else
                          echo "| ${package_name} | ${RELEASE_VERSION} | ⚠️ Failed to unpublish |" >> $GITHUB_STEP_SUMMARY
                          echo "⚠️ Failed to unpublish ${package_name}@${RELEASE_VERSION}"
                          unpublish_success=false
                      fi
                  done < <(jq -r '.[] | "\(.NAMED_OS)\(.TARGET | test("musl") | if . then "-musl" else "" end)-\(.ARCH)"' platform_matrix.json)

                  # Add summary status
                  if [ "$unpublish_success" = true ]; then
                      echo "✅ All packages successfully unpublished" >> $GITHUB_STEP_SUMMARY
                  else
                      echo "⚠️ Some packages could not be unpublished" >> $GITHUB_STEP_SUMMARY
                      echo "Note: This might be because they were not published yet, or due to npm registry issues." >> $GITHUB_STEP_SUMMARY
                  fi
