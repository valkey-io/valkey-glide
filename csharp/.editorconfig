root = false

[*.csproj]
indent_size = 2

#### .NET & C# Coding Conventions ####
[*.cs]

# License header
file_header_template = Copyright Valkey GLIDE Project Contributors - SPDX Identifier: Apache-2.0

# Organize usings
dotnet_separate_import_directive_groups = true
dotnet_sort_system_directives_first = true

# this. and Me. preferences
dotnet_style_qualification_for_event = false:silent
dotnet_style_qualification_for_field = false:silent
dotnet_style_qualification_for_method = false:silent
dotnet_style_qualification_for_property = false:silent

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:silent
dotnet_style_predefined_type_for_member_access = true:silent

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_object_initializer = true:suggestion
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:suggestion

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# var preferences
csharp_style_var_elsewhere = false:suggestion
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = false:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_style_prefer_method_group_conversion = true:silent

# Null-checking preferences
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Code-block preferences
csharp_prefer_braces = true:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = file_scoped:suggestion
dotnet_style_namespace_match_folder = true:suggestion
csharp_style_prefer_top_level_statements = true:silent

# Expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:silent

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####
[*.{cs,vb}]

# Naming rules

dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.symbols = types_and_namespaces
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.interfaces_should_be_ipascalcase.severity = suggestion
dotnet_naming_rule.interfaces_should_be_ipascalcase.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_ipascalcase.style = ipascalcase

dotnet_naming_rule.type_parameters_should_be_tpascalcase.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_tpascalcase.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_tpascalcase.style = tpascalcase

dotnet_naming_rule.methods_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.methods_should_be_pascalcase.symbols = methods
dotnet_naming_rule.methods_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.properties_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.properties_should_be_pascalcase.symbols = properties
dotnet_naming_rule.properties_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.events_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.events_should_be_pascalcase.symbols = events
dotnet_naming_rule.events_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase

dotnet_naming_rule.local_constants_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_constants_should_be_camelcase.symbols = local_constants
dotnet_naming_rule.local_constants_should_be_camelcase.style = camelcase

dotnet_naming_rule.parameters_should_be_camelcase.severity = suggestion
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase

dotnet_naming_rule.public_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_fields_should_be_pascalcase.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_fields_should_be__camelcase.severity = suggestion
dotnet_naming_rule.private_fields_should_be__camelcase.symbols = private_fields
dotnet_naming_rule.private_fields_should_be__camelcase.style = _camelcase

dotnet_naming_rule.private_static_fields_should_be_s_camelcase.severity = suggestion
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.style = s_camelcase

dotnet_naming_rule.public_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.symbols = public_constant_fields
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.symbols = private_constant_fields
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.symbols = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.enums_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.enums_should_be_pascalcase.symbols = enums
dotnet_naming_rule.enums_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_functions_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascalcase.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.non_field_members_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascalcase.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascalcase.style = pascalcase

# Symbol specifications

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interfaces.required_modifiers =

dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_symbols.enums.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enums.required_modifiers =

dotnet_naming_symbols.events.applicable_kinds = event
dotnet_naming_symbols.events.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.events.required_modifiers =

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.methods.required_modifiers =

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.properties.required_modifiers =

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_fields.required_modifiers =

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers =

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.types_and_namespaces.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.types_and_namespaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types_and_namespaces.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.type_parameters.applicable_kinds = namespace
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers =

dotnet_naming_symbols.private_constant_fields.applicable_kinds = field
dotnet_naming_symbols.private_constant_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_constant_fields.required_modifiers = const

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers =

dotnet_naming_symbols.local_constants.applicable_kinds = local
dotnet_naming_symbols.local_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_constants.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers =

dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_functions.required_modifiers =

# Naming styles

dotnet_naming_style.pascalcase.required_prefix =
dotnet_naming_style.pascalcase.required_suffix =
dotnet_naming_style.pascalcase.word_separator =
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.ipascalcase.required_prefix = I
dotnet_naming_style.ipascalcase.required_suffix =
dotnet_naming_style.ipascalcase.word_separator =
dotnet_naming_style.ipascalcase.capitalization = pascal_case

dotnet_naming_style.tpascalcase.required_prefix = T
dotnet_naming_style.tpascalcase.required_suffix =
dotnet_naming_style.tpascalcase.word_separator =
dotnet_naming_style.tpascalcase.capitalization = pascal_case

dotnet_naming_style._camelcase.required_prefix = _
dotnet_naming_style._camelcase.required_suffix =
dotnet_naming_style._camelcase.word_separator =
dotnet_naming_style._camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix =
dotnet_naming_style.camelcase.required_suffix =
dotnet_naming_style.camelcase.word_separator =
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.s_camelcase.required_prefix = s_
dotnet_naming_style.s_camelcase.required_suffix =
dotnet_naming_style.s_camelcase.word_separator =
dotnet_naming_style.s_camelcase.capitalization = camel_case

dotnet_analyzer_diagnostic.category-Style.severity = error

### xUnit Analyzers #### see https://dotnet_diagnostic.xUnit.net/dotnet_diagnostic.xUnit.analyzers/rules/ for details

## Usage Analyzers

# Test classes must be public
dotnet_diagnostic.xUnit1000.severity = error
# Fact methods cannot have parameters
dotnet_diagnostic.xUnit1001.severity = error
# Test methods cannot have multiple Fact or Theory attributes
dotnet_diagnostic.xUnit1002.severity = error
# Theory methods must have test data
dotnet_diagnostic.xUnit1003.severity = error
# Test methods should not be skipped
dotnet_diagnostic.xUnit1004.severity = suggestion
# Fact methods should not have test data
dotnet_diagnostic.xUnit1005.severity = error
# Theory methods should have parameters
dotnet_diagnostic.xUnit1006.severity = error
# ClassData must point at a valid class
dotnet_diagnostic.xUnit1007.severity = error
# Test data attribute should only be used on a Theory
dotnet_diagnostic.xUnit1008.severity = error
# InlineData values must match the number of method parameters
dotnet_diagnostic.xUnit1009.severity = error
# The value is not convertible to the method parameter type
dotnet_diagnostic.xUnit1010.severity = error
# There is no matching method parameter
dotnet_diagnostic.xUnit1011.severity = error
# Null should not be used for value type parameters
dotnet_diagnostic.xUnit1012.severity = error
# Public method should be marked as test
dotnet_diagnostic.xUnit1013.severity = error
# MemberData should use nameof operator for member name
dotnet_diagnostic.xUnit1014.severity = error
# MemberData must reference an existing member
dotnet_diagnostic.xUnit1015.severity = error
# MemberData must reference a public member
dotnet_diagnostic.xUnit1016.severity = error
# MemberData must reference a static member
dotnet_diagnostic.xUnit1017.severity = error
# MemberData must reference a valid member kind
dotnet_diagnostic.xUnit1018.severity = error
# MemberData must reference a member providing a valid data type
dotnet_diagnostic.xUnit1019.severity = error
# MemberData must reference a property with a getter
dotnet_diagnostic.xUnit1020.severity = error
# MemberData should not have parameters if the referenced member is not a method
dotnet_diagnostic.xUnit1021.severity = error
# Theory methods cannot have a parameter array
dotnet_diagnostic.xUnit1022.severity = error
# Theory methods cannot have default parameter values
dotnet_diagnostic.xUnit1023.severity = error
# Test methods cannot have overloads
dotnet_diagnostic.xUnit1024.severity = error
# InlineData should be unique within the Theory it belongs to
dotnet_diagnostic.xUnit1025.severity = error
# Theory methods should use all of their parameters
dotnet_diagnostic.xUnit1026.severity = error
# Collection definition classes must be public
dotnet_diagnostic.xUnit1027.severity = error
# Test method must have valid return type
dotnet_diagnostic.xUnit1028.severity = error
# Local functions cannot be test functions
dotnet_diagnostic.xUnit1029.severity = error
# Do not call ConfigureAwait in test method
dotnet_diagnostic.xUnit1030.severity = error
# Do not use blocking task operations in test method
dotnet_diagnostic.xUnit1031.severity = suggestion
# Test classes cannot be nested within a generic class
dotnet_diagnostic.xUnit1032.severity = error
# Test classes decorated with 'dotnet_diagnostic.xUnit.IClassFixture' or 'dotnet_diagnostic.xUnit.ICollectionFixture' should add a constructor argument of type TFixture
dotnet_diagnostic.xUnit1033.severity = suggestion
# Null should only be used for nullable parameters
dotnet_diagnostic.xUnit1034.severity = error
# The value is not convertible to the method parameter type
dotnet_diagnostic.xUnit1035.severity = error
# There is no matching method parameter
dotnet_diagnostic.xUnit1036.severity = error
# There are fewer theory data type arguments than required by the parameters of the test method
dotnet_diagnostic.xUnit1037.severity = error
# There are more theory data type arguments than allowed by the parameters of the test method
dotnet_diagnostic.xUnit1038.severity = error
# The type argument to theory data is not compatible with the type of the corresponding test method parameter
dotnet_diagnostic.xUnit1039.severity = error
# The type argument to theory data is nullable, while the type of the corresponding test method parameter is not
dotnet_diagnostic.xUnit1040.severity = error
# Fixture arguments to test classes must have fixture sources
dotnet_diagnostic.xUnit1041.severity = error
# The member referenced by the MemberData attribute returns untyped data rows
dotnet_diagnostic.xUnit1042.severity = error
# Constructors on classes derived from FactAttribute must be public when used on test methods
dotnet_diagnostic.xUnit1043.severity = error
# Avoid using TheoryData type arguments that are not serializable
dotnet_diagnostic.xUnit1044.severity = error
# Avoid using TheoryData type arguments that might not be serializable
dotnet_diagnostic.xUnit1045.severity = error
# Avoid using TheoryDataRow arguments that are not serializable
dotnet_diagnostic.xUnit1046.severity = error
# Avoid using TheoryDataRow arguments that might not be serializable
dotnet_diagnostic.xUnit1047.severity = error
# Avoid using 'async void' for test methods as it is deprecated in dotnet_diagnostic.xUnit.net v3
dotnet_diagnostic.xUnit1048.severity = error
# Do not use 'async void' for test methods as it is no longer supported
dotnet_diagnostic.xUnit1049.severity = error
# The class referenced by the ClassData attribute returns untyped data rows
dotnet_diagnostic.xUnit1050.severity = error
# Calls to methods which accept CancellationToken should use TestContext.Current.CancellationToken
dotnet_diagnostic.xUnit1051.severity = suggestion

## Assertion Analyzers

# Constants and literals should be the expected argument
dotnet_diagnostic.xUnit2000.severity = error
# Do not use invalid equality check
dotnet_diagnostic.xUnit2001.severity = error
# Do not use null check on value type
dotnet_diagnostic.xUnit2002.severity = error
# Do not use equality check to test for null value
dotnet_diagnostic.xUnit2003.severity = error
# Do not use equality check to test for boolean conditions
dotnet_diagnostic.xUnit2004.severity = error
# Do not use identity check on value type
dotnet_diagnostic.xUnit2005.severity = error
# Do not use invalid string equality check
dotnet_diagnostic.xUnit2006.severity = error
# Do not use typeof expression to check the type
dotnet_diagnostic.xUnit2007.severity = error
# Do not use boolean check to match on regular expressions
dotnet_diagnostic.xUnit2008.severity = error
# Do not use boolean check to check for substrings
dotnet_diagnostic.xUnit2009.severity = error
# Do not use boolean check to check for string equality
dotnet_diagnostic.xUnit2010.severity = error
# Do not use empty collection check
dotnet_diagnostic.xUnit2011.severity = error
# Do not use Enumerable.Any() to check if a value exists in a collection
dotnet_diagnostic.xUnit2012.severity = error
# Do not use equality check to check for collection size.
dotnet_diagnostic.xUnit2013.severity = error
# Do not use throws check to check for asynchronously thrown exception
dotnet_diagnostic.xUnit2014.severity = error
# Do not use typeof expression to check the exception type
dotnet_diagnostic.xUnit2015.severity = error
# Keep precision in the allowed range when asserting equality of doubles or decimals.
dotnet_diagnostic.xUnit2016.severity = error
# Do not use Contains() to check if a value exists in a collection
dotnet_diagnostic.xUnit2017.severity = error
# Do not compare an object's exact type to an abstract class or interface
dotnet_diagnostic.xUnit2018.severity = error
# Do not use obsolete throws check to check for asynchronously thrown exception
dotnet_diagnostic.xUnit2019.severity = error
# Do not use always-failing boolean assertion to fail a test
dotnet_diagnostic.xUnit2020.severity = error
# Async assertions should be awaited
dotnet_diagnostic.xUnit2021.severity = error
# Boolean assertions should not be negated
dotnet_diagnostic.xUnit2022.severity = error
# Do not use collection methods for single-item collections
dotnet_diagnostic.xUnit2023.severity = error
# Do not use boolean asserts for simple equality tests
dotnet_diagnostic.xUnit2024.severity = error
# The boolean assertion statement can be simplified
dotnet_diagnostic.xUnit2025.severity = error
# Comparison of sets must be done with IEqualityComparer
dotnet_diagnostic.xUnit2026.severity = error
# Comparison of sets to linear containers have undefined results
dotnet_diagnostic.xUnit2027.severity = error
# Do not use Assert.Empty or Assert.NotEmpty with problematic types
dotnet_diagnostic.xUnit2028.severity = error
# Do not use Assert.Empty to check if a value does not exist in a collection
dotnet_diagnostic.xUnit2029.severity = error
# Do not use Assert.NotEmpty to check if a value exists in a collection
dotnet_diagnostic.xUnit2030.severity = error
# Do not use Where clause with Assert.Single
dotnet_diagnostic.xUnit2031.severity = error
# Type assertions based on 'assignable from' are confusingly named
dotnet_diagnostic.xUnit2032.severity = error

## Extensibility Analyzers

# Classes which cross AppDomain boundaries must derive directly or indirectly from LongLivedMarshalByRefObject
dotnet_diagnostic.xUnit3000.severity = error
# Classes that are marked as serializable (or created by the test framework at runtime) must have a public parameterless constructor
dotnet_diagnostic.xUnit3001.severity = error
# Classes which are JSON serializable should not be tested for their concrete type
dotnet_diagnostic.xUnit3002.severity = error
