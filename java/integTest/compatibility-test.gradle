// Enhanced build configuration for Jedis compatibility testing
// This file extends the existing build.gradle with compatibility testing capabilities

apply plugin: 'java-library'

// Additional dependencies for compatibility testing
dependencies {
    // Add actual Jedis for comparison (optional)
    testImplementation('redis.clients:jedis:5.1.0') {
        // Use a different classifier to avoid conflicts
        classifier = 'comparison'
        transitive = false
    }
    
    // Additional testing utilities
    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.testcontainers:testcontainers:1.19.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
    
    // Performance testing
    testImplementation 'org.openjdk.jmh:jmh-core:1.37'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

// Task to download actual Jedis for comparison
tasks.register('downloadJedisForComparison', Copy) {
    description = 'Download actual Jedis JAR for compatibility testing'
    
    doFirst {
        configurations.create('jedisComparison')
        dependencies.add('jedisComparison', 'redis.clients:jedis:5.1.0')
        
        from configurations.jedisComparison
        into "${buildDir}/comparison-libs"
        rename { filename ->
            "jedis-comparison.jar"
        }
    }
}

// Enhanced test task for compatibility testing
tasks.register('compatibilityTest', Test) {
    description = 'Run compatibility tests comparing GLIDE wrapper with actual Jedis'
    group = 'verification'
    
    dependsOn 'downloadJedisForComparison'
    
    // Include only compatibility tests
    filter {
        includeTestsMatching 'glide.JedisCompatibilityTests'
        includeTestsMatching 'glide.DualJedisTestRunner'
    }
    
    // Set system properties for test configuration
    doFirst {
        systemProperty 'jedis.jar.path', "${buildDir}/comparison-libs/jedis-comparison.jar"
        systemProperty 'test.server.standalone', standaloneHosts
        systemProperty 'test.server.cluster', clusterHosts
        systemProperty 'test.server.tls', System.getProperty("tls")
        systemProperty 'compatibility.test.iterations', System.getProperty("iterations", "1000")
        systemProperty 'compatibility.test.concurrent.clients', System.getProperty("concurrent.clients", "10")
    }
    
    // Enhanced test logging
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams true
        showCauses true
        showExceptions true
        showStackTraces true
    }
    
    // Increase memory for performance tests
    minHeapSize = "1024m"
    maxHeapSize = "2048m"
    
    // Set test timeout
    timeout = Duration.ofMinutes(10)
    
    // Generate detailed reports
    reports {
        html.required = true
        junitXml.required = true
    }
    
    // Custom test result handling
    afterTest { desc, result ->
        def duration = (result.getEndTime() - result.getStartTime()) / 1000
        logger.quiet "${desc.className}.${desc.name}: ${result.resultType} (${duration}s)"
        
        if (result.resultType == TestResult.ResultType.FAILURE) {
            logger.error "FAILED: ${desc.className}.${desc.name}"
            result.exceptions.each { exception ->
                logger.error "  ${exception.message}"
            }
        }
    }
    
    doLast {
        println "\n=== Compatibility Test Summary ==="
        println "Test results: ${buildDir}/reports/tests/compatibilityTest/index.html"
        println "JUnit XML: ${buildDir}/test-results/compatibilityTest/"
    }
}

// Task to run performance benchmarks
tasks.register('performanceBenchmark', Test) {
    description = 'Run performance benchmarks comparing GLIDE wrapper with actual Jedis'
    group = 'verification'
    
    dependsOn 'downloadJedisForComparison'
    
    filter {
        includeTestsMatching '*PerformanceTest'
        includeTestsMatching '*BenchmarkTest'
    }
    
    systemProperty 'benchmark.iterations', System.getProperty("benchmark.iterations", "10000")
    systemProperty 'benchmark.warmup', System.getProperty("benchmark.warmup", "1000")
    systemProperty 'benchmark.threads', System.getProperty("benchmark.threads", "1")
    
    minHeapSize = "2048m"
    maxHeapSize = "4096m"
    
    jvmArgs = [
        '-XX:+UseG1GC',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseJVMCICompiler'
    ]
}

// Task to run stress tests
tasks.register('stressTest', Test) {
    description = 'Run stress tests for compatibility layer'
    group = 'verification'
    
    filter {
        includeTestsMatching '*StressTest'
    }
    
    systemProperty 'stress.test.duration', System.getProperty("stress.duration", "300") // 5 minutes
    systemProperty 'stress.test.clients', System.getProperty("stress.clients", "50")
    systemProperty 'stress.test.operations', System.getProperty("stress.operations", "1000")
    
    timeout = Duration.ofMinutes(15)
    minHeapSize = "1024m"
    maxHeapSize = "3072m"
}

// Task to generate compatibility report
tasks.register('compatibilityReport') {
    description = 'Generate comprehensive compatibility report'
    group = 'documentation'
    
    dependsOn 'compatibilityTest'
    
    doLast {
        def reportFile = file("${buildDir}/reports/compatibility-report.md")
        reportFile.parentFile.mkdirs()
        
        def report = """
# Jedis Compatibility Test Report

Generated: ${new Date()}

## Test Environment
- Java Version: ${System.getProperty('java.version')}
- OS: ${System.getProperty('os.name')} ${System.getProperty('os.version')}
- Architecture: ${System.getProperty('os.arch')}

## Test Results
See detailed results in: ${buildDir}/reports/tests/compatibilityTest/index.html

## Performance Comparison
See performance results in: ${buildDir}/reports/tests/performanceBenchmark/index.html

## Recommendations
1. Review failed tests for compatibility issues
2. Check performance benchmarks for regression
3. Validate stress test results for stability

## Next Steps
- Address any compatibility gaps identified
- Optimize performance bottlenecks
- Enhance test coverage for edge cases
"""
        
        reportFile.text = report
        println "Compatibility report generated: ${reportFile.absolutePath}"
    }
}

// Task to run all compatibility-related tests
tasks.register('fullCompatibilityTest') {
    description = 'Run complete compatibility test suite'
    group = 'verification'
    
    dependsOn 'compatibilityTest', 'performanceBenchmark', 'stressTest'
    finalizedBy 'compatibilityReport'
    
    doLast {
        println "\n=== Full Compatibility Test Suite Complete ==="
        println "All compatibility tests have been executed."
        println "Check the compatibility report for detailed results."
    }
}

// Configure existing test task to exclude compatibility tests by default
test {
    filter {
        excludeTestsMatching 'glide.JedisCompatibilityTests'
        excludeTestsMatching 'glide.DualJedisTestRunner'
        excludeTestsMatching '*PerformanceTest'
        excludeTestsMatching '*BenchmarkTest'
        excludeTestsMatching '*StressTest'
    }
}

// Add compatibility test to check task
check.dependsOn compatibilityTest
