plugins {
    id 'java'
    id 'java-library'
    id 'io.freefair.lombok' version '8.6'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'jacoco'
}

allprojects {
    // JaCoCo section (common config for code coverage)
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.9"
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                excludes = [
                    'glide.models.protobuf.*',
                    'glide.connectors.resources.*',
                    'glide.connectors.handlers.*'
                ]
            }
        }
    }

    check.dependsOn jacocoTestCoverageVerification
    // End of JaCoCo section
}

repositories {
    mavenCentral()
}

subprojects {
    repositories {
        // Runs for GITHUB_ACTIONS for testing release Maven deployment.
        if(System.getenv("ORG_GRADLE_PROJECT_centralManualTestingAuthHeaderName")) {
            maven {
                name = "centralManualTesting"
                url "https://central.sonatype.com/api/v1/publisher/deployments/download/"
                credentials(HttpHeaderCredentials)
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
        mavenCentral()
    }
    // minimal java compatibility level
    apply plugin: 'java'
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(11))
            vendor = JvmVendorSpec.ADOPTIUM // Temurin
        }
    }
    tasks.withType(Test) {
        useJUnitPlatform()

        testLogging {
            exceptionFormat "full"
            events "started", "skipped", "passed", "failed"
            showStandardStreams true
        }
    }

    ext {
        defaultReleaseVersion = "255.255.255"
        failedTests = []
    }

    tasks.withType(Test) {
        afterTest { TestDescriptor descriptor, TestResult result ->
            if (result.resultType == TestResult.ResultType.FAILURE) {
                failedTests << "${descriptor.className}.${descriptor.name}"
            }
        }
    }

    gradle.buildFinished {
        if (!failedTests.empty) {
            println "\nFailed tests for `:${project.name}`:"
            failedTests.each { failedTest -> println failedTest }
            println ""
        }
    }
}

// Spotless section (code style)
spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**', '**/protobuf/**'
        }
        licenseHeader('/** Copyright Valkey GLIDE Project Contributors - SPDX Identifier: Apache-2.0 */')
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        googleJavaFormat('1.22.0').reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
        indentWithTabs(2)
        indentWithSpaces(4)
    }
}
// End of Spotless section
