plugins {
    id 'java-library'
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.6'
    id 'com.google.osdetector' version '1.7.3'
    id 'com.gradleup.shadow' version '8.3.8'
}

repositories {
    mavenCentral()
}

configurations {
    testImplementation { extendsFrom shadow }
}

ext {
    // osdetector returns 'aarch_64', but rust triplet has 'aarch64'
    arch = osdetector.arch == 'aarch_64' ? 'aarch64' : osdetector.arch;
}

dependencies {
    // Depend on the main GLIDE client
    implementation project(':client')

    // Explicit protobuf version to match client
    shadow group: 'com.google.protobuf', name: 'protobuf-java', version: '4.29.3'

    // Apache Commons Pool 2 for connection pooling
    shadow group: 'org.apache.commons', name: 'commons-pool2', version: '2.12.0'

    // Test dependencies
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.10.2'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.2.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
}

java {
    modularity.inferModulePath = false // Disable module system for compatibility
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    dependsOn delombok
    source = delombok.outputs
    options.tags = [ "example:a:Example:", "apiNote:a:API Note:" ]
    failOnError = false // Disable javadoc errors for compatibility layer
}

tasks.register('copyNativeLib', Copy) {
    def target
    if (project.hasProperty('target')) {
        target = project.target
        from "${projectDir}/../target/${target}/release/"
    } else if (osdetector.os == 'linux' && osdetector.release.id != 'alpine') {
        from "${projectDir}/../target/${arch}-unknown-linux-gnu/release/"
    } else if (osdetector.os == 'linux' && osdetector.release.id == 'alpine') {
        from "${projectDir}/../target/${arch}-unknown-linux-musl/release/"
    } else {
        from "${projectDir}/../target/release/"
    }
    include "*.dylib", "*.so"
    into sourceSets.main.output.resourcesDir
}

jar.dependsOn('copyNativeLib')
shadowJar.dependsOn('copyNativeLib')
javadoc.dependsOn('copyNativeLib')
copyNativeLib.dependsOn(':client:buildRust')
compileJava.dependsOn(':client:shadowJar', ':client:jar')
compileTestJava.dependsOn('copyNativeLib')
delombok.dependsOn('compileJava')

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    // Native library path for tests
    if (osdetector.os == 'linux' && osdetector.release.id == 'alpine') {
        jvmArgs "-Djava.library.path=${projectDir}/../target/${arch}-unknown-linux-musl/release"
    } else {
        jvmArgs "-Djava.library.path=${projectDir}/../target/release"
    }
}

jar {
    if (project.hasProperty('target') && project.target.contains("musl")) {
        archiveClassifier = "linux_musl_${arch}"
    } else {
        archiveClassifier = osdetector.classifier
    }
}

shadowJar {
    if (project.hasProperty('target') && project.target.contains("musl")) {
        archiveClassifier = "linux_musl_${arch}"
    } else {
        archiveClassifier = osdetector.classifier
    }
    excludes.remove("module-info.class")
    relocate('com.google.protobuf', 'glide.com.google.protobuf')
    mergeServiceFiles()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.shadow
            groupId = 'io.valkey'
            artifactId = 'valkey-glide-jedis-compatibility'
            version = System.getenv("GLIDE_RELEASE_VERSION") ?: project.ext.defaultReleaseVersion

            pom {
                name = 'valkey-glide-jedis-compatibility'
                description = 'Jedis compatibility layer for Valkey GLIDE'
                url = 'https://github.com/valkey-io/valkey-glide.git'
            }
        }
    }
}

// Fix publishing task dependencies
tasks.withType(GenerateModuleMetadata) {
    dependsOn jar, shadowJar
}

publishMavenPublicationToMavenLocal.dependsOn jar, shadowJar
