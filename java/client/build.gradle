import java.nio.file.Paths

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.freefair.lombok' version '8.6'
    id 'com.github.spotbugs' version '6.0.18'
    id 'com.google.osdetector' version '1.7.3'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('com.google.protobuf:protobuf-java') {
        version {
            require '[4.29.1,5.0)'
            prefer '4.29.1'
        }
    }
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.13.0'

    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.6'

    // junit
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.2.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.10.2'

    //lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
}

ext {
    checkProtocVersion = { String output ->
        // Line in format like: libprotoc 29.1
        def parts = output.split(" ")[1].split("\\.")
        int majorVersion = Integer.parseInt(parts[0].trim())
        int minorVersion = parts.length > 1 ? Integer.parseInt(parts[1].trim()) : 0
        if (majorVersion < 4 || (majorVersion == 4 && minorVersion < 29)) {
            throw new GradleException(
                    "Protobuf compiler (protoc) version 4.29 or newer is required. Current version: $output")
        }
        return output.split(" ")[1]
    }

    // osdetector returns 'aarch_64', but rust triplet has 'aarch64'
    arch = osdetector.arch == 'aarch_64' ? 'aarch64' : osdetector.arch;
}

tasks.register('protobuf', Exec) {
    doFirst {
        try {
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    commandLine 'protoc', '--version'
                    workingDir Paths.get(project.rootDir.path, '..').toFile()
                    standardOutput = os
                }
                checkProtocVersion(os.toString());
            }
        } catch (Exception e) {
            if (e.getMessage().startsWith("A problem occurred starting process")) {
                throw new GradleException("No Protobuf compiler (protoc) found. Protobuf compiler version 4.29 or newer is required.");
            }
            throw e
        }

        project.mkdir(Paths.get(project.projectDir.path, 'src/main/java/glide/models/protobuf').toString())
    }
    commandLine 'protoc',
        '-Iprotobuf=glide-core/src/protobuf/',
        '--java_out=java/client/src/main/java/glide/models/protobuf',
        'glide-core/src/protobuf/connection_request.proto',
        'glide-core/src/protobuf/command_request.proto',
        'glide-core/src/protobuf/response.proto'
    workingDir Paths.get(project.rootDir.path, '..').toFile()
}

tasks.register('cleanProtobuf') {
    doFirst {
        project.delete(Paths.get(project.projectDir.path, 'src/main/java/glide/models/protobuf').toString())
    }
}

tasks.register('cleanRust') {
    doFirst {
        project.delete(Paths.get(project.projectDir.path, '../target').toString())
    }
}

tasks.register('buildRust', Exec) {
    def target
    if (project.hasProperty('target')) {
        target = project.target
    } else {
        if (osdetector.os == 'linux' && osdetector.release.id != 'alpine') {
            target = "${arch}-unknown-linux-gnu.2.17"
        } else if (osdetector.os == 'linux' && osdetector.release.id == 'alpine') {
            target = "${arch}-unknown-linux-musl"
        } else if (osdetector.os == 'windows') {
            target = "${arch}-pc-windows-msvc"
        } else {
            target = ""
        }
    }

    print("Building Rust with target: '$target'\n")
    if (target.contains("linux") && !target.contains("musl")) {
        commandLine 'cargo', 'zigbuild', '--target', "$target", '--release'
    } else if (target.contains("musl")) {
        commandLine 'cargo', 'zigbuild', '--target', "$target", '--release'
        environment RUSTFLAGS: '-C target-feature=-crt-static'
    } else if (target.contains("windows")) {
        commandLine 'cargo', 'build', '--target', "$target", '--release'
    } else {
        commandLine 'cargo', 'build', '--release'
    }
    workingDir project.rootDir
    environment CARGO_TERM_COLOR: 'always'
}

tasks.register('buildWithRust') {
    dependsOn 'buildRust'
    finalizedBy 'build'
}

tasks.register('buildWithProto') {
    dependsOn 'protobuf'
    finalizedBy 'build'
}

tasks.register('buildAll') {
    dependsOn 'protobuf', 'buildRust'
    finalizedBy 'build'
}

compileJava.dependsOn('protobuf')
clean.dependsOn('cleanProtobuf', 'cleanRust')

tasks.register('copyNativeLib', Copy) {
    def target
    if (project.hasProperty('target')) {
        target = project.target
        from "${projectDir}/../target/${target}/release/"
    } else if (osdetector.os == 'linux' && osdetector.release.id != 'alpine') {
        from "${projectDir}/../target/${arch}-unknown-linux-gnu/release/"
    } else if (osdetector.os == 'linux' && osdetector.release.id == 'alpine') {
        from "${projectDir}/../target/${arch}-unknown-linux-musl/release/"
    } else if (osdetector.os == 'windows') {
        from "${projectDir}/../target/${arch}-pc-windows-msvc/release/"
    } else {
        from "${projectDir}/../target/release/"
    }
    include "*.dylib", "*.so", "*.dll"
    into sourceSets.main.output.resourcesDir
}

delombok.dependsOn('compileJava')
jar.dependsOn('copyNativeLib')
javadoc.dependsOn('copyNativeLib')
copyNativeLib.dependsOn('buildRust')
compileTestJava.dependsOn('copyNativeLib')
test.dependsOn('buildRust')

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
    exclude 'glide/models' // exclude protobuf files
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact tasks.named('javadocJar')
            artifact tasks.named('sourcesJar')
            groupId = 'io.valkey'
            artifactId = 'valkey-glide'
            version = System.getenv("GLIDE_RELEASE_VERSION") ?: project.ext.defaultReleaseVersion
            pom {
                name = 'valkey-glide'
                description = 'General Language Independent Driver for the Enterprise (GLIDE) for Valkey'
                url = 'https://github.com/valkey-io/valkey-glide.git'
                inceptionYear = '2024'
                scm {
                    url = 'https://github.com/valkey-io/valkey-glide'
                    connection = 'scm:git:ssh://git@github.com/valkey-io/valkey-glide.git'
                    developerConnection = 'scm:git:ssh://git@github.com/valkey-io/valkey-glide.git'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'Valkey GLIDE Maintainers'
                        url = 'https://github.com/valkey-io/valkey-glide.git'
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

java {
    modularity.inferModulePath = true
}

tasks.withType(Sign) {
    def releaseVersion = System.getenv("GLIDE_RELEASE_VERSION") ?: defaultReleaseVersion;
    def isReleaseVersion = !releaseVersion.endsWith("SNAPSHOT") && releaseVersion != defaultReleaseVersion;
    onlyIf("isReleaseVersion is set") { isReleaseVersion }
}

signing {
    sign publishing.publications
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    // This is needed for the FFI tests
    if (project.hasProperty('target')) {
        target = project.target
        jvmArgs "-Djava.library.path=${projectDir}/../target/${target}/release"
    } else if (osdetector.os == 'linux' && osdetector.release.id != 'alpine') {
        jvmArgs "-Djava.library.path=${projectDir}/../target/${arch}-unknown-linux-gnu/release"
    } else if (osdetector.os == 'linux' && osdetector.release.id == 'alpine') {
        jvmArgs "-Djava.library.path=${projectDir}/../target/${arch}-unknown-linux-musl/release"
    } else if (osdetector.os == 'windows') {
        jvmArgs "-Djava.library.path=${projectDir}/../target/${arch}-pc-windows-msvc/release"
    } else {
        jvmArgs "-Djava.library.path=${projectDir}/../target/release"
    }

    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jar {
    if (project.hasProperty('target') && project.target.contains("musl")) {
        archiveClassifier = "linux_musl-${osdetector.arch}"
    } else if (osdetector.os == 'windows') {
        archiveClassifier = "windows-${osdetector.arch}"
    } else {
        archiveClassifier = osdetector.classifier
    }
}

sourcesJar {
    // suppress following error
    // Entry glide/api/BaseClient.java is a duplicate but no duplicate handling strategy has been set
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

delombok {
    modulePath = classpath
}

javadoc {
    dependsOn delombok
    source = delombok.outputs
    options.tags = [ "example:a:Example:" ]
    failOnError = false // TODO fix all javadoc errors and warnings and remove that
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
    excludeFilter = file('config/spotbugs-exclude.xml')
}

spotbugsTest {
    excludeFilter = file('config/spotbugs-exclude.xml')
}

spotbugs {
    ignoreFailures = true
    showStackTraces = true
}
